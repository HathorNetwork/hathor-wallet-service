/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/fullnode.ts":
/*!*************************!*\
  !*** ./src/fullnode.ts ***!
  \*************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.create = exports.TIMEOUT = exports.BASE_URL = void 0;\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"axios\"));\nexports.BASE_URL = process.env.DEFAULT_SERVER;\nexports.TIMEOUT = 10000;\nconst create = (baseURL = exports.BASE_URL) => {\n    const api = axios_1.default.create({\n        baseURL,\n        headers: {},\n        timeout: exports.TIMEOUT,\n    });\n    const downloadTx = async (txId) => {\n        const response = await api.get(`transaction?id=${txId}`, {\n            data: null,\n            headers: { 'content-type': 'application/json' },\n        });\n        return response.data;\n    };\n    const getConfirmationData = async (txId) => {\n        const response = await api.get(`transaction_acc_weight?id=${txId}`, {\n            data: null,\n            headers: { 'content-type': 'application/json' },\n        });\n        return response.data;\n    };\n    const queryGraphvizNeighbours = async (txId, graphType, maxLevel) => {\n        const url = `graphviz/neighbours.dot/?tx=${txId}&graph_type=${graphType}&max_level=${maxLevel}`;\n        const response = await api.get(url, {\n            data: null,\n            headers: { 'content-type': 'application/json' },\n        });\n        return response.data;\n    };\n    return {\n        api,\n        downloadTx,\n        getConfirmationData,\n        queryGraphvizNeighbours,\n    };\n};\nexports.create = create;\nexports[\"default\"] = (0, exports.create)();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvZnVsbG5vZGUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBT0E7QUFFQTtBQUNBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQTdDQTtBQStDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3dhbGxldC1zZXJ2aWNlLy4vc3JjL2Z1bGxub2RlLnRzPzhjNTIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEhhdGhvciBMYWJzIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuXG5leHBvcnQgY29uc3QgQkFTRV9VUkwgPSBwcm9jZXNzLmVudi5ERUZBVUxUX1NFUlZFUjtcbmV4cG9ydCBjb25zdCBUSU1FT1VUID0gMTAwMDA7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhhbmRsZXIgZm9yIHJlcXVlc3RpbmcgZGF0YSBmcm9tIHRoZSBmdWxsbm9kZVxuICpcbiAqIEBwYXJhbSBiYXNlVVJMIC0gVGhlIGJhc2UgVVJMIGZvciB0aGUgZnVsbC1ub2RlLiBEZWZhdWx0cyB0byBgZW52LkRFRkFVTFRfU0VSVkVSYFxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlID0gKGJhc2VVUkwgPSBCQVNFX1VSTCk6IGFueSA9PiB7XG4gIGNvbnN0IGFwaSA9IGF4aW9zLmNyZWF0ZSh7XG4gICAgYmFzZVVSTCxcbiAgICBoZWFkZXJzOiB7fSxcbiAgICB0aW1lb3V0OiBUSU1FT1VULFxuICB9KTtcblxuICBjb25zdCBkb3dubG9hZFR4ID0gYXN5bmMgKHR4SWQ6IHN0cmluZykgPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLmdldChgdHJhbnNhY3Rpb24/aWQ9JHt0eElkfWAsIHtcbiAgICAgIGRhdGE6IG51bGwsXG4gICAgICBoZWFkZXJzOiB7ICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICB9O1xuXG4gIGNvbnN0IGdldENvbmZpcm1hdGlvbkRhdGEgPSBhc3luYyAodHhJZDogc3RyaW5nKSA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkuZ2V0KGB0cmFuc2FjdGlvbl9hY2Nfd2VpZ2h0P2lkPSR7dHhJZH1gLCB7XG4gICAgICBkYXRhOiBudWxsLFxuICAgICAgaGVhZGVyczogeyAnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgfTtcblxuICBjb25zdCBxdWVyeUdyYXBodml6TmVpZ2hib3VycyA9IGFzeW5jIChcbiAgICB0eElkOiBzdHJpbmcsXG4gICAgZ3JhcGhUeXBlOiBzdHJpbmcsXG4gICAgbWF4TGV2ZWw6IG51bWJlcixcbiAgKSA9PiB7XG4gICAgY29uc3QgdXJsID0gYGdyYXBodml6L25laWdoYm91cnMuZG90Lz90eD0ke3R4SWR9JmdyYXBoX3R5cGU9JHtncmFwaFR5cGV9Jm1heF9sZXZlbD0ke21heExldmVsfWA7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkuZ2V0KHVybCwge1xuICAgICAgZGF0YTogbnVsbCxcbiAgICAgIGhlYWRlcnM6IHsgJ2NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBhcGksIC8vIGV4cG9ydGVkIHNvIHdlIGNhbiBtb2NrIGl0IG9uIHRoZSB0ZXN0c1xuICAgIGRvd25sb2FkVHgsXG4gICAgZ2V0Q29uZmlybWF0aW9uRGF0YSxcbiAgICBxdWVyeUdyYXBodml6TmVpZ2hib3VycyxcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZSgpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/fullnode.ts\n");

/***/ }),

/***/ "./src/logger.ts":
/*!***********************!*\
  !*** ./src/logger.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst winston_1 = __webpack_require__(/*! winston */ \"winston\");\nconst createDefaultLogger = () => (0, winston_1.createLogger)({\n    level: process.env.LOG_LEVEL || 'info',\n    format: winston_1.format.json(),\n    transports: [\n        new winston_1.transports.Console(),\n    ],\n});\nexports[\"default\"] = createDefaultLogger;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbG9nZ2VyLnRzIiwibWFwcGluZ3MiOiI7O0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2FsbGV0LXNlcnZpY2UvLi9zcmMvbG9nZ2VyLnRzP2Q4M2MiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlTG9nZ2VyLCBmb3JtYXQsIHRyYW5zcG9ydHMsIExvZ2dlciB9IGZyb20gJ3dpbnN0b24nO1xuXG5jb25zdCBjcmVhdGVEZWZhdWx0TG9nZ2VyID0gKCk6IExvZ2dlciA9PiBjcmVhdGVMb2dnZXIoe1xuICBsZXZlbDogcHJvY2Vzcy5lbnYuTE9HX0xFVkVMIHx8ICdpbmZvJyxcbiAgZm9ybWF0OiBmb3JtYXQuanNvbigpLFxuICB0cmFuc3BvcnRzOiBbXG4gICAgbmV3IHRyYW5zcG9ydHMuQ29uc29sZSgpLFxuICBdLFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZURlZmF1bHRMb2dnZXI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/logger.ts\n");

/***/ }),

/***/ "./src/redis.ts":
/*!**********************!*\
  !*** ./src/redis.ts ***!
  \**********************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.wsGetWalletConnections = exports.wsGetChannelConnections = exports.wsGetAllConnections = exports.wsGetConnection = exports.wsJoinWallet = exports.wsJoinChannel = exports.endWsConnection = exports.initWsConnection = exports.scanAll = exports.closeRedisClient = exports.getRedisClient = exports.svcPrefix = void 0;\nconst redis_1 = __importDefault(__webpack_require__(/*! redis */ \"redis\"));\nconst util_1 = __webpack_require__(/*! util */ \"util\");\nconst redisConfig = {\n    url: process.env.REDIS_URL,\n    password: process.env.REDIS_PASSWORD,\n};\nexports.svcPrefix = 'walletsvc';\nconst getRedisClient = () => redis_1.default.createClient(redisConfig);\nexports.getRedisClient = getRedisClient;\nconst closeRedisClient = (client) => {\n    const quit = (0, util_1.promisify)(client.quit).bind(client);\n    return quit();\n};\nexports.closeRedisClient = closeRedisClient;\nconst scanAll = async (client, pattern) => {\n    const scanAsync = (0, util_1.promisify)(client.scan).bind(client);\n    const found = [];\n    let cursor = '0';\n    do {\n        const reply = await scanAsync(cursor, 'MATCH', pattern);\n        cursor = reply[0];\n        found.push(...reply[1]);\n    } while (cursor !== '0');\n    return found;\n};\nexports.scanAll = scanAll;\nconst initWsConnection = async (client, connInfo) => {\n    const setAsync = (0, util_1.promisify)(client.set).bind(client);\n    return setAsync(`${exports.svcPrefix}:conn:${connInfo.id}`, connInfo.url);\n};\nexports.initWsConnection = initWsConnection;\nconst endWsConnection = async (client, connectionID) => {\n    const multi = client.multi();\n    multi.del(`${exports.svcPrefix}:conn:${connectionID}`);\n    await (0, exports.scanAll)(client, `${exports.svcPrefix}:chan:*:${connectionID}`).then((keys) => {\n        for (const key of keys) {\n            multi.del(key);\n        }\n    });\n    multi.exec();\n};\nexports.endWsConnection = endWsConnection;\nconst wsJoinChannel = async (client, connInfo, channel) => {\n    const setAsync = (0, util_1.promisify)(client.set).bind(client);\n    return setAsync(`${exports.svcPrefix}:chan:${channel}:${connInfo.id}`, connInfo.url);\n};\nexports.wsJoinChannel = wsJoinChannel;\nconst wsJoinWallet = async (client, connInfo, walletID) => (0, exports.wsJoinChannel)(client, connInfo, `wallet-${walletID}`);\nexports.wsJoinWallet = wsJoinWallet;\nconst wsGetConnection = async (client, connectionID) => {\n    const getAsync = (0, util_1.promisify)(client.get).bind(client);\n    return getAsync(`${exports.svcPrefix}:conn:${connectionID}`);\n};\nexports.wsGetConnection = wsGetConnection;\nconst wsGetAllConnections = async (client) => {\n    const getAsync = (0, util_1.promisify)(client.get).bind(client);\n    const found = [];\n    const keys = await (0, exports.scanAll)(client, `${exports.svcPrefix}:conn:*`);\n    for (const key of keys) {\n        const value = await getAsync(key);\n        found.push({ id: key.split(':').pop(), url: value });\n    }\n    return found;\n};\nexports.wsGetAllConnections = wsGetAllConnections;\nconst wsGetChannelConnections = async (client, channel) => {\n    const getAsync = (0, util_1.promisify)(client.get).bind(client);\n    const found = [];\n    const keys = await (0, exports.scanAll)(client, `${exports.svcPrefix}:chan:${channel}:*`);\n    for (const key of keys) {\n        const value = await getAsync(key);\n        found.push({ id: key.split(':').pop(), url: value });\n    }\n    return found;\n};\nexports.wsGetChannelConnections = wsGetChannelConnections;\nconst wsGetWalletConnections = async (client, walletID) => (0, exports.wsGetChannelConnections)(client, `wallet-${walletID}`);\nexports.wsGetWalletConnections = wsGetWalletConnections;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvcmVkaXMudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBS0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUFBO0FBRUE7QUFHQTtBQUNBO0FBQ0E7QUFMQTtBQU9BO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFkQTtBQWtCQTtBQUlBO0FBQ0E7QUFDQTtBQU5BO0FBVUE7QUFTQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFsQkE7QUFvQkE7QUFLQTtBQUNBO0FBQ0E7QUFQQTtBQVNBO0FBQUE7QUFNQTtBQUlBO0FBQ0E7QUFDQTtBQU5BO0FBU0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFYQTtBQWNBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBWkE7QUFlQTtBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2FsbGV0LXNlcnZpY2UvLi9zcmMvcmVkaXMudHM/YzhjOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBXc0Nvbm5lY3Rpb25JbmZvLFxuICBSZWRpc0NvbmZpZyxcbn0gZnJvbSAnQHNyYy90eXBlcyc7XG5cbmltcG9ydCByZWRpcyBmcm9tICdyZWRpcyc7XG5pbXBvcnQgeyBwcm9taXNpZnkgfSBmcm9tICd1dGlsJztcblxuY29uc3QgcmVkaXNDb25maWc6IFJlZGlzQ29uZmlnID0ge1xuICB1cmw6IHByb2Nlc3MuZW52LlJFRElTX1VSTCxcbiAgcGFzc3dvcmQ6IHByb2Nlc3MuZW52LlJFRElTX1BBU1NXT1JELFxufTtcblxuZXhwb3J0IGNvbnN0IHN2Y1ByZWZpeCA9ICd3YWxsZXRzdmMnO1xuXG5leHBvcnQgY29uc3QgZ2V0UmVkaXNDbGllbnQgPSAoKTogcmVkaXMuUmVkaXNDbGllbnQgPT4gcmVkaXMuY3JlYXRlQ2xpZW50KHJlZGlzQ29uZmlnKTtcblxuZXhwb3J0IGNvbnN0IGNsb3NlUmVkaXNDbGllbnQgPSAoXG4gIGNsaWVudDogcmVkaXMuUmVkaXNDbGllbnQsXG4pOiBQcm9taXNlPGJvb2xlYW4+ID0+IHtcbiAgY29uc3QgcXVpdCA9IHByb21pc2lmeShjbGllbnQucXVpdCkuYmluZChjbGllbnQpO1xuICByZXR1cm4gcXVpdCgpO1xufTtcblxuZXhwb3J0IGNvbnN0IHNjYW5BbGwgPSBhc3luYyAoXG4gIGNsaWVudDogcmVkaXMuUmVkaXNDbGllbnQsXG4gIHBhdHRlcm46IHN0cmluZyxcbik6IFByb21pc2U8c3RyaW5nW10+ID0+IHtcbiAgY29uc3Qgc2NhbkFzeW5jID0gcHJvbWlzaWZ5KGNsaWVudC5zY2FuKS5iaW5kKGNsaWVudCk7XG4gIGNvbnN0IGZvdW5kID0gW107XG4gIGxldCBjdXJzb3IgPSAnMCc7XG4gIGRvIHtcbiAgICBjb25zdCByZXBseSA9IGF3YWl0IHNjYW5Bc3luYyhjdXJzb3IsICdNQVRDSCcsIHBhdHRlcm4pO1xuICAgIGN1cnNvciA9IHJlcGx5WzBdO1xuICAgIGZvdW5kLnB1c2goLi4ucmVwbHlbMV0pO1xuICB9IHdoaWxlIChjdXJzb3IgIT09ICcwJyk7XG5cbiAgcmV0dXJuIGZvdW5kO1xufTtcblxuLyogQ3JlYXRlIHRoZSBjb25uZWN0aW9uIGVudHJ5XG4gKiAqL1xuZXhwb3J0IGNvbnN0IGluaXRXc0Nvbm5lY3Rpb24gPSBhc3luYyAoXG4gIGNsaWVudDogcmVkaXMuUmVkaXNDbGllbnQsXG4gIGNvbm5JbmZvOiBXc0Nvbm5lY3Rpb25JbmZvLFxuKTogUHJvbWlzZTxzdHJpbmc+ID0+IHtcbiAgY29uc3Qgc2V0QXN5bmMgPSBwcm9taXNpZnkoY2xpZW50LnNldCkuYmluZChjbGllbnQpO1xuICByZXR1cm4gc2V0QXN5bmMoYCR7c3ZjUHJlZml4fTpjb25uOiR7Y29ubkluZm8uaWR9YCwgY29ubkluZm8udXJsKTtcbn07XG5cbi8qIERlbGV0ZSBhbGwga2V5cyBmb3IgdGhlIGNvbm5lY3Rpb25cbiAqICovXG5leHBvcnQgY29uc3QgZW5kV3NDb25uZWN0aW9uID0gYXN5bmMgKFxuICBjbGllbnQ6IHJlZGlzLlJlZGlzQ2xpZW50LFxuICBjb25uZWN0aW9uSUQ6IHN0cmluZyxcbik6IFByb21pc2U8dm9pZD4gPT4ge1xuICAvLyBtdWx0aSBub3QgZXhhY3RseSBuZWVkZWQgKG1haW5seSB1c2VkIGZvciB0cmFuc2FjdGlvbnMpXG4gIC8vIGJ1dCBpdCBnaXZlcyBhIG5pY2Ugd2F5IHRvIHJvbGxiYWNrIGlmIGFueSBlcnJvcnMgb2NjdXIgaW4gYW55IGNvbW1hbmRcbiAgLy8gc2VlOiBodHRwczovL2dpdGh1Yi5jb20vTm9kZVJlZGlzL25vZGUtcmVkaXMjY2xpZW50bXVsdGljb21tYW5kc1xuICAvLyBhbmQ6IGh0dHBzOi8vcmVkaXMuaW8vdG9waWNzL3RyYW5zYWN0aW9uc1xuICAvLyBhbHRlcm5hdGl2ZTogZXhlY3V0ZSBlYWNoIGNvbW1hbmQgYW5kIGNoZWNrIGZvciBlcnJvcnMgaW5kaXZpZHVhbGx5XG4gIGNvbnN0IG11bHRpID0gY2xpZW50Lm11bHRpKCk7XG4gIG11bHRpLmRlbChgJHtzdmNQcmVmaXh9OmNvbm46JHtjb25uZWN0aW9uSUR9YCk7XG4gIC8vIHdpdGggc2NhbkdlbjogZm9yIGF3YWl0IChjb25zdCBrZXkgb2Ygc2NhbkdlbihwYXR0KSkgbXVsdGkuZGVsKGtleSk7XG4gIGF3YWl0IHNjYW5BbGwoY2xpZW50LCBgJHtzdmNQcmVmaXh9OmNoYW46Kjoke2Nvbm5lY3Rpb25JRH1gKS50aGVuKChrZXlzKSA9PiB7XG4gICAgZm9yIChjb25zdCBrZXkgb2Yga2V5cykge1xuICAgICAgbXVsdGkuZGVsKGtleSk7XG4gICAgfVxuICB9KTtcbiAgbXVsdGkuZXhlYygpO1xufTtcblxuZXhwb3J0IGNvbnN0IHdzSm9pbkNoYW5uZWwgPSBhc3luYyAoXG4gIGNsaWVudDogcmVkaXMuUmVkaXNDbGllbnQsXG4gIGNvbm5JbmZvOiBXc0Nvbm5lY3Rpb25JbmZvLFxuICBjaGFubmVsOiBzdHJpbmcsXG4pOiBQcm9taXNlPHN0cmluZz4gPT4ge1xuICBjb25zdCBzZXRBc3luYyA9IHByb21pc2lmeShjbGllbnQuc2V0KS5iaW5kKGNsaWVudCk7XG4gIHJldHVybiBzZXRBc3luYyhgJHtzdmNQcmVmaXh9OmNoYW46JHtjaGFubmVsfToke2Nvbm5JbmZvLmlkfWAsIGNvbm5JbmZvLnVybCk7XG59O1xuXG5leHBvcnQgY29uc3Qgd3NKb2luV2FsbGV0ID0gYXN5bmMgKFxuICBjbGllbnQ6IHJlZGlzLlJlZGlzQ2xpZW50LFxuICBjb25uSW5mbzogV3NDb25uZWN0aW9uSW5mbyxcbiAgd2FsbGV0SUQ6IHN0cmluZyxcbik6IFByb21pc2U8c3RyaW5nPiA9PiB3c0pvaW5DaGFubmVsKGNsaWVudCwgY29ubkluZm8sIGB3YWxsZXQtJHt3YWxsZXRJRH1gKTtcblxuZXhwb3J0IGNvbnN0IHdzR2V0Q29ubmVjdGlvbiA9IGFzeW5jIChcbiAgY2xpZW50OiByZWRpcy5SZWRpc0NsaWVudCxcbiAgY29ubmVjdGlvbklEOiBzdHJpbmcsXG4pOiBQcm9taXNlPHN0cmluZz4gPT4ge1xuICBjb25zdCBnZXRBc3luYyA9IHByb21pc2lmeShjbGllbnQuZ2V0KS5iaW5kKGNsaWVudCk7XG4gIHJldHVybiBnZXRBc3luYyhgJHtzdmNQcmVmaXh9OmNvbm46JHtjb25uZWN0aW9uSUR9YCk7XG59O1xuXG4vLyBnZXQgYWxsIGNvbm5lY3Rpb25zXG5leHBvcnQgY29uc3Qgd3NHZXRBbGxDb25uZWN0aW9ucyA9IGFzeW5jIChcbiAgY2xpZW50OiByZWRpcy5SZWRpc0NsaWVudCxcbik6IFByb21pc2U8V3NDb25uZWN0aW9uSW5mb1tdPiA9PiB7XG4gIGNvbnN0IGdldEFzeW5jID0gcHJvbWlzaWZ5KGNsaWVudC5nZXQpLmJpbmQoY2xpZW50KTtcbiAgY29uc3QgZm91bmQ6IFdzQ29ubmVjdGlvbkluZm9bXSA9IFtdO1xuICBjb25zdCBrZXlzID0gYXdhaXQgc2NhbkFsbChjbGllbnQsIGAke3N2Y1ByZWZpeH06Y29ubjoqYCk7XG4gIGZvciAoY29uc3Qga2V5IG9mIGtleXMpIHtcbiAgICBjb25zdCB2YWx1ZSA9IGF3YWl0IGdldEFzeW5jKGtleSk7XG4gICAgZm91bmQucHVzaCh7IGlkOiBrZXkuc3BsaXQoJzonKS5wb3AoKSwgdXJsOiB2YWx1ZSB9KTtcbiAgfVxuICByZXR1cm4gZm91bmQ7XG59O1xuXG4vLyBnZXQgYWxsIGNvbm5lY3Rpb25zIGxpc3RlbmluZyB0byBhIGNoYW5uZWxcbmV4cG9ydCBjb25zdCB3c0dldENoYW5uZWxDb25uZWN0aW9ucyA9IGFzeW5jIChcbiAgY2xpZW50OiByZWRpcy5SZWRpc0NsaWVudCxcbiAgY2hhbm5lbDogc3RyaW5nLFxuKTogUHJvbWlzZTxXc0Nvbm5lY3Rpb25JbmZvW10+ID0+IHtcbiAgY29uc3QgZ2V0QXN5bmMgPSBwcm9taXNpZnkoY2xpZW50LmdldCkuYmluZChjbGllbnQpO1xuICBjb25zdCBmb3VuZDogV3NDb25uZWN0aW9uSW5mb1tdID0gW107XG4gIGNvbnN0IGtleXMgPSBhd2FpdCBzY2FuQWxsKGNsaWVudCwgYCR7c3ZjUHJlZml4fTpjaGFuOiR7Y2hhbm5lbH06KmApO1xuICBmb3IgKGNvbnN0IGtleSBvZiBrZXlzKSB7XG4gICAgY29uc3QgdmFsdWUgPSBhd2FpdCBnZXRBc3luYyhrZXkpO1xuICAgIGZvdW5kLnB1c2goeyBpZDoga2V5LnNwbGl0KCc6JykucG9wKCksIHVybDogdmFsdWUgfSk7XG4gIH1cbiAgcmV0dXJuIGZvdW5kO1xufTtcblxuLy8gZ2V0IGFsbCBjb25uZWN0aW9ucyByZWxhdGVkIHRvIGEgd2FsbGV0SURcbmV4cG9ydCBjb25zdCB3c0dldFdhbGxldENvbm5lY3Rpb25zID0gYXN5bmMgKFxuICBjbGllbnQ6IHJlZGlzLlJlZGlzQ2xpZW50LFxuICB3YWxsZXRJRDogc3RyaW5nLFxuKTogUHJvbWlzZTxXc0Nvbm5lY3Rpb25JbmZvW10+ID0+IHdzR2V0Q2hhbm5lbENvbm5lY3Rpb25zKGNsaWVudCwgYHdhbGxldC0ke3dhbGxldElEfWApO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/redis.ts\n");

/***/ }),

/***/ "./src/types.ts":
/*!**********************!*\
  !*** ./src/types.ts ***!
  \**********************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Severity = exports.PushProvider = exports.InputSelectionAlgo = exports.TokenBalanceMap = exports.WalletTokenBalance = exports.Balance = exports.Authorities = exports.TokenInfo = exports.WalletStatus = exports.TxProposalStatus = void 0;\nconst wallet_lib_1 = __importDefault(__webpack_require__(/*! @hathor/wallet-lib */ \"@hathor/wallet-lib\"));\nconst utils_1 = __webpack_require__(/*! @src/utils */ \"./src/utils.ts\");\nvar TxProposalStatus;\n(function (TxProposalStatus) {\n    TxProposalStatus[\"OPEN\"] = \"open\";\n    TxProposalStatus[\"SENT\"] = \"sent\";\n    TxProposalStatus[\"SEND_ERROR\"] = \"send_error\";\n    TxProposalStatus[\"CANCELLED\"] = \"cancelled\";\n})(TxProposalStatus = exports.TxProposalStatus || (exports.TxProposalStatus = {}));\nvar WalletStatus;\n(function (WalletStatus) {\n    WalletStatus[\"CREATING\"] = \"creating\";\n    WalletStatus[\"READY\"] = \"ready\";\n    WalletStatus[\"ERROR\"] = \"error\";\n})(WalletStatus = exports.WalletStatus || (exports.WalletStatus = {}));\nclass TokenInfo {\n    constructor(id, name, symbol, transactions) {\n        this.id = id;\n        this.name = name;\n        this.symbol = symbol;\n        this.transactions = transactions || 0;\n        const hathorConfig = wallet_lib_1.default.constants.HATHOR_TOKEN_CONFIG;\n        if (this.id === hathorConfig.uid) {\n            this.name = hathorConfig.name;\n            this.symbol = hathorConfig.symbol;\n        }\n    }\n    toJSON() {\n        return {\n            id: this.id,\n            name: this.name,\n            symbol: this.symbol,\n        };\n    }\n}\nexports.TokenInfo = TokenInfo;\nclass Authorities {\n    constructor(authorities) {\n        let tmp = [];\n        if (authorities instanceof Array) {\n            tmp = authorities;\n        }\n        else if (authorities != null) {\n            tmp = Authorities.intToArray(authorities);\n        }\n        this.array = new Array(Authorities.LENGTH - tmp.length).fill(0).concat(tmp);\n    }\n    toInteger() {\n        let n = 0;\n        for (let i = 0; i < this.array.length; i++) {\n            if (this.array[i] === 0)\n                continue;\n            n += this.array[i] * (2 ** (this.array.length - i - 1));\n        }\n        return n;\n    }\n    toUnsignedInteger() {\n        return Math.abs(this.toInteger());\n    }\n    clone() {\n        return new Authorities(this.array);\n    }\n    toNegative() {\n        const finalAuthorities = this.array.map((value) => {\n            if (value === 0)\n                return 0;\n            return (-1) * value;\n        });\n        return new Authorities(finalAuthorities);\n    }\n    hasNegativeValue() {\n        return this.array.some((authority) => authority < 0);\n    }\n    static intToArray(authorities) {\n        const ret = [];\n        for (const c of authorities.toString(2)) {\n            ret.push(parseInt(c, 10));\n        }\n        return ret;\n    }\n    static merge(a1, a2) {\n        return new Authorities(a1.array.map((value, index) => Math.sign(value + a2.array[index])));\n    }\n    toJSON() {\n        const authorities = this.toInteger();\n        return {\n            mint: (authorities & wallet_lib_1.default.constants.TOKEN_MINT_MASK) > 0,\n            melt: (authorities & wallet_lib_1.default.constants.TOKEN_MELT_MASK) > 0,\n        };\n    }\n}\nexports.Authorities = Authorities;\nAuthorities.LENGTH = 8;\nclass Balance {\n    constructor(totalAmountSent = 0, unlockedAmount = 0, lockedAmount = 0, lockExpires = null, unlockedAuthorities = null, lockedAuthorities = null) {\n        this.totalAmountSent = totalAmountSent;\n        this.unlockedAmount = unlockedAmount;\n        this.lockedAmount = lockedAmount;\n        this.lockExpires = lockExpires;\n        this.unlockedAuthorities = unlockedAuthorities || new Authorities();\n        this.lockedAuthorities = lockedAuthorities || new Authorities();\n    }\n    total() {\n        return this.unlockedAmount + this.lockedAmount;\n    }\n    authorities() {\n        return Authorities.merge(this.unlockedAuthorities, this.lockedAuthorities);\n    }\n    clone() {\n        return new Balance(this.totalAmountSent, this.unlockedAmount, this.lockedAmount, this.lockExpires, this.unlockedAuthorities.clone(), this.lockedAuthorities.clone());\n    }\n    static merge(b1, b2) {\n        let lockExpires = null;\n        if (b1.lockExpires === null) {\n            lockExpires = b2.lockExpires;\n        }\n        else if (b2.lockExpires === null) {\n            lockExpires = b1.lockExpires;\n        }\n        else {\n            lockExpires = Math.min(b1.lockExpires, b2.lockExpires);\n        }\n        return new Balance(b1.totalAmountSent + b2.totalAmountSent, b1.unlockedAmount + b2.unlockedAmount, b1.lockedAmount + b2.lockedAmount, lockExpires, Authorities.merge(b1.unlockedAuthorities, b2.unlockedAuthorities), Authorities.merge(b1.lockedAuthorities, b2.lockedAuthorities));\n    }\n}\nexports.Balance = Balance;\nclass WalletTokenBalance {\n    constructor(token, balance, transactions) {\n        this.token = token;\n        this.balance = balance;\n        this.transactions = transactions;\n    }\n    toJSON() {\n        return {\n            token: this.token,\n            transactions: this.transactions,\n            balance: {\n                unlocked: this.balance.unlockedAmount,\n                locked: this.balance.lockedAmount,\n            },\n            tokenAuthorities: {\n                unlocked: this.balance.unlockedAuthorities,\n                locked: this.balance.lockedAuthorities,\n            },\n            lockExpires: this.balance.lockExpires,\n        };\n    }\n}\nexports.WalletTokenBalance = WalletTokenBalance;\nclass TokenBalanceMap {\n    constructor() {\n        this.map = {};\n    }\n    get(tokenId) {\n        return this.map[tokenId] || new Balance(0, 0, 0);\n    }\n    set(tokenId, balance) {\n        this.map[tokenId] = balance;\n    }\n    getTokens() {\n        return Object.keys(this.map);\n    }\n    iterator() {\n        return Object.entries(this.map);\n    }\n    clone() {\n        const cloned = new TokenBalanceMap();\n        for (const [token, balance] of this.iterator()) {\n            cloned.set(token, balance.clone());\n        }\n        return cloned;\n    }\n    static fromStringMap(tokenBalanceMap) {\n        const obj = new TokenBalanceMap();\n        for (const [tokenId, balance] of Object.entries(tokenBalanceMap)) {\n            obj.set(tokenId, new Balance(balance.totalSent, balance.unlocked, balance.locked, balance.lockExpires || null, balance.unlockedAuthorities, balance.lockedAuthorities));\n        }\n        return obj;\n    }\n    static merge(balanceMap1, balanceMap2) {\n        if (!balanceMap1)\n            return balanceMap2.clone();\n        if (!balanceMap2)\n            return balanceMap1.clone();\n        const mergedMap = balanceMap1.clone();\n        for (const [token, balance] of balanceMap2.iterator()) {\n            const finalBalance = Balance.merge(mergedMap.get(token), balance);\n            mergedMap.set(token, finalBalance);\n        }\n        return mergedMap;\n    }\n    static fromTxOutput(output) {\n        const token = output.token;\n        const value = output.value;\n        const obj = new TokenBalanceMap();\n        if (output.locked) {\n            if ((0, utils_1.isAuthority)(output.token_data)) {\n                obj.set(token, new Balance(0, 0, 0, output.decoded.timelock, 0, new Authorities(output.value)));\n            }\n            else {\n                obj.set(token, new Balance(value, 0, value, output.decoded.timelock, 0, 0));\n            }\n        }\n        else if ((0, utils_1.isAuthority)(output.token_data)) {\n            obj.set(token, new Balance(0, 0, 0, null, new Authorities(output.value), 0));\n        }\n        else {\n            obj.set(token, new Balance(value, value, 0, null));\n        }\n        return obj;\n    }\n    static fromTxInput(input) {\n        const token = input.token;\n        const obj = new TokenBalanceMap();\n        if ((0, utils_1.isAuthority)(input.token_data)) {\n            const authorities = new Authorities(input.value);\n            obj.set(token, new Balance(0, 0, 0, null, authorities.toNegative(), new Authorities(0)));\n        }\n        else {\n            obj.set(token, new Balance(0, -input.value, 0, null));\n        }\n        return obj;\n    }\n}\nexports.TokenBalanceMap = TokenBalanceMap;\nvar InputSelectionAlgo;\n(function (InputSelectionAlgo) {\n    InputSelectionAlgo[\"USE_LARGER_UTXOS\"] = \"use-larger-utxos\";\n})(InputSelectionAlgo = exports.InputSelectionAlgo || (exports.InputSelectionAlgo = {}));\nvar PushProvider;\n(function (PushProvider) {\n    PushProvider[\"IOS\"] = \"ios\";\n    PushProvider[\"ANDROID\"] = \"android\";\n})(PushProvider = exports.PushProvider || (exports.PushProvider = {}));\nvar Severity;\n(function (Severity) {\n    Severity[\"CRITICAL\"] = \"critical\";\n    Severity[\"MAJOR\"] = \"major\";\n    Severity[\"MEDIUM\"] = \"medium\";\n    Severity[\"MINOR\"] = \"minor\";\n    Severity[\"WARNING\"] = \"warning\";\n    Severity[\"INFO\"] = \"info\";\n})(Severity = exports.Severity || (exports.Severity = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/types.ts\n");

/***/ }),

/***/ "./src/utils.ts":
/*!**********************!*\
  !*** ./src/utils.ts ***!
  \**********************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.assertEnvVariablesExistence = exports.getAddressFromXpub = exports.verifySignature = exports.xpubDeriveChild = exports.getAddresses = exports.getAddressAtIndex = exports.validateAuthTimestamp = exports.AUTH_MAX_TIMESTAMP_SHIFT_IN_SECONDS = exports.confirmFirstAddress = exports.getAddressPath = exports.fetchBlockHeight = exports.isTxVoided = exports.arrayShuffle = exports.isAuthority = exports.closeDbConnection = exports.getDbConnection = exports.getUnixTimestamp = exports.getWalletId = exports.sha256d = exports.CustomStorage = void 0;\nconst crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nconst serverless_mysql_1 = __importDefault(__webpack_require__(/*! serverless-mysql */ \"serverless-mysql\"));\nconst wallet_lib_1 = __importDefault(__webpack_require__(/*! @hathor/wallet-lib */ \"@hathor/wallet-lib\"));\nconst fullnode_1 = __importDefault(__webpack_require__(/*! @src/fullnode */ \"./src/fullnode.ts\"));\nconst bitcoin = __importStar(__webpack_require__(/*! bitcoinjs-lib */ \"bitcoinjs-lib\"));\nconst bitcoinMessage = __importStar(__webpack_require__(/*! bitcoinjs-message */ \"bitcoinjs-message\"));\nconst ecc = __importStar(__webpack_require__(/*! tiny-secp256k1 */ \"tiny-secp256k1\"));\nconst bip32_1 = __importDefault(__webpack_require__(/*! bip32 */ \"bip32\"));\nconst bip32 = (0, bip32_1.default)(ecc);\nclass CustomStorage {\n    constructor() {\n        this.preStart();\n    }\n    getItem(key) {\n        return this.store[key];\n    }\n    setItem(key, value) {\n        this.store[key] = value;\n        return value;\n    }\n    removeItem(key) {\n        delete this.store[key];\n        return key;\n    }\n    clear() {\n        this.store = {};\n    }\n    preStart() {\n        this.store = {\n            'wallet:server': process.env.DEFAULT_SERVER || wallet_lib_1.default.constants.DEFAULT_SERVER,\n            'wallet:defaultServer': process.env.DEFAULT_SERVER || wallet_lib_1.default.constants.DEFAULT_SERVER,\n        };\n    }\n}\nexports.CustomStorage = CustomStorage;\nwallet_lib_1.default.network.setNetwork(process.env.NETWORK);\nwallet_lib_1.default.storage.setStore(new CustomStorage());\nconst libNetwork = wallet_lib_1.default.network.getNetwork();\nconst hathorNetwork = {\n    messagePrefix: '\\x18Hathor Signed Message:\\n',\n    bech32: wallet_lib_1.default.network.bech32prefix,\n    bip32: {\n        public: libNetwork.xpubkey,\n        private: libNetwork.xprivkey,\n    },\n    pubKeyHash: libNetwork.pubkeyhash,\n    scriptHash: libNetwork.scripthash,\n    wif: libNetwork.privatekey,\n};\nconst sha256d = (data, encoding) => {\n    const hash1 = (0, crypto_1.createHash)('sha256');\n    hash1.update(data);\n    const hash2 = (0, crypto_1.createHash)('sha256');\n    hash2.update(hash1.digest());\n    return hash2.digest(encoding);\n};\nexports.sha256d = sha256d;\nconst getWalletId = (xpubkey) => ((0, exports.sha256d)(xpubkey, 'hex'));\nexports.getWalletId = getWalletId;\nconst getUnixTimestamp = () => (Math.round((new Date()).getTime() / 1000));\nexports.getUnixTimestamp = getUnixTimestamp;\nconst getDbConnection = () => ((0, serverless_mysql_1.default)({\n    config: {\n        host: process.env.DB_ENDPOINT,\n        database: process.env.DB_NAME,\n        user: process.env.DB_USER,\n        port: parseInt(process.env.DB_PORT, 10),\n        password: process.env.DB_PASS,\n    },\n}));\nexports.getDbConnection = getDbConnection;\nconst closeDbConnection = async (mysql) => {\n    if (process.env.STAGE === 'local') {\n        await mysql.quit();\n    }\n    else {\n        await mysql.end();\n    }\n};\nexports.closeDbConnection = closeDbConnection;\nconst isAuthority = (tokenData) => ((tokenData & wallet_lib_1.default.constants.TOKEN_AUTHORITY_MASK) > 0);\nexports.isAuthority = isAuthority;\nconst arrayShuffle = (array) => {\n    let j;\n    let x;\n    let i;\n    for (i = array.length - 1; i > 0; i--) {\n        j = Math.floor(Math.random() * (i + 1));\n        x = array[i];\n        array[i] = array[j];\n        array[j] = x;\n    }\n    return array;\n};\nexports.arrayShuffle = arrayShuffle;\nconst isTxVoided = async (txId) => {\n    const transaction = await fullnode_1.default.downloadTx(txId);\n    if (!transaction.meta.voided_by || transaction.meta.voided_by.length === 0) {\n        return [false, transaction];\n    }\n    return [true, transaction];\n};\nexports.isTxVoided = isTxVoided;\nconst fetchBlockHeight = async (txId, logger) => {\n    const transaction = await fullnode_1.default.downloadTx(txId);\n    if (!transaction.tx.height) {\n        logger.error(JSON.stringify(transaction));\n        throw new Error(`Block ${txId} has no height.`);\n    }\n    return [transaction.tx.height, transaction];\n};\nexports.fetchBlockHeight = fetchBlockHeight;\nconst getAddressPath = (index) => (`m/44'/${wallet_lib_1.default.constants.HATHOR_BIP44_CODE}'/0'/0/${index}`);\nexports.getAddressPath = getAddressPath;\nconst confirmFirstAddress = (expectedFirstAddress, xpubkey) => {\n    const derivedXpub = (0, exports.xpubDeriveChild)(xpubkey, 0);\n    const firstAddress = (0, exports.getAddressAtIndex)(derivedXpub, 0);\n    return [\n        firstAddress === expectedFirstAddress,\n        firstAddress,\n    ];\n};\nexports.confirmFirstAddress = confirmFirstAddress;\nexports.AUTH_MAX_TIMESTAMP_SHIFT_IN_SECONDS = 30;\nconst validateAuthTimestamp = (timestamp, now) => {\n    const timestampShiftInSeconds = Math.floor(Math.abs(now - timestamp));\n    return [timestampShiftInSeconds < exports.AUTH_MAX_TIMESTAMP_SHIFT_IN_SECONDS, timestampShiftInSeconds];\n};\nexports.validateAuthTimestamp = validateAuthTimestamp;\nconst getAddressAtIndex = (xpubkey, addressIndex) => {\n    const node = bip32.fromBase58(xpubkey).derive(addressIndex);\n    return bitcoin.payments.p2pkh({\n        pubkey: node.publicKey,\n        network: hathorNetwork,\n    }).address;\n};\nexports.getAddressAtIndex = getAddressAtIndex;\nconst getAddresses = (xpubkey, startIndex, quantity) => {\n    const addrMap = {};\n    for (let index = startIndex; index < startIndex + quantity; index++) {\n        const address = (0, exports.getAddressAtIndex)(xpubkey, index);\n        addrMap[address] = index;\n    }\n    return addrMap;\n};\nexports.getAddresses = getAddresses;\nconst xpubDeriveChild = (xpubkey, index) => (bip32.fromBase58(xpubkey).derive(index).toBase58());\nexports.xpubDeriveChild = xpubDeriveChild;\nconst verifySignature = (signature, timestamp, address, walletId) => {\n    try {\n        const message = String(timestamp).concat(walletId).concat(address);\n        return bitcoinMessage.verify(message, address, Buffer.from(signature, 'base64'), '\\u0017Hathor Signed Message:\\n');\n    }\n    catch (e) {\n        return false;\n    }\n};\nexports.verifySignature = verifySignature;\nconst getAddressFromXpub = (xpubkey) => {\n    const node = bip32.fromBase58(xpubkey);\n    return bitcoin.payments.p2pkh({\n        pubkey: node.publicKey,\n        network: hathorNetwork,\n    }).address;\n};\nexports.getAddressFromXpub = getAddressFromXpub;\nconst assertEnvVariablesExistence = (envVariables) => {\n    const missingList = [];\n    for (const envVariable of envVariables) {\n        if (!(envVariable in process.env) || process.env[envVariable].length === 0) {\n            missingList.push(envVariable);\n        }\n    }\n    if (missingList.length > 0) {\n        throw new Error(`Env missing the following variables ${missingList.join(', ')}`);\n    }\n};\nexports.assertEnvVariablesExistence = assertEnvVariablesExistence;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils.ts\n");

/***/ }),

/***/ "./src/utils/alerting.utils.ts":
/*!*************************************!*\
  !*** ./src/utils/alerting.utils.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.addAlert = void 0;\nconst aws_sdk_1 = __importDefault(__webpack_require__(/*! aws-sdk */ \"aws-sdk\"));\nconst utils_1 = __webpack_require__(/*! @src/utils */ \"./src/utils.ts\");\nconst logger_1 = __importDefault(__webpack_require__(/*! @src/logger */ \"./src/logger.ts\"));\n(0, utils_1.assertEnvVariablesExistence)([\n    'NETWORK',\n    'APPLICATION_NAME',\n    'ACCOUNT_ID',\n    'ALERT_MANAGER_REGION',\n    'ALERT_MANAGER_TOPIC',\n]);\nconst addAlert = async (title, message, severity, metadata) => {\n    const logger = (0, logger_1.default)();\n    const preparedMessage = {\n        title,\n        message,\n        severity,\n        metadata,\n        environment: process.env.NETWORK,\n        application: process.env.APPLICATION_NAME,\n    };\n    const sqs = new aws_sdk_1.default.SQS({ apiVersion: '2015-03-31' });\n    const { ACCOUNT_ID, ALERT_MANAGER_REGION, ALERT_MANAGER_TOPIC, } = process.env;\n    const QUEUE_URL = `https://sqs.${ALERT_MANAGER_REGION}.amazonaws.com/${ACCOUNT_ID}/${ALERT_MANAGER_TOPIC}`;\n    const params = {\n        MessageBody: JSON.stringify(preparedMessage),\n        QueueUrl: QUEUE_URL,\n        MessageAttributes: {\n            None: {\n                DataType: 'String',\n                StringValue: '--',\n            },\n        },\n    };\n    await new Promise((resolve) => {\n        sqs.sendMessage(params, (err) => {\n            if (err) {\n                logger.error('[ALERT] Erroed while sending message to the alert sqs queue', err);\n            }\n            resolve();\n        });\n    });\n};\nexports.addAlert = addAlert;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvYWxlcnRpbmcudXRpbHMudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBT0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFRQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBNUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2FsbGV0LXNlcnZpY2UvLi9zcmMvdXRpbHMvYWxlcnRpbmcudXRpbHMudHM/YWE2OCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgSGF0aG9yIExhYnMgYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmltcG9ydCBBV1MgZnJvbSAnYXdzLXNkayc7XG5pbXBvcnQgeyBTZXZlcml0eSB9IGZyb20gJ0BzcmMvdHlwZXMnO1xuaW1wb3J0IHsgYXNzZXJ0RW52VmFyaWFibGVzRXhpc3RlbmNlIH0gZnJvbSAnQHNyYy91dGlscyc7XG5pbXBvcnQgY3JlYXRlRGVmYXVsdExvZ2dlciBmcm9tICdAc3JjL2xvZ2dlcic7XG5cbmFzc2VydEVudlZhcmlhYmxlc0V4aXN0ZW5jZShbXG4gICdORVRXT1JLJyxcbiAgJ0FQUExJQ0FUSU9OX05BTUUnLFxuICAnQUNDT1VOVF9JRCcsXG4gICdBTEVSVF9NQU5BR0VSX1JFR0lPTicsXG4gICdBTEVSVF9NQU5BR0VSX1RPUElDJyxcbl0pO1xuXG4vKipcbiAqIEFkZHMgYSBtZXNzYWdlIHRvIHRoZSBTUVMgYWxlcnRpbmcgcXVldWVcbiAqXG4gKiBAcGFyYW0gZm5OYW1lIC0gVGhlIGxhbWJkYSBmdW5jdGlvbiBuYW1lXG4gKiBAcGFyYW0gcGF5bG9hZCAtIFRoZSBwYXlsb2FkIHRvIGJlIHNlbnRcbiAqL1xuZXhwb3J0IGNvbnN0IGFkZEFsZXJ0ID0gYXN5bmMgKFxuICB0aXRsZTogc3RyaW5nLFxuICBtZXNzYWdlOiBzdHJpbmcsXG4gIHNldmVyaXR5OiBTZXZlcml0eSxcbiAgbWV0YWRhdGE/OiB1bmtub3duLFxuKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gIGNvbnN0IGxvZ2dlciA9IGNyZWF0ZURlZmF1bHRMb2dnZXIoKTtcbiAgY29uc3QgcHJlcGFyZWRNZXNzYWdlID0ge1xuICAgIHRpdGxlLFxuICAgIG1lc3NhZ2UsXG4gICAgc2V2ZXJpdHksXG4gICAgbWV0YWRhdGEsXG4gICAgZW52aXJvbm1lbnQ6IHByb2Nlc3MuZW52Lk5FVFdPUkssXG4gICAgYXBwbGljYXRpb246IHByb2Nlc3MuZW52LkFQUExJQ0FUSU9OX05BTUUsXG4gIH07XG5cbiAgY29uc3Qgc3FzID0gbmV3IEFXUy5TUVMoeyBhcGlWZXJzaW9uOiAnMjAxNS0wMy0zMScgfSk7XG4gIGNvbnN0IHtcbiAgICBBQ0NPVU5UX0lELFxuICAgIEFMRVJUX01BTkFHRVJfUkVHSU9OLFxuICAgIEFMRVJUX01BTkFHRVJfVE9QSUMsXG4gIH0gPSBwcm9jZXNzLmVudjtcblxuICBjb25zdCBRVUVVRV9VUkwgPSBgaHR0cHM6Ly9zcXMuJHtBTEVSVF9NQU5BR0VSX1JFR0lPTn0uYW1hem9uYXdzLmNvbS8ke0FDQ09VTlRfSUR9LyR7QUxFUlRfTUFOQUdFUl9UT1BJQ31gO1xuICBjb25zdCBwYXJhbXMgPSB7XG4gICAgTWVzc2FnZUJvZHk6IEpTT04uc3RyaW5naWZ5KHByZXBhcmVkTWVzc2FnZSksXG4gICAgUXVldWVVcmw6IFFVRVVFX1VSTCxcbiAgICBNZXNzYWdlQXR0cmlidXRlczoge1xuICAgICAgTm9uZToge1xuICAgICAgICBEYXRhVHlwZTogJ1N0cmluZycsXG4gICAgICAgIFN0cmluZ1ZhbHVlOiAnLS0nLFxuICAgICAgfSxcbiAgICB9LFxuICB9O1xuXG4gIGF3YWl0IG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlKSA9PiB7XG4gICAgc3FzLnNlbmRNZXNzYWdlKHBhcmFtcywgKGVycikgPT4ge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBsb2dnZXIuZXJyb3IoJ1tBTEVSVF0gRXJyb2VkIHdoaWxlIHNlbmRpbmcgbWVzc2FnZSB0byB0aGUgYWxlcnQgc3FzIHF1ZXVlJywgZXJyKTtcbiAgICAgIH1cblxuICAgICAgcmVzb2x2ZSgpO1xuICAgIH0pO1xuICB9KTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/utils/alerting.utils.ts\n");

/***/ }),

/***/ "./src/ws/txNotify.ts":
/*!****************************!*\
  !*** ./src/ws/txNotify.ts ***!
  \****************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.onUpdateTx = exports.onNewTx = void 0;\nconst joi_1 = __importDefault(__webpack_require__(/*! joi */ \"joi\"));\nconst utils_1 = __webpack_require__(/*! @src/ws/utils */ \"./src/ws/utils.ts\");\nconst redis_1 = __webpack_require__(/*! @src/redis */ \"./src/redis.ts\");\nconst parseBody = (body) => {\n    try {\n        return JSON.parse(body);\n    }\n    catch (e) {\n        return null;\n    }\n};\nconst newTxbodySchema = joi_1.default.object({\n    wallets: joi_1.default.array()\n        .items(joi_1.default.string())\n        .min(1)\n        .required(),\n    tx: joi_1.default.object().required(),\n});\nconst updateTxbodySchema = joi_1.default.object({\n    wallets: joi_1.default.array()\n        .items(joi_1.default.string())\n        .min(1)\n        .required(),\n    update: joi_1.default.object({\n        tx_id: joi_1.default.string().required(),\n        is_voided: joi_1.default.boolean(),\n    })\n        .required(),\n});\nconst onNewTx = async (event) => {\n    const redisClient = (0, redis_1.getRedisClient)();\n    const promises = [];\n    for (const evt of event.Records) {\n        const body = parseBody(evt.body);\n        const { value, error } = newTxbodySchema.validate(body, {\n            abortEarly: false,\n            convert: true,\n        });\n        if (error) {\n            continue;\n        }\n        const wallets = value.wallets;\n        const tx = value.tx;\n        const payload = {\n            type: 'new-tx',\n            data: tx,\n        };\n        promises.push(Promise.all(wallets.map((walletId) => ((0, redis_1.wsGetWalletConnections)(redisClient, walletId).then((connections) => (Promise.all(connections.map((connInfo) => ((0, utils_1.sendMessageToClient)(redisClient, connInfo, payload))))))))));\n    }\n    await Promise.all(promises);\n    await (0, redis_1.closeRedisClient)(redisClient);\n};\nexports.onNewTx = onNewTx;\nconst onUpdateTx = async (event) => {\n    const redisClient = (0, redis_1.getRedisClient)();\n    const promises = [];\n    for (const evt of event.Records) {\n        const body = parseBody(evt.body);\n        const { value, error } = updateTxbodySchema.validate(body, {\n            abortEarly: false,\n            convert: true,\n        });\n        if (error) {\n            continue;\n        }\n        const wallets = value.wallets;\n        const updateBody = value.update;\n        const payload = {\n            type: 'update-tx',\n            data: updateBody,\n        };\n        promises.push(Promise.all(wallets.map((walletId) => ((0, redis_1.wsGetWalletConnections)(redisClient, walletId).then((connections) => (Promise.all(connections.map((connInfo) => ((0, utils_1.sendMessageToClient)(redisClient, connInfo, payload))))))))));\n    }\n    await Promise.all(promises);\n    await (0, redis_1.closeRedisClient)(redisClient);\n};\nexports.onUpdateTx = onUpdateTx;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvd3MvdHhOb3RpZnkudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBUUE7QUFFQTtBQUNBO0FBTUE7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBR0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUlBO0FBU0E7QUFFQTtBQUVBO0FBQ0E7QUF6Q0E7QUEyQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFHQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFTQTtBQUVBO0FBQ0E7QUFDQTtBQXRDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3dhbGxldC1zZXJ2aWNlLy4vc3JjL3dzL3R4Tm90aWZ5LnRzP2I5NWUiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEhhdGhvciBMYWJzIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pbXBvcnQgeyBTUVNIYW5kbGVyIH0gZnJvbSAnYXdzLWxhbWJkYSc7XG5pbXBvcnQgSm9pIGZyb20gJ2pvaSc7XG5cbmltcG9ydCB7IHNlbmRNZXNzYWdlVG9DbGllbnQgfSBmcm9tICdAc3JjL3dzL3V0aWxzJztcbmltcG9ydCB7XG4gIHdzR2V0V2FsbGV0Q29ubmVjdGlvbnMsXG4gIGdldFJlZGlzQ2xpZW50LFxuICBjbG9zZVJlZGlzQ2xpZW50LFxufSBmcm9tICdAc3JjL3JlZGlzJztcblxuY29uc3QgcGFyc2VCb2R5ID0gKGJvZHk6IHN0cmluZykgPT4ge1xuICB0cnkge1xuICAgIHJldHVybiBKU09OLnBhcnNlKGJvZHkpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn07XG5cbmNvbnN0IG5ld1R4Ym9keVNjaGVtYSA9IEpvaS5vYmplY3Qoe1xuICB3YWxsZXRzOiBKb2kuYXJyYXkoKVxuICAgIC5pdGVtcyhKb2kuc3RyaW5nKCkpXG4gICAgLm1pbigxKVxuICAgIC5yZXF1aXJlZCgpLFxuICB0eDogSm9pLm9iamVjdCgpLnJlcXVpcmVkKCksXG59KTtcblxuY29uc3QgdXBkYXRlVHhib2R5U2NoZW1hID0gSm9pLm9iamVjdCh7XG4gIHdhbGxldHM6IEpvaS5hcnJheSgpXG4gICAgLml0ZW1zKEpvaS5zdHJpbmcoKSlcbiAgICAubWluKDEpXG4gICAgLnJlcXVpcmVkKCksXG4gIHVwZGF0ZTogSm9pLm9iamVjdCh7XG4gICAgdHhfaWQ6IEpvaS5zdHJpbmcoKS5yZXF1aXJlZCgpLFxuICAgIGlzX3ZvaWRlZDogSm9pLmJvb2xlYW4oKSxcbiAgfSlcbiAgICAucmVxdWlyZWQoKSxcbn0pO1xuXG5leHBvcnQgY29uc3Qgb25OZXdUeDogU1FTSGFuZGxlciA9IGFzeW5jIChldmVudCkgPT4ge1xuICBjb25zdCByZWRpc0NsaWVudCA9IGdldFJlZGlzQ2xpZW50KCk7XG4gIGNvbnN0IHByb21pc2VzID0gW107XG5cbiAgZm9yIChjb25zdCBldnQgb2YgZXZlbnQuUmVjb3Jkcykge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZUJvZHkoZXZ0LmJvZHkpO1xuICAgIGNvbnN0IHsgdmFsdWUsIGVycm9yIH0gPSBuZXdUeGJvZHlTY2hlbWEudmFsaWRhdGUoYm9keSwge1xuICAgICAgYWJvcnRFYXJseTogZmFsc2UsXG4gICAgICBjb252ZXJ0OiB0cnVlLFxuICAgIH0pO1xuXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICAvLyBpbnZhbGlkIGV2ZW50IGJvZGllcyB3aWxsIG5vb3BcbiAgICAgIC8vIG1heWJlIGxvZyBlcnJvcnNcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGNvbnN0IHdhbGxldHMgPSB2YWx1ZS53YWxsZXRzO1xuICAgIGNvbnN0IHR4ID0gdmFsdWUudHg7XG5cbiAgICBjb25zdCBwYXlsb2FkID0ge1xuICAgICAgdHlwZTogJ25ldy10eCcsXG4gICAgICBkYXRhOiB0eCxcbiAgICB9O1xuXG4gICAgLy8gVGhpcyB3aWxsIGNyZWF0ZSBhIHByb21pc2UgdGhhdCBmb3IgZWFjaCB3YWxsZXRJZCBvbiB3YWxsZXRzIGl0IHdpbGwgc2VhcmNoIGZvciBhbGwgb3BlbiBjb25uZWN0aW9uc1xuICAgIC8vIGFuZCBmb3IgZWFjaCBjb25uZWN0aW9uIHNlbmQgdGhlIHBheWxvYWQgKHRoZSBKU09OIHJlcHJlc2VudGF0aW9uIG9mIHRoZSB0eCkgdXNpbmcgc2VuZE1lc3NhZ2VUb0NsaWVudFxuICAgIHByb21pc2VzLnB1c2goXG4gICAgICBQcm9taXNlLmFsbCh3YWxsZXRzLm1hcCgod2FsbGV0SWQpID0+IChcbiAgICAgICAgd3NHZXRXYWxsZXRDb25uZWN0aW9ucyhyZWRpc0NsaWVudCwgd2FsbGV0SWQpLnRoZW4oKGNvbm5lY3Rpb25zKSA9PiAoXG4gICAgICAgICAgUHJvbWlzZS5hbGwoY29ubmVjdGlvbnMubWFwKChjb25uSW5mbykgPT4gKFxuICAgICAgICAgICAgc2VuZE1lc3NhZ2VUb0NsaWVudChyZWRpc0NsaWVudCwgY29ubkluZm8sIHBheWxvYWQpXG4gICAgICAgICAgKSkpXG4gICAgICAgICkpXG4gICAgICApKSksXG4gICAgKTtcbiAgfVxuICAvLyBXYWl0IGFsbCBtZXNzYWdlcyBmcm9tIGFsbCBldmVudHMgdG8gYmUgc2VudFxuICBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gIC8vIEFuZCBjbG9zZSB0aGUgcmVkaXNDbGllbnRcbiAgYXdhaXQgY2xvc2VSZWRpc0NsaWVudChyZWRpc0NsaWVudCk7XG59O1xuXG5leHBvcnQgY29uc3Qgb25VcGRhdGVUeDogU1FTSGFuZGxlciA9IGFzeW5jIChldmVudCkgPT4ge1xuICBjb25zdCByZWRpc0NsaWVudCA9IGdldFJlZGlzQ2xpZW50KCk7XG4gIGNvbnN0IHByb21pc2VzID0gW107XG5cbiAgZm9yIChjb25zdCBldnQgb2YgZXZlbnQuUmVjb3Jkcykge1xuICAgIGNvbnN0IGJvZHkgPSBwYXJzZUJvZHkoZXZ0LmJvZHkpO1xuICAgIGNvbnN0IHsgdmFsdWUsIGVycm9yIH0gPSB1cGRhdGVUeGJvZHlTY2hlbWEudmFsaWRhdGUoYm9keSwge1xuICAgICAgYWJvcnRFYXJseTogZmFsc2UsXG4gICAgICBjb252ZXJ0OiB0cnVlLFxuICAgIH0pO1xuXG4gICAgaWYgKGVycm9yKSB7XG4gICAgICAvLyBpbnZhbGlkIGV2ZW50IGJvZGllcyB3aWxsIG5vb3BcbiAgICAgIC8vIG1heWJlIGxvZyBlcnJvcnNcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIGNvbnN0IHdhbGxldHMgPSB2YWx1ZS53YWxsZXRzO1xuICAgIGNvbnN0IHVwZGF0ZUJvZHkgPSB2YWx1ZS51cGRhdGU7XG4gICAgY29uc3QgcGF5bG9hZCA9IHtcbiAgICAgIHR5cGU6ICd1cGRhdGUtdHgnLFxuICAgICAgZGF0YTogdXBkYXRlQm9keSxcbiAgICB9O1xuXG4gICAgLy8gU2FtZSBsb2dpYyBhcyBvbk5ld1R4LCBidXQgc2VuZGluZyBgdXBkYXRlQm9keWAgYXMgcGF5bG9hZFxuICAgIHByb21pc2VzLnB1c2goXG4gICAgICBQcm9taXNlLmFsbCh3YWxsZXRzLm1hcCgod2FsbGV0SWQpID0+IChcbiAgICAgICAgd3NHZXRXYWxsZXRDb25uZWN0aW9ucyhyZWRpc0NsaWVudCwgd2FsbGV0SWQpLnRoZW4oKGNvbm5lY3Rpb25zKSA9PiAoXG4gICAgICAgICAgUHJvbWlzZS5hbGwoY29ubmVjdGlvbnMubWFwKChjb25uSW5mbykgPT4gKFxuICAgICAgICAgICAgc2VuZE1lc3NhZ2VUb0NsaWVudChyZWRpc0NsaWVudCwgY29ubkluZm8sIHBheWxvYWQpXG4gICAgICAgICAgKSkpXG4gICAgICAgICkpXG4gICAgICApKSksXG4gICAgKTtcbiAgfVxuICAvLyBXYWl0IGFsbCBtZXNzYWdlcyBmcm9tIGFsbCBldmVudHMgdG8gYmUgc2VudFxuICBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gIGF3YWl0IGNsb3NlUmVkaXNDbGllbnQocmVkaXNDbGllbnQpO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/ws/txNotify.ts\n");

/***/ }),

/***/ "./src/ws/utils.ts":
/*!*************************!*\
  !*** ./src/ws/utils.ts ***!
  \*************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DEFAULT_API_GATEWAY_RESPONSE = exports.disconnectClient = exports.sendMessageToClient = exports.connectionInfoFromEvent = void 0;\nconst alerting_utils_1 = __webpack_require__(/*! @src/utils/alerting.utils */ \"./src/utils/alerting.utils.ts\");\nconst aws_sdk_1 = __importDefault(__webpack_require__(/*! aws-sdk */ \"aws-sdk\"));\nconst util_1 = __importDefault(__webpack_require__(/*! util */ \"util\"));\nconst types_1 = __webpack_require__(/*! @src/types */ \"./src/types.ts\");\nconst redis_1 = __webpack_require__(/*! @src/redis */ \"./src/redis.ts\");\nconst connectionInfoFromEvent = (event) => {\n    const connID = event.requestContext.connectionId;\n    if (process.env.IS_OFFLINE === 'true') {\n        return {\n            id: connID,\n            url: 'http://localhost:3001',\n        };\n    }\n    const domain = process.env.WS_DOMAIN;\n    if (!domain) {\n        (0, alerting_utils_1.addAlert)('Erroed while fetching connection info', 'Domain not on env variables', types_1.Severity.MINOR);\n        throw new Error('Domain not on env variables');\n    }\n    return {\n        id: connID,\n        url: util_1.default.format('https://%s', domain),\n    };\n};\nexports.connectionInfoFromEvent = connectionInfoFromEvent;\nconst sendMessageToClient = async (client, connInfo, payload) => {\n    const apiGwClient = new aws_sdk_1.default.ApiGatewayManagementApi({\n        apiVersion: '2018-11-29',\n        endpoint: connInfo.url,\n    });\n    return apiGwClient.postToConnection({\n        ConnectionId: connInfo.id,\n        Data: JSON.stringify(payload),\n    }).promise().catch((err) => {\n        if (err.statusCode === 410) {\n            return (0, redis_1.endWsConnection)(client, connInfo.id);\n        }\n        throw err;\n    });\n};\nexports.sendMessageToClient = sendMessageToClient;\nconst disconnectClient = async (client, connInfo) => {\n    const apiGwClient = new aws_sdk_1.default.ApiGatewayManagementApi({\n        apiVersion: '2018-11-29',\n        endpoint: connInfo.url,\n    });\n    return apiGwClient.deleteConnection({\n        ConnectionId: connInfo.id,\n    }).promise().catch((err) => {\n        if (err.statusCode === 410) {\n            return (0, redis_1.endWsConnection)(client, connInfo.id);\n        }\n        throw err;\n    });\n};\nexports.disconnectClient = disconnectClient;\nexports.DEFAULT_API_GATEWAY_RESPONSE = {\n    statusCode: 200,\n    body: '',\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvd3MvdXRpbHMudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBRUE7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBR0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFRQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQTlCQTtBQWdDQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFFQTtBQUNBO0FBQ0E7QUFJQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUExQkE7QUE0QkE7QUFJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUlBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQXRCQTtBQXdCQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3dhbGxldC1zZXJ2aWNlLy4vc3JjL3dzL3V0aWxzLnRzPzlhOTMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQVBJR2F0ZXdheVByb3h5RXZlbnQsIEFQSUdhdGV3YXlQcm94eVJlc3VsdCB9IGZyb20gJ2F3cy1sYW1iZGEnO1xuaW1wb3J0IHsgUmVkaXNDbGllbnQgfSBmcm9tICdyZWRpcyc7XG5pbXBvcnQgeyBhZGRBbGVydCB9IGZyb20gJ0BzcmMvdXRpbHMvYWxlcnRpbmcudXRpbHMnO1xuXG5pbXBvcnQgQVdTIGZyb20gJ2F3cy1zZGsnO1xuaW1wb3J0IHV0aWwgZnJvbSAndXRpbCc7XG5cbmltcG9ydCB7IFdzQ29ubmVjdGlvbkluZm8sIFNldmVyaXR5IH0gZnJvbSAnQHNyYy90eXBlcyc7XG5pbXBvcnQgeyBlbmRXc0Nvbm5lY3Rpb24gfSBmcm9tICdAc3JjL3JlZGlzJztcblxuZXhwb3J0IGNvbnN0IGNvbm5lY3Rpb25JbmZvRnJvbUV2ZW50ID0gKFxuICBldmVudDogQVBJR2F0ZXdheVByb3h5RXZlbnQsXG4pOiBXc0Nvbm5lY3Rpb25JbmZvID0+IHtcbiAgY29uc3QgY29ubklEID0gZXZlbnQucmVxdWVzdENvbnRleHQuY29ubmVjdGlvbklkO1xuICBpZiAocHJvY2Vzcy5lbnYuSVNfT0ZGTElORSA9PT0gJ3RydWUnKSB7XG4gICAgLy8gVGhpcyB3aWxsIGVudGVyIHdoZW4gcnVubmluZyB0aGUgc2VydmljZSBvbiBzZXJ2ZXJsZXNzIG9mZmxpbmUgbW9kZVxuICAgIHJldHVybiB7XG4gICAgICBpZDogY29ubklELFxuICAgICAgdXJsOiAnaHR0cDovL2xvY2FsaG9zdDozMDAxJyxcbiAgICB9O1xuICB9XG5cbiAgY29uc3QgZG9tYWluID0gcHJvY2Vzcy5lbnYuV1NfRE9NQUlOO1xuXG4gIGlmICghZG9tYWluKSB7XG4gICAgYWRkQWxlcnQoXG4gICAgICAnRXJyb2VkIHdoaWxlIGZldGNoaW5nIGNvbm5lY3Rpb24gaW5mbycsXG4gICAgICAnRG9tYWluIG5vdCBvbiBlbnYgdmFyaWFibGVzJyxcbiAgICAgIFNldmVyaXR5Lk1JTk9SLFxuICAgICk7XG5cbiAgICAvLyBUaHJvdyBzbyB3ZSByZWNlaXZlIGFuIGFsZXJ0IHRlbGxpbmcgdXMgdGhhdCBzb21ldGhpbmcgaXMgd3Jvbmcgd2l0aCB0aGUgZW52IHZhcmlhYmxlXG4gICAgLy8gaW5zdGVhZCBvZiB0cnlpbmcgdG8gaW52b2tlIGEgbGFtYmRhIGF0IGh0dHBzOi8vdW5kZWZpbmVkXG4gICAgdGhyb3cgbmV3IEVycm9yKCdEb21haW4gbm90IG9uIGVudiB2YXJpYWJsZXMnKTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgaWQ6IGNvbm5JRCxcbiAgICB1cmw6IHV0aWwuZm9ybWF0KCdodHRwczovLyVzJywgZG9tYWluKSxcbiAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBzZW5kTWVzc2FnZVRvQ2xpZW50ID0gYXN5bmMgKFxuICBjbGllbnQ6IFJlZGlzQ2xpZW50LFxuICBjb25uSW5mbzogV3NDb25uZWN0aW9uSW5mbyxcbiAgcGF5bG9hZDogYW55LCAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9leHBsaWNpdC1tb2R1bGUtYm91bmRhcnktdHlwZXMsIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbik6IFByb21pc2U8YW55PiA9PiB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICBjb25zdCBhcGlHd0NsaWVudCA9IG5ldyBBV1MuQXBpR2F0ZXdheU1hbmFnZW1lbnRBcGkoe1xuICAgIGFwaVZlcnNpb246ICcyMDE4LTExLTI5JyxcbiAgICBlbmRwb2ludDogY29ubkluZm8udXJsLFxuICB9KTtcbiAgLy8gQVdTLlJlcXVlc3QucHJvbWlzZSgpIHdpbGwgbWFrZSB0aGUgcmVxdWVzdCBhbmQgcmV0dXJuIGEgdGhlbmFibGUgd2l0aCB0aGUgcmVzcG9uc2VcbiAgLy8gaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL0FXU0phdmFTY3JpcHRTREsvbGF0ZXN0L0FXUy9SZXF1ZXN0Lmh0bWwjcHJvbWlzZS1wcm9wZXJ0eVxuICByZXR1cm4gYXBpR3dDbGllbnQucG9zdFRvQ29ubmVjdGlvbihcbiAgICB7XG4gICAgICBDb25uZWN0aW9uSWQ6IGNvbm5JbmZvLmlkLFxuICAgICAgRGF0YTogSlNPTi5zdHJpbmdpZnkocGF5bG9hZCksXG4gICAgfSxcbiAgKS5wcm9taXNlKCkuY2F0Y2goXG4gICAgKGVycikgPT4ge1xuICAgICAgLy8gaHR0cCBHT05FKDQxMCkgbWVhbnMgY2xpZW50IGlzIGRpc2Nvbm5lY3RlZCwgYnV0IHN0aWxsIGV4aXN0cyBvbiBvdXIgY29ubmVjdGlvbiBzdG9yZVxuICAgICAgaWYgKGVyci5zdGF0dXNDb2RlID09PSA0MTApIHtcbiAgICAgICAgLy8gY2xlYW51cCBjb25uZWN0aW9uIGFuZCBzdWJzY3JpcHRpb25zIGZyb20gcmVkaXMgaWYgR09ORVxuICAgICAgICByZXR1cm4gZW5kV3NDb25uZWN0aW9uKGNsaWVudCwgY29ubkluZm8uaWQpO1xuICAgICAgfVxuICAgICAgdGhyb3cgZXJyO1xuICAgIH0sXG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgZGlzY29ubmVjdENsaWVudCA9IGFzeW5jIChcbiAgY2xpZW50OiBSZWRpc0NsaWVudCxcbiAgY29ubkluZm86IFdzQ29ubmVjdGlvbkluZm8sXG4pOiBQcm9taXNlPGFueT4gPT4geyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnlcbiAgY29uc3QgYXBpR3dDbGllbnQgPSBuZXcgQVdTLkFwaUdhdGV3YXlNYW5hZ2VtZW50QXBpKHtcbiAgICBhcGlWZXJzaW9uOiAnMjAxOC0xMS0yOScsXG4gICAgZW5kcG9pbnQ6IGNvbm5JbmZvLnVybCxcbiAgfSk7XG4gIHJldHVybiBhcGlHd0NsaWVudC5kZWxldGVDb25uZWN0aW9uKFxuICAgIHtcbiAgICAgIENvbm5lY3Rpb25JZDogY29ubkluZm8uaWQsXG4gICAgfSxcbiAgKS5wcm9taXNlKCkuY2F0Y2goXG4gICAgKGVycikgPT4ge1xuICAgICAgLy8gaHR0cCBHT05FKDQxMCkgbWVhbnMgY2xpZW50IGlzIGRpc2Nvbm5lY3RlZCwgYnV0IHN0aWxsIGV4aXN0cyBvbiBvdXIgY29ubmVjdGlvbiBzdG9yZVxuICAgICAgaWYgKGVyci5zdGF0dXNDb2RlID09PSA0MTApIHtcbiAgICAgICAgLy8gY2xlYW51cCBjb25uZWN0aW9uIGFuZCBzdWJzY3JpcHRpb25zIGZyb20gcmVkaXMgaWYgR09ORVxuICAgICAgICByZXR1cm4gZW5kV3NDb25uZWN0aW9uKGNsaWVudCwgY29ubkluZm8uaWQpO1xuICAgICAgfVxuICAgICAgdGhyb3cgZXJyO1xuICAgIH0sXG4gICk7XG59O1xuXG5leHBvcnQgY29uc3QgREVGQVVMVF9BUElfR0FURVdBWV9SRVNQT05TRTogQVBJR2F0ZXdheVByb3h5UmVzdWx0ID0ge1xuICBzdGF0dXNDb2RlOiAyMDAsXG4gIGJvZHk6ICcnLFxufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/ws/utils.ts\n");

/***/ }),

/***/ "@hathor/wallet-lib":
/*!*************************************!*\
  !*** external "@hathor/wallet-lib" ***!
  \*************************************/
/***/ ((module) => {

module.exports = require("@hathor/wallet-lib");

/***/ }),

/***/ "aws-sdk":
/*!**************************!*\
  !*** external "aws-sdk" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("aws-sdk");

/***/ }),

/***/ "axios":
/*!************************!*\
  !*** external "axios" ***!
  \************************/
/***/ ((module) => {

module.exports = require("axios");

/***/ }),

/***/ "bip32":
/*!************************!*\
  !*** external "bip32" ***!
  \************************/
/***/ ((module) => {

module.exports = require("bip32");

/***/ }),

/***/ "bitcoinjs-lib":
/*!********************************!*\
  !*** external "bitcoinjs-lib" ***!
  \********************************/
/***/ ((module) => {

module.exports = require("bitcoinjs-lib");

/***/ }),

/***/ "bitcoinjs-message":
/*!************************************!*\
  !*** external "bitcoinjs-message" ***!
  \************************************/
/***/ ((module) => {

module.exports = require("bitcoinjs-message");

/***/ }),

/***/ "joi":
/*!**********************!*\
  !*** external "joi" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("joi");

/***/ }),

/***/ "redis":
/*!************************!*\
  !*** external "redis" ***!
  \************************/
/***/ ((module) => {

module.exports = require("redis");

/***/ }),

/***/ "serverless-mysql":
/*!***********************************!*\
  !*** external "serverless-mysql" ***!
  \***********************************/
/***/ ((module) => {

module.exports = require("serverless-mysql");

/***/ }),

/***/ "tiny-secp256k1":
/*!*********************************!*\
  !*** external "tiny-secp256k1" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("tiny-secp256k1");

/***/ }),

/***/ "winston":
/*!**************************!*\
  !*** external "winston" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("winston");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "util":
/*!***********************!*\
  !*** external "util" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("util");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/ws/txNotify.ts");
/******/ 	var __webpack_export_target__ = exports;
/******/ 	for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
/******/ 	if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, "__esModule", { value: true });
/******/ 	
/******/ })()
;