/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/api/errors.ts":
/*!***************************!*\
  !*** ./src/api/errors.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ApiError = void 0;\nvar ApiError;\n(function (ApiError) {\n    ApiError[\"MISSING_PARAMETER\"] = \"missing-parameter\";\n    ApiError[\"INVALID_BODY\"] = \"invalid-body\";\n    ApiError[\"INVALID_TX_WEIGHT\"] = \"invalid-tx-weight\";\n    ApiError[\"INVALID_SELECTION_ALGORITHM\"] = \"invalid-selection-algorithm\";\n    ApiError[\"UNKNOWN_ERROR\"] = \"unknown-error\";\n    ApiError[\"INPUTS_NOT_FOUND\"] = \"inputs-not-found\";\n    ApiError[\"INPUTS_ALREADY_USED\"] = \"inputs-already-used\";\n    ApiError[\"INPUTS_NOT_IN_WALLET\"] = \"inputs-not-in-wallet\";\n    ApiError[\"INSUFFICIENT_FUNDS\"] = \"insufficient-funds\";\n    ApiError[\"INSUFFICIENT_INPUTS\"] = \"insufficient-inputs\";\n    ApiError[\"INVALID_PARAMETER\"] = \"invalid-parameter\";\n    ApiError[\"AUTH_INVALID_SIGNATURE\"] = \"invalid-auth-signature\";\n    ApiError[\"INVALID_PAYLOAD\"] = \"invalid-payload\";\n    ApiError[\"TOO_MANY_INPUTS\"] = \"too-many-inputs\";\n    ApiError[\"TOO_MANY_OUTPUTS\"] = \"too-many-outputs\";\n    ApiError[\"TX_PROPOSAL_NOT_FOUND\"] = \"tx-proposal-not-found\";\n    ApiError[\"TX_PROPOSAL_NOT_OPEN\"] = \"tx-proposal-not-open\";\n    ApiError[\"TX_PROPOSAL_SEND_ERROR\"] = \"tx-proposal-send-error\";\n    ApiError[\"TX_PROPOSAL_NO_MATCH\"] = \"tx-proposal-no-match\";\n    ApiError[\"WALLET_NOT_FOUND\"] = \"wallet-not-found\";\n    ApiError[\"WALLET_NOT_READY\"] = \"wallet-not-ready\";\n    ApiError[\"WALLET_ALREADY_LOADED\"] = \"wallet-already-loaded\";\n    ApiError[\"WALLET_MAX_RETRIES\"] = \"wallet-max-retries\";\n    ApiError[\"ADDRESS_NOT_IN_WALLET\"] = \"address-not-in-wallet\";\n    ApiError[\"ADDRESS_NOT_FOUND\"] = \"address-not-found\";\n    ApiError[\"TX_OUTPUT_NOT_IN_WALLET\"] = \"tx-output-not-in-wallet\";\n    ApiError[\"TOKEN_NOT_FOUND\"] = \"token-not-found\";\n    ApiError[\"FORBIDDEN\"] = \"forbidden\";\n    ApiError[\"UNAUTHORIZED\"] = \"unauthorized\";\n    ApiError[\"DEVICE_NOT_FOUND\"] = \"device-not-found\";\n    ApiError[\"TX_NOT_FOUND\"] = \"tx-not-found\";\n})(ApiError = exports.ApiError || (exports.ApiError = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYXBpL2Vycm9ycy50cyIsIm1hcHBpbmdzIjoiOzs7QUFPQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3dhbGxldC1zZXJ2aWNlLy4vc3JjL2FwaS9lcnJvcnMudHM/ZTAxYyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgSGF0aG9yIExhYnMgYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmV4cG9ydCBlbnVtIEFwaUVycm9yIHtcbiAgTUlTU0lOR19QQVJBTUVURVIgPSAnbWlzc2luZy1wYXJhbWV0ZXInLFxuICBJTlZBTElEX0JPRFkgPSAnaW52YWxpZC1ib2R5JyxcbiAgSU5WQUxJRF9UWF9XRUlHSFQgPSAnaW52YWxpZC10eC13ZWlnaHQnLFxuICBJTlZBTElEX1NFTEVDVElPTl9BTEdPUklUSE0gPSAnaW52YWxpZC1zZWxlY3Rpb24tYWxnb3JpdGhtJyxcbiAgVU5LTk9XTl9FUlJPUiA9ICd1bmtub3duLWVycm9yJyxcbiAgSU5QVVRTX05PVF9GT1VORCA9ICdpbnB1dHMtbm90LWZvdW5kJyxcbiAgSU5QVVRTX0FMUkVBRFlfVVNFRCA9ICdpbnB1dHMtYWxyZWFkeS11c2VkJyxcbiAgSU5QVVRTX05PVF9JTl9XQUxMRVQgPSAnaW5wdXRzLW5vdC1pbi13YWxsZXQnLFxuICBJTlNVRkZJQ0lFTlRfRlVORFMgPSAnaW5zdWZmaWNpZW50LWZ1bmRzJyxcbiAgSU5TVUZGSUNJRU5UX0lOUFVUUyA9ICdpbnN1ZmZpY2llbnQtaW5wdXRzJyxcbiAgSU5WQUxJRF9QQVJBTUVURVIgPSAnaW52YWxpZC1wYXJhbWV0ZXInLFxuICBBVVRIX0lOVkFMSURfU0lHTkFUVVJFID0gJ2ludmFsaWQtYXV0aC1zaWduYXR1cmUnLFxuICBJTlZBTElEX1BBWUxPQUQgPSAnaW52YWxpZC1wYXlsb2FkJyxcbiAgVE9PX01BTllfSU5QVVRTID0gJ3Rvby1tYW55LWlucHV0cycsXG4gIFRPT19NQU5ZX09VVFBVVFMgPSAndG9vLW1hbnktb3V0cHV0cycsXG4gIFRYX1BST1BPU0FMX05PVF9GT1VORCA9ICd0eC1wcm9wb3NhbC1ub3QtZm91bmQnLFxuICBUWF9QUk9QT1NBTF9OT1RfT1BFTiA9ICd0eC1wcm9wb3NhbC1ub3Qtb3BlbicsXG4gIFRYX1BST1BPU0FMX1NFTkRfRVJST1IgPSAndHgtcHJvcG9zYWwtc2VuZC1lcnJvcicsXG4gIFRYX1BST1BPU0FMX05PX01BVENIID0gJ3R4LXByb3Bvc2FsLW5vLW1hdGNoJyxcbiAgV0FMTEVUX05PVF9GT1VORCA9ICd3YWxsZXQtbm90LWZvdW5kJyxcbiAgV0FMTEVUX05PVF9SRUFEWSA9ICd3YWxsZXQtbm90LXJlYWR5JyxcbiAgV0FMTEVUX0FMUkVBRFlfTE9BREVEID0gJ3dhbGxldC1hbHJlYWR5LWxvYWRlZCcsXG4gIFdBTExFVF9NQVhfUkVUUklFUyA9ICd3YWxsZXQtbWF4LXJldHJpZXMnLFxuICBBRERSRVNTX05PVF9JTl9XQUxMRVQgPSAnYWRkcmVzcy1ub3QtaW4td2FsbGV0JyxcbiAgQUREUkVTU19OT1RfRk9VTkQgPSAnYWRkcmVzcy1ub3QtZm91bmQnLFxuICBUWF9PVVRQVVRfTk9UX0lOX1dBTExFVCA9ICd0eC1vdXRwdXQtbm90LWluLXdhbGxldCcsXG4gIFRPS0VOX05PVF9GT1VORCA9ICd0b2tlbi1ub3QtZm91bmQnLFxuICBGT1JCSURERU4gPSAnZm9yYmlkZGVuJyxcbiAgVU5BVVRIT1JJWkVEID0gJ3VuYXV0aG9yaXplZCcsXG4gIERFVklDRV9OT1RfRk9VTkQgPSAnZGV2aWNlLW5vdC1mb3VuZCcsXG4gIFRYX05PVF9GT1VORCA9ICd0eC1ub3QtZm91bmQnLFxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/api/errors.ts\n");

/***/ }),

/***/ "./src/api/txProposalDestroy.ts":
/*!**************************************!*\
  !*** ./src/api/txProposalDestroy.ts ***!
  \**************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.destroy = void 0;\n__webpack_require__(/*! source-map-support/register */ \"source-map-support/register\");\nconst errors_1 = __webpack_require__(/*! @src/api/errors */ \"./src/api/errors.ts\");\nconst db_1 = __webpack_require__(/*! @src/db */ \"./src/db/index.ts\");\nconst commons_1 = __webpack_require__(/*! @src/commons */ \"./src/commons.ts\");\nconst types_1 = __webpack_require__(/*! @src/types */ \"./src/types.ts\");\nconst utils_1 = __webpack_require__(/*! @src/utils */ \"./src/utils.ts\");\nconst utils_2 = __webpack_require__(/*! @src/api/utils */ \"./src/api/utils.ts\");\nconst core_1 = __importDefault(__webpack_require__(/*! @middy/core */ \"@middy/core\"));\nconst http_cors_1 = __importDefault(__webpack_require__(/*! @middy/http-cors */ \"@middy/http-cors\"));\nconst mysql = (0, utils_1.getDbConnection)();\nexports.destroy = (0, core_1.default)((0, commons_1.walletIdProxyHandler)(async (walletId, event) => {\n    const params = event.pathParameters;\n    let txProposalId;\n    if (params && params.txProposalId) {\n        txProposalId = params.txProposalId;\n    }\n    else {\n        return (0, utils_2.closeDbAndGetError)(mysql, errors_1.ApiError.MISSING_PARAMETER, { parameter: 'txProposalId' });\n    }\n    const txProposal = await (0, db_1.getTxProposal)(mysql, txProposalId);\n    if (txProposal === null) {\n        return (0, utils_2.closeDbAndGetError)(mysql, errors_1.ApiError.TX_PROPOSAL_NOT_FOUND);\n    }\n    if (txProposal.walletId !== walletId) {\n        return (0, utils_2.closeDbAndGetError)(mysql, errors_1.ApiError.FORBIDDEN);\n    }\n    if (txProposal.status !== types_1.TxProposalStatus.OPEN && txProposal.status !== types_1.TxProposalStatus.SEND_ERROR) {\n        return (0, utils_2.closeDbAndGetError)(mysql, errors_1.ApiError.TX_PROPOSAL_NOT_OPEN);\n    }\n    const now = (0, utils_1.getUnixTimestamp)();\n    await (0, db_1.updateTxProposal)(mysql, [txProposalId], now, types_1.TxProposalStatus.CANCELLED);\n    await (0, db_1.releaseTxProposalUtxos)(mysql, [txProposalId]);\n    await (0, utils_1.closeDbConnection)(mysql);\n    return {\n        statusCode: 200,\n        body: JSON.stringify({\n            success: true,\n            txProposalId,\n        }),\n    };\n})).use((0, http_cors_1.default)());\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYXBpL3R4UHJvcG9zYWxEZXN0cm95LnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUVBO0FBRUE7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBT0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBUUE7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93YWxsZXQtc2VydmljZS8uL3NyYy9hcGkvdHhQcm9wb3NhbERlc3Ryb3kudHM/YzlkMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBUElHYXRld2F5UHJveHlIYW5kbGVyIH0gZnJvbSAnYXdzLWxhbWJkYSc7XG5cbmltcG9ydCAnc291cmNlLW1hcC1zdXBwb3J0L3JlZ2lzdGVyJztcblxuaW1wb3J0IHsgQXBpRXJyb3IgfSBmcm9tICdAc3JjL2FwaS9lcnJvcnMnO1xuaW1wb3J0IHtcbiAgZ2V0VHhQcm9wb3NhbCxcbiAgdXBkYXRlVHhQcm9wb3NhbCxcbiAgcmVsZWFzZVR4UHJvcG9zYWxVdHhvcyxcbn0gZnJvbSAnQHNyYy9kYic7XG5pbXBvcnQgeyB3YWxsZXRJZFByb3h5SGFuZGxlciB9IGZyb20gJ0BzcmMvY29tbW9ucyc7XG5pbXBvcnQgeyBUeFByb3Bvc2FsU3RhdHVzIH0gZnJvbSAnQHNyYy90eXBlcyc7XG5pbXBvcnQgeyBjbG9zZURiQ29ubmVjdGlvbiwgZ2V0RGJDb25uZWN0aW9uLCBnZXRVbml4VGltZXN0YW1wIH0gZnJvbSAnQHNyYy91dGlscyc7XG5pbXBvcnQgeyBjbG9zZURiQW5kR2V0RXJyb3IgfSBmcm9tICdAc3JjL2FwaS91dGlscyc7XG5pbXBvcnQgbWlkZHkgZnJvbSAnQG1pZGR5L2NvcmUnO1xuaW1wb3J0IGNvcnMgZnJvbSAnQG1pZGR5L2h0dHAtY29ycyc7XG5cbmNvbnN0IG15c3FsID0gZ2V0RGJDb25uZWN0aW9uKCk7XG5cbi8qXG4gKiBEZXN0cm95IGEgdHhQcm9wb3NhbC5cbiAqXG4gKiBUaGlzIGxhbWJkYSBpcyBjYWxsZWQgYnkgQVBJIEdhdGV3YXkgb24gREVMRVRFIC90eHByb3Bvc2Fscy97cHJvcG9zYWxJZH1cbiAqL1xuZXhwb3J0IGNvbnN0IGRlc3Ryb3k6IEFQSUdhdGV3YXlQcm94eUhhbmRsZXIgPSBtaWRkeSh3YWxsZXRJZFByb3h5SGFuZGxlcihhc3luYyAod2FsbGV0SWQsIGV2ZW50KSA9PiB7XG4gIGNvbnN0IHBhcmFtcyA9IGV2ZW50LnBhdGhQYXJhbWV0ZXJzO1xuICBsZXQgdHhQcm9wb3NhbElkOiBzdHJpbmc7XG5cbiAgaWYgKHBhcmFtcyAmJiBwYXJhbXMudHhQcm9wb3NhbElkKSB7XG4gICAgdHhQcm9wb3NhbElkID0gcGFyYW1zLnR4UHJvcG9zYWxJZDtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gY2xvc2VEYkFuZEdldEVycm9yKG15c3FsLCBBcGlFcnJvci5NSVNTSU5HX1BBUkFNRVRFUiwgeyBwYXJhbWV0ZXI6ICd0eFByb3Bvc2FsSWQnIH0pO1xuICB9XG5cbiAgY29uc3QgdHhQcm9wb3NhbCA9IGF3YWl0IGdldFR4UHJvcG9zYWwobXlzcWwsIHR4UHJvcG9zYWxJZCk7XG5cbiAgaWYgKHR4UHJvcG9zYWwgPT09IG51bGwpIHtcbiAgICByZXR1cm4gY2xvc2VEYkFuZEdldEVycm9yKG15c3FsLCBBcGlFcnJvci5UWF9QUk9QT1NBTF9OT1RfRk9VTkQpO1xuICB9XG5cbiAgaWYgKHR4UHJvcG9zYWwud2FsbGV0SWQgIT09IHdhbGxldElkKSB7XG4gICAgcmV0dXJuIGNsb3NlRGJBbmRHZXRFcnJvcihteXNxbCwgQXBpRXJyb3IuRk9SQklEREVOKTtcbiAgfVxuXG4gIGlmICh0eFByb3Bvc2FsLnN0YXR1cyAhPT0gVHhQcm9wb3NhbFN0YXR1cy5PUEVOICYmIHR4UHJvcG9zYWwuc3RhdHVzICE9PSBUeFByb3Bvc2FsU3RhdHVzLlNFTkRfRVJST1IpIHtcbiAgICByZXR1cm4gY2xvc2VEYkFuZEdldEVycm9yKG15c3FsLCBBcGlFcnJvci5UWF9QUk9QT1NBTF9OT1RfT1BFTik7XG4gIH1cblxuICBjb25zdCBub3cgPSBnZXRVbml4VGltZXN0YW1wKCk7XG5cbiAgYXdhaXQgdXBkYXRlVHhQcm9wb3NhbChcbiAgICBteXNxbCxcbiAgICBbdHhQcm9wb3NhbElkXSxcbiAgICBub3csXG4gICAgVHhQcm9wb3NhbFN0YXR1cy5DQU5DRUxMRUQsXG4gICk7XG5cbiAgLy8gUmVtb3ZlIHR4X3Byb3Bvc2FsX2lkIGFuZCB0eF9wcm9wb3NhbF9pbmRleCBmcm9tIHV0eG8gdGFibGVcbiAgYXdhaXQgcmVsZWFzZVR4UHJvcG9zYWxVdHhvcyhteXNxbCwgW3R4UHJvcG9zYWxJZF0pO1xuXG4gIGF3YWl0IGNsb3NlRGJDb25uZWN0aW9uKG15c3FsKTtcblxuICByZXR1cm4ge1xuICAgIHN0YXR1c0NvZGU6IDIwMCxcbiAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7XG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgdHhQcm9wb3NhbElkLFxuICAgIH0pLFxuICB9O1xufSkpLnVzZShjb3JzKCkpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/api/txProposalDestroy.ts\n");

/***/ }),

/***/ "./src/api/utils.ts":
/*!**************************!*\
  !*** ./src/api/utils.ts ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.txIdJoiValidator = exports.validateParams = exports.pushProviderRegexPattern = exports.warmupMiddleware = exports.closeDbAndGetError = exports.STATUS_CODE_TABLE = void 0;\nconst joi_1 = __importDefault(__webpack_require__(/*! joi */ \"joi\"));\nconst errors_1 = __webpack_require__(/*! @src/api/errors */ \"./src/api/errors.ts\");\nconst types_1 = __webpack_require__(/*! @src/types */ \"./src/types.ts\");\nconst utils_1 = __webpack_require__(/*! @src/utils */ \"./src/utils.ts\");\nexports.STATUS_CODE_TABLE = {\n    [errors_1.ApiError.MISSING_PARAMETER]: 400,\n    [errors_1.ApiError.INVALID_BODY]: 400,\n    [errors_1.ApiError.INVALID_TX_WEIGHT]: 400,\n    [errors_1.ApiError.INVALID_SELECTION_ALGORITHM]: 400,\n    [errors_1.ApiError.UNKNOWN_ERROR]: 500,\n    [errors_1.ApiError.INPUTS_NOT_FOUND]: 400,\n    [errors_1.ApiError.INPUTS_ALREADY_USED]: 400,\n    [errors_1.ApiError.INSUFFICIENT_FUNDS]: 400,\n    [errors_1.ApiError.INSUFFICIENT_INPUTS]: 400,\n    [errors_1.ApiError.INVALID_PARAMETER]: 400,\n    [errors_1.ApiError.AUTH_INVALID_SIGNATURE]: 400,\n    [errors_1.ApiError.INVALID_PAYLOAD]: 400,\n    [errors_1.ApiError.TOO_MANY_INPUTS]: 400,\n    [errors_1.ApiError.TOO_MANY_OUTPUTS]: 400,\n    [errors_1.ApiError.TX_PROPOSAL_NOT_FOUND]: 404,\n    [errors_1.ApiError.TX_PROPOSAL_NOT_OPEN]: 400,\n    [errors_1.ApiError.TX_PROPOSAL_SEND_ERROR]: 400,\n    [errors_1.ApiError.TX_PROPOSAL_NO_MATCH]: 400,\n    [errors_1.ApiError.WALLET_NOT_FOUND]: 404,\n    [errors_1.ApiError.WALLET_NOT_READY]: 400,\n    [errors_1.ApiError.WALLET_ALREADY_LOADED]: 400,\n    [errors_1.ApiError.FORBIDDEN]: 403,\n    [errors_1.ApiError.UNAUTHORIZED]: 401,\n    [errors_1.ApiError.INPUTS_NOT_IN_WALLET]: 400,\n    [errors_1.ApiError.TX_OUTPUT_NOT_IN_WALLET]: 403,\n    [errors_1.ApiError.ADDRESS_NOT_IN_WALLET]: 400,\n    [errors_1.ApiError.WALLET_MAX_RETRIES]: 400,\n    [errors_1.ApiError.TOKEN_NOT_FOUND]: 404,\n    [errors_1.ApiError.DEVICE_NOT_FOUND]: 404,\n    [errors_1.ApiError.TX_NOT_FOUND]: 404,\n    [errors_1.ApiError.ADDRESS_NOT_FOUND]: 404,\n};\nconst closeDbAndGetError = async (mysql, error, extra) => {\n    await (0, utils_1.closeDbConnection)(mysql);\n    const body = Object.assign({ success: false, error }, extra);\n    return {\n        statusCode: exports.STATUS_CODE_TABLE[error],\n        body: JSON.stringify(body),\n    };\n};\nexports.closeDbAndGetError = closeDbAndGetError;\nconst warmupMiddleware = () => {\n    const warmupBefore = (request) => {\n        if (request.event.source === 'serverless-plugin-warmup') {\n            return {\n                statusCode: 200,\n                body: 'OK',\n            };\n        }\n        return undefined;\n    };\n    return {\n        before: warmupBefore,\n    };\n};\nexports.warmupMiddleware = warmupMiddleware;\nconst pushProviderRegexPattern = () => {\n    const entries = Object.values(types_1.PushProvider);\n    const options = entries.join('|');\n    return new RegExp(`^(?:${options})$`);\n};\nexports.pushProviderRegexPattern = pushProviderRegexPattern;\nconst validateParams = (validator, params, validatorOptions = {\n    abortEarly: false,\n    convert: false,\n}) => {\n    const result = validator.validate(params, validatorOptions);\n    const { error, value } = result;\n    if (error) {\n        const details = error.details.map((err) => ({\n            message: err.message,\n            path: err.path,\n        }));\n        return {\n            error: true,\n            details,\n        };\n    }\n    return {\n        error: false,\n        value,\n    };\n};\nexports.validateParams = validateParams;\nexports.txIdJoiValidator = joi_1.default.string().alphanum().min(64).max(64);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYXBpL3V0aWxzLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQVVBO0FBTUE7QUFDQTtBQUtBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBVUE7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQVhBO0FBZ0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFmQTtBQWlCQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSkE7QUFNQTtBQUlBO0FBQ0E7QUFDQTtBQUVBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUE1QkE7QUFpQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93YWxsZXQtc2VydmljZS8uL3NyYy9hcGkvdXRpbHMudHM/MjkyYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgSGF0aG9yIExhYnMgYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmltcG9ydCB7IEFQSUdhdGV3YXlQcm94eVJlc3VsdCwgQVBJR2F0ZXdheVByb3h5RXZlbnQgfSBmcm9tICdhd3MtbGFtYmRhJztcbmltcG9ydCB7IFNlcnZlcmxlc3NNeXNxbCB9IGZyb20gJ3NlcnZlcmxlc3MtbXlzcWwnO1xuaW1wb3J0IG1pZGR5IGZyb20gJ0BtaWRkeS9jb3JlJztcbmltcG9ydCBKb2ksIHtcbiAgU2NoZW1hLFxuICBWYWxpZGF0aW9uT3B0aW9ucyxcbiAgVmFsaWRhdGlvblJlc3VsdCxcbn0gZnJvbSAnam9pJztcblxuaW1wb3J0IHsgQXBpRXJyb3IgfSBmcm9tICdAc3JjL2FwaS9lcnJvcnMnO1xuaW1wb3J0IHtcbiAgUHVzaFByb3ZpZGVyLFxuICBTdHJpbmdNYXAsXG4gIFBhcmFtVmFsaWRhdGlvblJlc3VsdCxcbn0gZnJvbSAnQHNyYy90eXBlcyc7XG5pbXBvcnQgeyBjbG9zZURiQ29ubmVjdGlvbiB9IGZyb20gJ0BzcmMvdXRpbHMnO1xuXG5leHBvcnQgY29uc3QgU1RBVFVTX0NPREVfVEFCTEUgPSB7XG4gIFtBcGlFcnJvci5NSVNTSU5HX1BBUkFNRVRFUl06IDQwMCxcbiAgW0FwaUVycm9yLklOVkFMSURfQk9EWV06IDQwMCxcbiAgW0FwaUVycm9yLklOVkFMSURfVFhfV0VJR0hUXTogNDAwLFxuICBbQXBpRXJyb3IuSU5WQUxJRF9TRUxFQ1RJT05fQUxHT1JJVEhNXTogNDAwLFxuICBbQXBpRXJyb3IuVU5LTk9XTl9FUlJPUl06IDUwMCxcbiAgW0FwaUVycm9yLklOUFVUU19OT1RfRk9VTkRdOiA0MDAsXG4gIFtBcGlFcnJvci5JTlBVVFNfQUxSRUFEWV9VU0VEXTogNDAwLFxuICBbQXBpRXJyb3IuSU5TVUZGSUNJRU5UX0ZVTkRTXTogNDAwLFxuICBbQXBpRXJyb3IuSU5TVUZGSUNJRU5UX0lOUFVUU106IDQwMCxcbiAgW0FwaUVycm9yLklOVkFMSURfUEFSQU1FVEVSXTogNDAwLFxuICBbQXBpRXJyb3IuQVVUSF9JTlZBTElEX1NJR05BVFVSRV06IDQwMCxcbiAgW0FwaUVycm9yLklOVkFMSURfUEFZTE9BRF06IDQwMCxcbiAgW0FwaUVycm9yLlRPT19NQU5ZX0lOUFVUU106IDQwMCxcbiAgW0FwaUVycm9yLlRPT19NQU5ZX09VVFBVVFNdOiA0MDAsXG4gIFtBcGlFcnJvci5UWF9QUk9QT1NBTF9OT1RfRk9VTkRdOiA0MDQsXG4gIFtBcGlFcnJvci5UWF9QUk9QT1NBTF9OT1RfT1BFTl06IDQwMCxcbiAgW0FwaUVycm9yLlRYX1BST1BPU0FMX1NFTkRfRVJST1JdOiA0MDAsXG4gIFtBcGlFcnJvci5UWF9QUk9QT1NBTF9OT19NQVRDSF06IDQwMCxcbiAgW0FwaUVycm9yLldBTExFVF9OT1RfRk9VTkRdOiA0MDQsXG4gIFtBcGlFcnJvci5XQUxMRVRfTk9UX1JFQURZXTogNDAwLFxuICBbQXBpRXJyb3IuV0FMTEVUX0FMUkVBRFlfTE9BREVEXTogNDAwLFxuICBbQXBpRXJyb3IuRk9SQklEREVOXTogNDAzLFxuICBbQXBpRXJyb3IuVU5BVVRIT1JJWkVEXTogNDAxLFxuICBbQXBpRXJyb3IuSU5QVVRTX05PVF9JTl9XQUxMRVRdOiA0MDAsXG4gIFtBcGlFcnJvci5UWF9PVVRQVVRfTk9UX0lOX1dBTExFVF06IDQwMyxcbiAgW0FwaUVycm9yLkFERFJFU1NfTk9UX0lOX1dBTExFVF06IDQwMCxcbiAgW0FwaUVycm9yLldBTExFVF9NQVhfUkVUUklFU106IDQwMCxcbiAgW0FwaUVycm9yLlRPS0VOX05PVF9GT1VORF06IDQwNCxcbiAgW0FwaUVycm9yLkRFVklDRV9OT1RfRk9VTkRdOiA0MDQsXG4gIFtBcGlFcnJvci5UWF9OT1RfRk9VTkRdOiA0MDQsXG4gIFtBcGlFcnJvci5BRERSRVNTX05PVF9GT1VORF06IDQwNCxcbn07XG5cbi8qKlxuICogQ2xvc2UgZGF0YWJhc2UgY29ubmVjdGlvbiBhbmQgZ2V0IGVycm9yIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0gbXlzcWwgLSBUaGUgZGF0YWJhc2UgY29ubmVjdGlvblxuICogQHBhcmFtIGVycm9yIC0gQXBpRXJyb3IgcmV0dXJuIGNvZGVcbiAqIEBwYXJhbSBleHRyYSAtIEV4dHJhIGRhdGEgdG8gYmUgc2VudCBvbiB0aGUgYm9keSBvZiB0aGUgZXJyb3Igb2JqZWN0XG4gKiBAcmV0dXJucyBUaGUgZXJyb3Igb2JqZWN0XG4gKi9cbmV4cG9ydCBjb25zdCBjbG9zZURiQW5kR2V0RXJyb3IgPSBhc3luYyAoXG4gIG15c3FsOiBTZXJ2ZXJsZXNzTXlzcWwsXG4gIGVycm9yOiBBcGlFcnJvcixcbiAgZXh0cmE/OiBTdHJpbmdNYXA8dW5rbm93bj4sXG4pOiBQcm9taXNlPEFQSUdhdGV3YXlQcm94eVJlc3VsdD4gPT4ge1xuICBhd2FpdCBjbG9zZURiQ29ubmVjdGlvbihteXNxbCk7XG4gIGNvbnN0IGJvZHkgPSB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvciwgLi4uZXh0cmEgfTtcbiAgcmV0dXJuIHtcbiAgICBzdGF0dXNDb2RlOiBTVEFUVVNfQ09ERV9UQUJMRVtlcnJvcl0sXG4gICAgYm9keTogSlNPTi5zdHJpbmdpZnkoYm9keSksXG4gIH07XG59O1xuXG4vKipcbiAqIFdpbGwgcmV0dXJuIGVhcmx5IGlmIHRoZSByZXF1ZXN0IGlzIGEgd2FrZS11cCBjYWxsIGZyb20gc2VydmVybGVzcy1wbHVnaW4td2FybXVwXG4gKi9cbmV4cG9ydCBjb25zdCB3YXJtdXBNaWRkbGV3YXJlID0gKCk6IG1pZGR5Lk1pZGRsZXdhcmVPYmo8QVBJR2F0ZXdheVByb3h5RXZlbnQsIEFQSUdhdGV3YXlQcm94eVJlc3VsdD4gPT4ge1xuICBjb25zdCB3YXJtdXBCZWZvcmUgPSAocmVxdWVzdDogbWlkZHkuUmVxdWVzdCk6IEFQSUdhdGV3YXlQcm94eVJlc3VsdCB8IHVuZGVmaW5lZCA9PiB7XG4gICAgaWYgKHJlcXVlc3QuZXZlbnQuc291cmNlID09PSAnc2VydmVybGVzcy1wbHVnaW4td2FybXVwJykge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RhdHVzQ29kZTogMjAwLFxuICAgICAgICBib2R5OiAnT0snLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgYmVmb3JlOiB3YXJtdXBCZWZvcmUsXG4gIH07XG59O1xuXG5leHBvcnQgY29uc3QgcHVzaFByb3ZpZGVyUmVnZXhQYXR0ZXJuID0gKCk6IFJlZ0V4cCA9PiB7XG4gIGNvbnN0IGVudHJpZXMgPSBPYmplY3QudmFsdWVzKFB1c2hQcm92aWRlcik7XG4gIGNvbnN0IG9wdGlvbnMgPSBlbnRyaWVzLmpvaW4oJ3wnKTtcbiAgcmV0dXJuIG5ldyBSZWdFeHAoYF4oPzoke29wdGlvbnN9KSRgKTtcbn07XG5cbmV4cG9ydCBjb25zdCB2YWxpZGF0ZVBhcmFtcyA9IDxSZXN1bHRUeXBlPihcbiAgdmFsaWRhdG9yOiBTY2hlbWEsXG4gIHBhcmFtczogdW5rbm93bixcbiAgdmFsaWRhdG9yT3B0aW9uczogVmFsaWRhdGlvbk9wdGlvbnMgPSB7XG4gICAgYWJvcnRFYXJseTogZmFsc2UsXG4gICAgY29udmVydDogZmFsc2UsXG4gIH0sXG4pOiBQYXJhbVZhbGlkYXRpb25SZXN1bHQ8UmVzdWx0VHlwZT4gPT4ge1xuICBjb25zdCByZXN1bHQ6IFZhbGlkYXRpb25SZXN1bHQgPSB2YWxpZGF0b3IudmFsaWRhdGUocGFyYW1zLCB2YWxpZGF0b3JPcHRpb25zKTtcblxuICBjb25zdCB7IGVycm9yLCB2YWx1ZSB9ID0gcmVzdWx0O1xuXG4gIGlmIChlcnJvcikge1xuICAgIGNvbnN0IGRldGFpbHMgPSBlcnJvci5kZXRhaWxzLm1hcCgoZXJyKSA9PiAoe1xuICAgICAgbWVzc2FnZTogZXJyLm1lc3NhZ2UsXG4gICAgICBwYXRoOiBlcnIucGF0aCxcbiAgICB9KSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgZXJyb3I6IHRydWUsXG4gICAgICBkZXRhaWxzLFxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGVycm9yOiBmYWxzZSxcbiAgICB2YWx1ZSxcbiAgfTtcbn07XG5cbi8qKlxuICogVGhpcyBzaG91bGQgYmUgdXNlZCBpbnNpZGUgYSBKb2kgdmFsaWRhdG9yIG9iamVjdFxuICovXG5leHBvcnQgY29uc3QgdHhJZEpvaVZhbGlkYXRvciA9IEpvaS5zdHJpbmcoKS5hbHBoYW51bSgpLm1pbig2NCkubWF4KDY0KTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/api/utils.ts\n");

/***/ }),

/***/ "./src/commons.ts":
/*!************************!*\
  !*** ./src/commons.ts ***!
  \************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getWalletBalancesForTx = exports.prepareOutputs = exports.walletIdProxyHandler = exports.handleReorg = exports.validateAddressBalances = exports.handleVoided = exports.handleVoidedTxList = exports.searchForLatestValidBlock = exports.maybeRefreshWalletConstants = exports.getWalletBalances = exports.getWalletBalanceMap = exports.getTokenListFromInputsAndOutputs = exports.getAddressBalanceMap = exports.markLockedOutputs = exports.unlockTimelockedUtxos = exports.unlockUtxos = void 0;\nconst assert_1 = __webpack_require__(/*! assert */ \"assert\");\nconst db_1 = __webpack_require__(/*! @src/db */ \"./src/db/index.ts\");\nconst types_1 = __webpack_require__(/*! @src/types */ \"./src/types.ts\");\nconst alerting_utils_1 = __webpack_require__(/*! @src/utils/alerting.utils */ \"./src/utils/alerting.utils.ts\");\nconst utils_1 = __webpack_require__(/*! @src/utils */ \"./src/utils.ts\");\nconst wallet_lib_1 = __importDefault(__webpack_require__(/*! @hathor/wallet-lib */ \"@hathor/wallet-lib\"));\nconst utils_2 = __webpack_require__(/*! @src/db/utils */ \"./src/db/utils.ts\");\nconst VERSION_CHECK_MAX_DIFF = 60 * 60 * 1000;\nconst WARN_MAX_REORG_SIZE = parseInt(process.env.WARN_MAX_REORG_SIZE || '100', 10);\nconst unlockUtxos = async (mysql, utxos, updateTimelocks) => {\n    if (utxos.length === 0)\n        return;\n    const outputs = utxos.map((utxo) => {\n        const decoded = {\n            type: 'P2PKH',\n            address: utxo.address,\n            timelock: utxo.timelock,\n        };\n        return {\n            value: utxo.authorities > 0 ? utxo.authorities : utxo.value,\n            token: utxo.tokenId,\n            decoded,\n            locked: false,\n            token_data: utxo.authorities > 0 ? wallet_lib_1.default.constants.TOKEN_AUTHORITY_MASK : 0,\n            spent_by: null,\n            script: '',\n        };\n    });\n    await (0, db_1.unlockUtxos)(mysql, utxos);\n    const addressBalanceMap = (0, exports.getAddressBalanceMap)([], outputs);\n    await (0, db_1.updateAddressLockedBalance)(mysql, addressBalanceMap, updateTimelocks);\n    const addressWalletMap = await (0, db_1.getAddressWalletInfo)(mysql, Object.keys(addressBalanceMap));\n    const walletBalanceMap = (0, exports.getWalletBalanceMap)(addressWalletMap, addressBalanceMap);\n    await (0, db_1.updateWalletLockedBalance)(mysql, walletBalanceMap, updateTimelocks);\n};\nexports.unlockUtxos = unlockUtxos;\nconst unlockTimelockedUtxos = async (mysql, now) => {\n    const utxos = await (0, db_1.getExpiredTimelocksUtxos)(mysql, now);\n    await (0, exports.unlockUtxos)(mysql, utxos, true);\n};\nexports.unlockTimelockedUtxos = unlockTimelockedUtxos;\nconst markLockedOutputs = (outputs, now, hasHeightLock = false) => {\n    for (const output of outputs) {\n        output.locked = false;\n        if (hasHeightLock || output.decoded.timelock > now) {\n            output.locked = true;\n        }\n    }\n};\nexports.markLockedOutputs = markLockedOutputs;\nconst getAddressBalanceMap = (inputs, outputs) => {\n    const addressBalanceMap = {};\n    for (const input of inputs) {\n        const address = input.decoded.address;\n        const tokenBalanceMap = types_1.TokenBalanceMap.fromTxInput(input);\n        addressBalanceMap[address] = types_1.TokenBalanceMap.merge(addressBalanceMap[address], tokenBalanceMap);\n    }\n    for (const output of outputs) {\n        const address = output.decoded.address;\n        const tokenBalanceMap = types_1.TokenBalanceMap.fromTxOutput(output);\n        addressBalanceMap[address] = types_1.TokenBalanceMap.merge(addressBalanceMap[address], tokenBalanceMap);\n    }\n    return addressBalanceMap;\n};\nexports.getAddressBalanceMap = getAddressBalanceMap;\nconst getTokenListFromInputsAndOutputs = (inputs, outputs) => {\n    const tokenIds = new Set([]);\n    for (const input of inputs) {\n        tokenIds.add(input.token);\n    }\n    for (const output of outputs) {\n        tokenIds.add(output.token);\n    }\n    return [...tokenIds];\n};\nexports.getTokenListFromInputsAndOutputs = getTokenListFromInputsAndOutputs;\nconst getWalletBalanceMap = (addressWalletMap, addressBalanceMap) => {\n    const walletBalanceMap = {};\n    for (const [address, balanceMap] of Object.entries(addressBalanceMap)) {\n        const wallet = addressWalletMap[address];\n        const walletId = wallet && wallet.walletId;\n        if (!walletId)\n            continue;\n        walletBalanceMap[walletId] = types_1.TokenBalanceMap.merge(walletBalanceMap[walletId], balanceMap);\n    }\n    return walletBalanceMap;\n};\nexports.getWalletBalanceMap = getWalletBalanceMap;\nconst getWalletBalances = async (mysql, now, walletId, tokenIds = []) => {\n    let balances = await (0, db_1.getWalletBalances)(mysql, walletId, tokenIds);\n    const refreshBalances = balances.some((tb) => {\n        if (tb.balance.lockExpires && tb.balance.lockExpires <= now) {\n            return true;\n        }\n        return false;\n    });\n    if (refreshBalances) {\n        const currentHeight = await (0, db_1.getLatestHeight)(mysql);\n        const utxos = await (0, db_1.getWalletUnlockedUtxos)(mysql, walletId, now, currentHeight);\n        await (0, exports.unlockUtxos)(mysql, utxos, true);\n        balances = await (0, db_1.getWalletBalances)(mysql, walletId, tokenIds);\n    }\n    return balances;\n};\nexports.getWalletBalances = getWalletBalances;\nconst maybeRefreshWalletConstants = async (mysql) => {\n    const lastVersionData = await (0, db_1.getVersionData)(mysql);\n    const now = (0, utils_1.getUnixTimestamp)();\n    if (!lastVersionData || now - lastVersionData.timestamp > VERSION_CHECK_MAX_DIFF) {\n        const apiResponse = await wallet_lib_1.default.version.checkApiVersion();\n        const versionData = {\n            timestamp: now,\n            version: apiResponse.version,\n            network: apiResponse.network,\n            minWeight: apiResponse.min_weight,\n            minTxWeight: apiResponse.min_tx_weight,\n            minTxWeightCoefficient: apiResponse.min_tx_weight_coefficient,\n            minTxWeightK: apiResponse.min_tx_weight_k,\n            tokenDepositPercentage: apiResponse.token_deposit_percentage,\n            rewardSpendMinBlocks: apiResponse.reward_spend_min_blocks,\n            maxNumberInputs: apiResponse.max_number_inputs,\n            maxNumberOutputs: apiResponse.max_number_outputs,\n        };\n        await (0, db_1.updateVersionData)(mysql, versionData);\n    }\n    else {\n        wallet_lib_1.default.transaction.updateTransactionWeightConstants(lastVersionData.minTxWeight, lastVersionData.minTxWeightCoefficient, lastVersionData.minTxWeightK);\n        wallet_lib_1.default.tokens.updateDepositPercentage(lastVersionData.tokenDepositPercentage);\n        wallet_lib_1.default.transaction.updateMaxInputsConstant(lastVersionData.maxNumberInputs);\n        wallet_lib_1.default.transaction.updateMaxOutputsConstant(lastVersionData.maxNumberOutputs);\n        wallet_lib_1.default.wallet.updateRewardLockConstant(lastVersionData.rewardSpendMinBlocks);\n    }\n};\nexports.maybeRefreshWalletConstants = maybeRefreshWalletConstants;\nconst searchForLatestValidBlock = async (mysql) => {\n    const latestHeight = await (0, db_1.getLatestHeight)(mysql);\n    const bestBlock = await (0, db_1.getBlockByHeight)(mysql, latestHeight);\n    let start = 0;\n    let end = bestBlock.height;\n    let latestValidBlock = bestBlock;\n    while (start <= end) {\n        const midHeight = Math.floor((start + end) / 2);\n        const middleBlock = await (0, db_1.getBlockByHeight)(mysql, midHeight);\n        const [isVoided] = await (0, utils_1.isTxVoided)(middleBlock.txId);\n        if (!isVoided) {\n            latestValidBlock = middleBlock;\n            start = midHeight + 1;\n        }\n        else {\n            end = midHeight - 1;\n        }\n    }\n    return latestValidBlock;\n};\nexports.searchForLatestValidBlock = searchForLatestValidBlock;\nconst handleVoidedTxList = async (mysql, logger, txs) => {\n    logger.debug(`Setting ${txs.length} transactions as voided.`, {\n        transactions: txs,\n    });\n    await (0, db_1.markTxsAsVoided)(mysql, txs);\n    logger.debug(`Setting WalletTxHistory as voided from ${txs.length} transactions.`);\n    await (0, db_1.markWalletTxHistoryAsVoided)(mysql, txs);\n    logger.debug(`Setting AddressTxHistory as voided from ${txs.length} transactions.`);\n    await (0, db_1.markAddressTxHistoryAsVoided)(mysql, txs);\n    const txOutputs = await (0, db_1.getTxOutputs)(mysql, txs);\n    logger.debug(`Fetched ${txOutputs.length} utxos from the voided transaction list`, {\n        txOutputs,\n    });\n    const txOutputsTxIds = txOutputs.reduce((acc, txOutput) => acc.add(txOutput.txId), new Set());\n    const spentOutputs = await (0, db_1.getTxOutputsBySpent)(mysql, [...txOutputsTxIds]);\n    if (spentOutputs.length > 0) {\n        logger.debug(`Unspending ${spentOutputs.length} tx_outputs.`, {\n            txOutputs: spentOutputs,\n        });\n        await (0, db_1.unspendUtxos)(mysql, [...spentOutputs]);\n    }\n    const affectedUtxoList = [...txOutputs, ...spentOutputs];\n    logger.debug(`Setting ${txOutputs.length} tx_outputs as voided.`, {\n        txOutputs,\n    });\n    await (0, db_1.markUtxosAsVoided)(mysql, txOutputs);\n    const txIds = txOutputs.reduce((acc, utxo) => {\n        if (utxo.spentBy) {\n            acc.add(utxo.spentBy);\n        }\n        return acc;\n    }, new Set());\n    const newTxs = await (0, db_1.getTransactionsById)(mysql, [...txIds]);\n    logger.debug(`Fetched ${newTxs.length} transactions that spend the voided tx outputs list`, {\n        transactions: newTxs,\n    });\n    return [newTxs, affectedUtxoList];\n};\nexports.handleVoidedTxList = handleVoidedTxList;\nconst handleVoided = async (mysql, logger, tx) => {\n    let txs = [tx];\n    let affectedUtxoList = [];\n    while (txs.length > 0) {\n        const [newTxs, newAffectedUtxoList] = await (0, exports.handleVoidedTxList)(mysql, logger, txs);\n        txs = newTxs;\n        affectedUtxoList = [...affectedUtxoList, ...newAffectedUtxoList];\n    }\n    const [affectedAddresses, affectedTxIds] = affectedUtxoList.reduce((acc, utxo) => {\n        acc[0].add(utxo.address);\n        acc[1].add(utxo.txId);\n        return acc;\n    }, [new Set(), new Set()]);\n    if (affectedAddresses.size > 0) {\n        const addresses = [...affectedAddresses];\n        logger.debug(`Rebuilding balances for ${addresses.length} addresses.`, {\n            addresses,\n        });\n        logger.debug(`Rebuilding tx count from ${affectedTxIds.size} transactions`, {\n            affectedTxIds,\n        });\n        await (0, db_1.rebuildAddressBalancesFromUtxos)(mysql, addresses, [...affectedTxIds]);\n        await (0, exports.validateAddressBalances)(mysql, addresses);\n    }\n    logger.debug('Handle voided tx is done.');\n};\nexports.handleVoided = handleVoided;\nconst validateAddressBalances = async (mysql, addresses) => {\n    const addressBalances = await (0, db_1.fetchAddressBalance)(mysql, addresses);\n    const addressTxHistorySums = await (0, db_1.fetchAddressTxHistorySum)(mysql, addresses);\n    for (let i = 0; i < addressTxHistorySums.length; i++) {\n        const addressBalance = addressBalances[i];\n        const addressTxHistorySum = addressTxHistorySums[i];\n        assert_1.strict.strictEqual(addressBalance.tokenId, addressTxHistorySum.tokenId);\n        assert_1.strict.strictEqual(addressBalance.unlockedBalance + addressBalance.lockedBalance, addressTxHistorySum.balance);\n    }\n};\nexports.validateAddressBalances = validateAddressBalances;\nconst handleReorg = async (mysql, logger) => {\n    const { height } = await (0, exports.searchForLatestValidBlock)(mysql);\n    const currentHeight = await (0, db_1.getLatestHeight)(mysql);\n    logger.debug(`Handling reorg. Our latest valid block is ${height} and our highest block height is ${currentHeight}`, {\n        height,\n        currentHeight,\n    });\n    if ((currentHeight - height) > WARN_MAX_REORG_SIZE) {\n        logger.error(`A reorg with ${currentHeight - height} blocks has been detected`);\n        await (0, alerting_utils_1.addAlert)('Big reorg detected', `A reorg with ${currentHeight - height} blocks has been detected`, types_1.Severity.MINOR, { walletServiceHeight: currentHeight, fullNodeHeight: height });\n    }\n    const allTxsAfterHeight = await (0, db_1.getTxsAfterHeight)(mysql, height);\n    let txs = allTxsAfterHeight.filter((tx) => [\n        wallet_lib_1.default.constants.BLOCK_VERSION,\n        wallet_lib_1.default.constants.MERGED_MINED_BLOCK_VERSION,\n    ].indexOf(tx.version) > -1);\n    await (0, db_1.deleteBlocksAfterHeight)(mysql, height);\n    logger.debug('Removing transactions', txs.map((tx) => tx.txId));\n    let affectedUtxoList = [];\n    while (txs.length > 0) {\n        const [newTxs, newAffectedUtxoList] = await (0, exports.handleVoidedTxList)(mysql, logger, txs);\n        txs = newTxs;\n        affectedUtxoList = [...affectedUtxoList, ...newAffectedUtxoList];\n    }\n    const remainingTxs = await (0, db_1.getTxsAfterHeight)(mysql, height);\n    if (remainingTxs.length > 0) {\n        logger.debug(`Setting ${remainingTxs.length} unconfirmed transactions to the mempool (height = NULL).`, {\n            remainingTxs,\n        });\n        await (0, db_1.removeTxsHeight)(mysql, remainingTxs);\n    }\n    const [affectedAddresses, affectedTxIds] = affectedUtxoList.reduce((acc, utxo) => {\n        acc[0].add(utxo.address);\n        acc[1].add(utxo.txId);\n        return acc;\n    }, [new Set(), new Set()]);\n    if (affectedAddresses.size > 0) {\n        const addresses = [...affectedAddresses];\n        logger.debug(`Rebuilding balances for ${addresses.length} addresses.`, {\n            addresses,\n        });\n        logger.debug(`Rebuilding tx count from ${affectedTxIds.size} transactions`, {\n            affectedTxIds,\n        });\n        await (0, db_1.rebuildAddressBalancesFromUtxos)(mysql, addresses, [...affectedTxIds]);\n        await (0, exports.validateAddressBalances)(mysql, addresses);\n    }\n    logger.debug('Reorg is done.');\n    return height;\n};\nexports.handleReorg = handleReorg;\nconst walletIdProxyHandler = (handler) => (async (event, context) => {\n    let walletId;\n    try {\n        walletId = event.requestContext.authorizer.principalId;\n    }\n    catch (e) {\n        return {\n            statusCode: 401,\n            body: 'Unauthorized',\n        };\n    }\n    return handler(walletId, event, context);\n});\nexports.walletIdProxyHandler = walletIdProxyHandler;\nconst prepareOutputs = (outputs, txId, logger) => {\n    const preparedOutputs = outputs.reduce(([currIndex, newOutputs], output) => {\n        if (!output.decoded\n            || output.decoded.type === null\n            || output.decoded.type === undefined) {\n            logger.warn(`Ignoring tx output with index ${currIndex} from tx ${txId} as script couldn't be decoded.`);\n            return [currIndex + 1, newOutputs];\n        }\n        return [\n            currIndex + 1,\n            [\n                ...newOutputs,\n                Object.assign(Object.assign({}, output), { index: currIndex }),\n            ],\n        ];\n    }, [0, []]);\n    return preparedOutputs[1];\n};\nexports.prepareOutputs = prepareOutputs;\nconst getWalletBalancesForTx = async (mysql, tx) => {\n    const addressBalanceMap = (0, exports.getAddressBalanceMap)(tx.inputs, tx.outputs);\n    const addressWalletMap = await (0, db_1.getAddressWalletInfo)(mysql, Object.keys(addressBalanceMap));\n    const walletsMap = {};\n    const tokenIdAccumulation = [];\n    const addressWalletEntries = (0, utils_2.stringMapIterator)(addressWalletMap);\n    for (const [address, wallet] of addressWalletEntries) {\n        if (!walletsMap[wallet.walletId]) {\n            walletsMap[wallet.walletId] = {\n                txId: tx.tx_id,\n                walletId: wallet.walletId,\n                addresses: [],\n                walletBalanceForTx: new types_1.TokenBalanceMap(),\n            };\n        }\n        const walletData = walletsMap[wallet.walletId];\n        walletData.addresses.push(address);\n        const mergedBalance = types_1.TokenBalanceMap.merge(walletData.walletBalanceForTx, addressBalanceMap[address]);\n        walletData.walletBalanceForTx = mergedBalance;\n        const tokenIdList = Object.keys(mergedBalance.map);\n        tokenIdAccumulation.push(tokenIdList);\n    }\n    const tokenIdSet = new Set(tokenIdAccumulation.reduce((prev, eachGroup) => [...prev, ...eachGroup], []));\n    const tokenSymbolsMap = await (0, db_1.getTokenSymbols)(mysql, Array.from(tokenIdSet.values()));\n    return utils_2.WalletBalanceMapConverter.toValue(walletsMap, tokenSymbolsMap);\n};\nexports.getWalletBalancesForTx = getWalletBalancesForTx;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvY29tbW9ucy50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFVQTtBQUVBO0FBNEJBO0FBc0JBO0FBRUE7QUFLQTtBQUNBO0FBRUE7QUFDQTtBQVNBO0FBQ0E7QUFBQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFFQTtBQUVBO0FBR0E7QUFHQTtBQUNBO0FBQ0E7QUFwQ0E7QUE2Q0E7QUFDQTtBQUVBO0FBQ0E7QUFKQTtBQW9CQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBUEE7QUF5QkE7QUFJQTtBQUVBO0FBQ0E7QUFHQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBR0E7QUFHQTtBQUNBO0FBRUE7QUFDQTtBQTFCQTtBQW1DQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQVpBO0FBa0NBO0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUFBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFmQTtBQTRCQTtBQU1BO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQXZCQTtBQThCQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQUE7QUFDQTtBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQWpDQTtBQTBDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBR0E7QUFDQTtBQUVBO0FBR0E7QUFDQTtBQUNBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBM0JBO0FBd0NBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBRUE7QUFDQTtBQUNBO0FBR0E7QUFNQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFHQTtBQUVBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUEzREE7QUFvRUE7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUdBO0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFJQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQW5DQTtBQXFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUdBO0FBQ0E7QUFDQTtBQWJBO0FBdUJBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBTUE7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFFQTtBQUVBO0FBU0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBR0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUVBO0FBQ0E7QUFsRkE7QUFvRkE7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFiQTtBQWdCQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUdBO0FBQ0E7QUFDQTtBQUlBO0FBQ0E7QUF6QkE7QUFrQ0E7QUFDQTtBQUVBO0FBR0E7QUFHQTtBQUdBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFHQTtBQUdBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQXhDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3dhbGxldC1zZXJ2aWNlLy4vc3JjL2NvbW1vbnMudHM/ZTY3NCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgSGF0aG9yIExhYnMgYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmltcG9ydCB7IEFQSUdhdGV3YXlQcm94eUhhbmRsZXIgfSBmcm9tICdhd3MtbGFtYmRhJztcblxuaW1wb3J0IHsgU2VydmVybGVzc015c3FsIH0gZnJvbSAnc2VydmVybGVzcy1teXNxbCc7XG5pbXBvcnQgeyBzdHJpY3QgYXMgYXNzZXJ0IH0gZnJvbSAnYXNzZXJ0JztcblxuaW1wb3J0IHtcbiAgZ2V0QWRkcmVzc1dhbGxldEluZm8sXG4gIGdldExhdGVzdEhlaWdodCxcbiAgZ2V0V2FsbGV0QmFsYW5jZXMgYXMgZGJHZXRXYWxsZXRCYWxhbmNlcyxcbiAgZ2V0V2FsbGV0VW5sb2NrZWRVdHhvcyxcbiAgZ2V0RXhwaXJlZFRpbWVsb2Nrc1V0eG9zLFxuICB1bmxvY2tVdHhvcyBhcyBkYlVubG9ja1V0eG9zLFxuICB1cGRhdGVBZGRyZXNzTG9ja2VkQmFsYW5jZSxcbiAgdXBkYXRlV2FsbGV0TG9ja2VkQmFsYW5jZSxcbiAgZ2V0VmVyc2lvbkRhdGEsXG4gIHVwZGF0ZVZlcnNpb25EYXRhLFxuICBnZXRCbG9ja0J5SGVpZ2h0LFxuICBnZXRUeHNBZnRlckhlaWdodCxcbiAgbWFya1R4c0FzVm9pZGVkLFxuICBnZXRUeE91dHB1dHMsXG4gIGdldFR4T3V0cHV0c0J5U3BlbnQsXG4gIHJlbW92ZVR4c0hlaWdodCxcbiAgdW5zcGVuZFV0eG9zLFxuICBtYXJrVXR4b3NBc1ZvaWRlZCxcbiAgZ2V0VHJhbnNhY3Rpb25zQnlJZCxcbiAgZGVsZXRlQmxvY2tzQWZ0ZXJIZWlnaHQsXG4gIG1hcmtXYWxsZXRUeEhpc3RvcnlBc1ZvaWRlZCxcbiAgbWFya0FkZHJlc3NUeEhpc3RvcnlBc1ZvaWRlZCxcbiAgcmVidWlsZEFkZHJlc3NCYWxhbmNlc0Zyb21VdHhvcyxcbiAgZmV0Y2hBZGRyZXNzQmFsYW5jZSxcbiAgZmV0Y2hBZGRyZXNzVHhIaXN0b3J5U3VtLFxuICBnZXRUb2tlblN5bWJvbHMsXG59IGZyb20gJ0BzcmMvZGInO1xuaW1wb3J0IHtcbiAgRGVjb2RlZE91dHB1dCxcbiAgU3RyaW5nTWFwLFxuICBUb2tlbkJhbGFuY2VNYXAsXG4gIFR4SW5wdXQsXG4gIFR4T3V0cHV0LFxuICBUeE91dHB1dFdpdGhJbmRleCxcbiAgRGJUeE91dHB1dCxcbiAgVHgsXG4gIFdhbGxldCxcbiAgQmxvY2ssXG4gIFdhbGxldFRva2VuQmFsYW5jZSxcbiAgRnVsbE5vZGVWZXJzaW9uRGF0YSxcbiAgQWRkcmVzc0JhbGFuY2UsXG4gIEFkZHJlc3NUb3RhbEJhbGFuY2UsXG4gIFdhbGxldFByb3h5SGFuZGxlcixcbiAgV2FsbGV0QmFsYW5jZSxcbiAgVHJhbnNhY3Rpb24sXG4gIFdhbGxldEJhbGFuY2VWYWx1ZSxcbiAgU2V2ZXJpdHksXG59IGZyb20gJ0BzcmMvdHlwZXMnO1xuaW1wb3J0IHsgTG9nZ2VyIH0gZnJvbSAnd2luc3Rvbic7XG5pbXBvcnQgeyBhZGRBbGVydCB9IGZyb20gJ0BzcmMvdXRpbHMvYWxlcnRpbmcudXRpbHMnO1xuXG5pbXBvcnQge1xuICBnZXRVbml4VGltZXN0YW1wLFxuICBpc1R4Vm9pZGVkLFxufSBmcm9tICdAc3JjL3V0aWxzJztcblxuaW1wb3J0IGhhdGhvckxpYiBmcm9tICdAaGF0aG9yL3dhbGxldC1saWInO1xuaW1wb3J0IHsgc3RyaW5nTWFwSXRlcmF0b3IsIFdhbGxldEJhbGFuY2VNYXBDb252ZXJ0ZXIgfSBmcm9tICdAc3JjL2RiL3V0aWxzJztcblxuY29uc3QgVkVSU0lPTl9DSEVDS19NQVhfRElGRiA9IDYwICogNjAgKiAxMDAwOyAvLyAxIGhvdXJcbmNvbnN0IFdBUk5fTUFYX1JFT1JHX1NJWkUgPSBwYXJzZUludChwcm9jZXNzLmVudi5XQVJOX01BWF9SRU9SR19TSVpFIHx8ICcxMDAnLCAxMCk7XG5cbi8qKlxuICogVXBkYXRlIHRoZSB1bmxvY2tlZC9sb2NrZWQgYmFsYW5jZXMgZm9yIGFkZHJlc3NlcyBhbmQgd2FsbGV0cyBjb25uZWN0ZWQgdG8gdGhlIGdpdmVuIFVUWE9zLlxuICpcbiAqIEBwYXJhbSBteXNxbCAtIERhdGFiYXNlIGNvbm5lY3Rpb25cbiAqIEBwYXJhbSB1dHhvcyAtIExpc3Qgb2YgVVRYT3MgdGhhdCBhcmUgdW5sb2NrZWQgYnkgaGVpZ2h0XG4gKiBAcGFyYW0gdXBkYXRlVGltZWxvY2tzIC0gSWYgdGhpcyB1cGRhdGUgaXMgdHJpZ2dlcmVkIGJ5IGEgdGltZWxvY2sgZXhwaXJpbmcsIHVwZGF0ZSB0aGUgbmV4dCBsb2NrIGV4cGlyYXRpb25cbiAqL1xuZXhwb3J0IGNvbnN0IHVubG9ja1V0eG9zID0gYXN5bmMgKG15c3FsOiBTZXJ2ZXJsZXNzTXlzcWwsIHV0eG9zOiBEYlR4T3V0cHV0W10sIHVwZGF0ZVRpbWVsb2NrczogYm9vbGVhbik6IFByb21pc2U8dm9pZD4gPT4ge1xuICBpZiAodXR4b3MubGVuZ3RoID09PSAwKSByZXR1cm47XG5cbiAgY29uc3Qgb3V0cHV0czogVHhPdXRwdXRbXSA9IHV0eG9zLm1hcCgodXR4bykgPT4ge1xuICAgIGNvbnN0IGRlY29kZWQ6IERlY29kZWRPdXRwdXQgPSB7XG4gICAgICB0eXBlOiAnUDJQS0gnLFxuICAgICAgYWRkcmVzczogdXR4by5hZGRyZXNzLFxuICAgICAgdGltZWxvY2s6IHV0eG8udGltZWxvY2ssXG4gICAgfTtcblxuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogdXR4by5hdXRob3JpdGllcyA+IDAgPyB1dHhvLmF1dGhvcml0aWVzIDogdXR4by52YWx1ZSxcbiAgICAgIHRva2VuOiB1dHhvLnRva2VuSWQsXG4gICAgICBkZWNvZGVkLFxuICAgICAgbG9ja2VkOiBmYWxzZSxcbiAgICAgIC8vIHNldCBhdXRob3JpdHkgYml0IGlmIG5lY2Vzc2FyeVxuICAgICAgdG9rZW5fZGF0YTogdXR4by5hdXRob3JpdGllcyA+IDAgPyBoYXRob3JMaWIuY29uc3RhbnRzLlRPS0VOX0FVVEhPUklUWV9NQVNLIDogMCxcbiAgICAgIC8vIHdlIGRvbid0IGNhcmUgYWJvdXQgc3BlbnRfYnkgYW5kIHNjcmlwdFxuICAgICAgc3BlbnRfYnk6IG51bGwsXG4gICAgICBzY3JpcHQ6ICcnLFxuICAgIH07XG4gIH0pO1xuXG4gIC8vIG1hcmsgYXMgdW5sb2NrZWQgaW4gZGF0YWJhc2UgKHRoaXMganVzdCBjaGFuZ2VzIHRoZSAnbG9ja2VkJyBmbGFnKVxuICBhd2FpdCBkYlVubG9ja1V0eG9zKG15c3FsLCB1dHhvcyk7XG5cbiAgY29uc3QgYWRkcmVzc0JhbGFuY2VNYXA6IFN0cmluZ01hcDxUb2tlbkJhbGFuY2VNYXA+ID0gZ2V0QWRkcmVzc0JhbGFuY2VNYXAoW10sIG91dHB1dHMpO1xuICAvLyB1cGRhdGUgYWRkcmVzc19iYWxhbmNlIHRhYmxlXG4gIGF3YWl0IHVwZGF0ZUFkZHJlc3NMb2NrZWRCYWxhbmNlKG15c3FsLCBhZGRyZXNzQmFsYW5jZU1hcCwgdXBkYXRlVGltZWxvY2tzKTtcblxuICAvLyBjaGVjayBpZiBhZGRyZXNzZXMgYmVsb25nIHRvIGFueSBzdGFydGVkIHdhbGxldFxuICBjb25zdCBhZGRyZXNzV2FsbGV0TWFwOiBTdHJpbmdNYXA8V2FsbGV0PiA9IGF3YWl0IGdldEFkZHJlc3NXYWxsZXRJbmZvKG15c3FsLCBPYmplY3Qua2V5cyhhZGRyZXNzQmFsYW5jZU1hcCkpO1xuXG4gIC8vIHVwZGF0ZSB3YWxsZXRfYmFsYW5jZSB0YWJsZVxuICBjb25zdCB3YWxsZXRCYWxhbmNlTWFwOiBTdHJpbmdNYXA8VG9rZW5CYWxhbmNlTWFwPiA9IGdldFdhbGxldEJhbGFuY2VNYXAoYWRkcmVzc1dhbGxldE1hcCwgYWRkcmVzc0JhbGFuY2VNYXApO1xuICBhd2FpdCB1cGRhdGVXYWxsZXRMb2NrZWRCYWxhbmNlKG15c3FsLCB3YWxsZXRCYWxhbmNlTWFwLCB1cGRhdGVUaW1lbG9ja3MpO1xufTtcblxuLyoqXG4gKiBVcGRhdGUgdGhlIHVubG9ja2VkL2xvY2tlZCBiYWxhbmNlcyBmb3IgYWRkcmVzc2VzIGFuZCB3YWxsZXRzIGNvbm5lY3RlZCB0byB0aGUgVVRYT3MgdGhhdCB3ZXJlIHVubG9ja2VkXG4gKiBiZWNhdXNlIG9mIHRoZWlyIHRpbWVsb2NrcyBleHBpcmluZ1xuICpcbiAqIEBwYXJhbSBteXNxbCAtIERhdGFiYXNlIGNvbm5lY3Rpb25cbiAqIEBwYXJhbSBub3cgLSBDdXJyZW50IHRpbWVzdGFtcFxuICovXG5leHBvcnQgY29uc3QgdW5sb2NrVGltZWxvY2tlZFV0eG9zID0gYXN5bmMgKG15c3FsOiBTZXJ2ZXJsZXNzTXlzcWwsIG5vdzogbnVtYmVyKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gIGNvbnN0IHV0eG9zOiBEYlR4T3V0cHV0W10gPSBhd2FpdCBnZXRFeHBpcmVkVGltZWxvY2tzVXR4b3MobXlzcWwsIG5vdyk7XG5cbiAgYXdhaXQgdW5sb2NrVXR4b3MobXlzcWwsIHV0eG9zLCB0cnVlKTtcbn07XG5cbi8qKlxuICogTWFyayBhIHRyYW5zYWN0aW9uJ3Mgb3V0cHV0cyB0aGF0IGFyZSBsb2NrZWQuIE1vZGlmaWVzIHRoZSBvdXRwdXRzIGluIHBsYWNlLlxuICpcbiAqIEByZW1hcmtzXG4gKiBUaGUgdGltZXN0YW1wIGlzIHVzZWQgdG8gZGV0ZXJtaW5lIGlmIGVhY2ggb3V0cHV0IGlzIGxvY2tlZCBieSB0aW1lLiBPbiB0aGUgb3RoZXIgaGFuZCwgYGhhc0hlaWdodExvY2tgXG4gKiBhcHBsaWVzIHRvIGFsbCBvdXRwdXRzLlxuICpcbiAqIFRoZSBpZGVhIGlzIHRoYXQgYGhhc0hlaWdodExvY2sgPSB0cnVlYCBzaG91bGQgYmUgdXNlZCBmb3IgYmxvY2tzLCB3aG9zZSBvdXRwdXRzIGFyZSBsb2NrZWQgYnlcbiAqIGhlaWdodC4gVGltZWxvY2tzIGFyZSBoYW5kbGVkIGJ5IHRoZSBgbm93YCBwYXJhbWV0ZXIuXG4gKlxuICogQHBhcmFtIG91dHB1dHMgLSBUaGUgdHJhbnNhY3Rpb24gb3V0cHV0c1xuICogQHBhcmFtIG5vdyAtIEN1cnJlbnQgdGltZXN0YW1wXG4gKiBAcGFyYW0gaGFzSGVpZ2h0TG9jayAtIEZsYWcgdGhhdCB0ZWxscyBpZiBvdXRwdXRzIGFyZSBsb2NrZWQgYnkgaGVpZ2h0XG4gKi9cbmV4cG9ydCBjb25zdCBtYXJrTG9ja2VkT3V0cHV0cyA9IChvdXRwdXRzOiBUeE91dHB1dFdpdGhJbmRleFtdLCBub3c6IG51bWJlciwgaGFzSGVpZ2h0TG9jayA9IGZhbHNlKTogdm9pZCA9PiB7XG4gIGZvciAoY29uc3Qgb3V0cHV0IG9mIG91dHB1dHMpIHtcbiAgICBvdXRwdXQubG9ja2VkID0gZmFsc2U7XG4gICAgaWYgKGhhc0hlaWdodExvY2sgfHwgb3V0cHV0LmRlY29kZWQudGltZWxvY2sgPiBub3cpIHtcbiAgICAgIG91dHB1dC5sb2NrZWQgPSB0cnVlO1xuICAgIH1cbiAgfVxufTtcblxuLyoqXG4gKiBHZXQgdGhlIG1hcCBvZiB0b2tlbiBiYWxhbmNlcyBmb3IgZWFjaCBhZGRyZXNzIGluIHRoZSB0cmFuc2FjdGlvbiBpbnB1dHMgYW5kIG91dHB1dHMuXG4gKlxuICogQGV4YW1wbGVcbiAqIFJldHVybiBtYXAgaGFzIHRoaXMgZm9ybWF0OlxuICogYGBgXG4gKiB7XG4gKiAgIGFkZHJlc3MxOiB7dG9rZW4xOiBiYWxhbmNlMSwgdG9rZW4yOiBiYWxhbmNlMn0sXG4gKiAgIGFkZHJlc3MyOiB7dG9rZW4xOiBiYWxhbmNlM31cbiAqIH1cbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBpbnB1dHMgLSBUaGUgdHJhbnNhY3Rpb24gaW5wdXRzXG4gKiBAcGFyYW0gb3V0cHV0cyAtIFRoZSB0cmFuc2FjdGlvbiBvdXRwdXRzXG4gKiBAcmV0dXJucyBBIG1hcCBvZiBhZGRyZXNzZXMgYW5kIGl0cyB0b2tlbiBiYWxhbmNlc1xuICovXG5leHBvcnQgY29uc3QgZ2V0QWRkcmVzc0JhbGFuY2VNYXAgPSAoXG4gIGlucHV0czogVHhJbnB1dFtdLFxuICBvdXRwdXRzOiBUeE91dHB1dFtdLFxuKTogU3RyaW5nTWFwPFRva2VuQmFsYW5jZU1hcD4gPT4ge1xuICBjb25zdCBhZGRyZXNzQmFsYW5jZU1hcCA9IHt9O1xuXG4gIGZvciAoY29uc3QgaW5wdXQgb2YgaW5wdXRzKSB7XG4gICAgY29uc3QgYWRkcmVzcyA9IGlucHV0LmRlY29kZWQuYWRkcmVzcztcblxuICAgIC8vIGdldCB0aGUgVG9rZW5CYWxhbmNlTWFwIGZyb20gdGhpcyBpbnB1dFxuICAgIGNvbnN0IHRva2VuQmFsYW5jZU1hcCA9IFRva2VuQmFsYW5jZU1hcC5mcm9tVHhJbnB1dChpbnB1dCk7XG4gICAgLy8gbWVyZ2UgaXQgd2l0aCBleGlzdGluZyBUb2tlbkJhbGFuY2VNYXAgZm9yIHRoZSBhZGRyZXNzXG4gICAgYWRkcmVzc0JhbGFuY2VNYXBbYWRkcmVzc10gPSBUb2tlbkJhbGFuY2VNYXAubWVyZ2UoYWRkcmVzc0JhbGFuY2VNYXBbYWRkcmVzc10sIHRva2VuQmFsYW5jZU1hcCk7XG4gIH1cblxuICBmb3IgKGNvbnN0IG91dHB1dCBvZiBvdXRwdXRzKSB7XG4gICAgY29uc3QgYWRkcmVzcyA9IG91dHB1dC5kZWNvZGVkLmFkZHJlc3M7XG5cbiAgICAvLyBnZXQgdGhlIFRva2VuQmFsYW5jZU1hcCBmcm9tIHRoaXMgb3V0cHV0XG4gICAgY29uc3QgdG9rZW5CYWxhbmNlTWFwID0gVG9rZW5CYWxhbmNlTWFwLmZyb21UeE91dHB1dChvdXRwdXQpO1xuXG4gICAgLy8gbWVyZ2UgaXQgd2l0aCBleGlzdGluZyBUb2tlbkJhbGFuY2VNYXAgZm9yIHRoZSBhZGRyZXNzXG4gICAgYWRkcmVzc0JhbGFuY2VNYXBbYWRkcmVzc10gPSBUb2tlbkJhbGFuY2VNYXAubWVyZ2UoYWRkcmVzc0JhbGFuY2VNYXBbYWRkcmVzc10sIHRva2VuQmFsYW5jZU1hcCk7XG4gIH1cblxuICByZXR1cm4gYWRkcmVzc0JhbGFuY2VNYXA7XG59O1xuXG4vKipcbiAqIEdldHMgYSBsaXN0IG9mIHRva2VucyBmcm9tIGEgbGlzdCBvZiBpbnB1dHMgYW5kIG91dHB1dHNcbiAqXG4gKiBAcGFyYW0gaW5wdXRzIC0gVGhlIHRyYW5zYWN0aW9uIGlucHV0c1xuICogQHBhcmFtIG91dHB1dHMgLSBUaGUgdHJhbnNhY3Rpb24gb3V0cHV0c1xuICogQHJldHVybnMgQSBsaXN0IG9mIHRva2VucyBwcmVzZW50IGluIHRoZSBpbnB1dHMgYW5kIG91dHB1dHNcbiAqL1xuZXhwb3J0IGNvbnN0IGdldFRva2VuTGlzdEZyb21JbnB1dHNBbmRPdXRwdXRzID0gKGlucHV0czogVHhJbnB1dFtdLCBvdXRwdXRzOiBUeE91dHB1dFdpdGhJbmRleFtdKTogc3RyaW5nW10gPT4ge1xuICBjb25zdCB0b2tlbklkcyA9IG5ldyBTZXQ8c3RyaW5nPihbXSk7XG5cbiAgZm9yIChjb25zdCBpbnB1dCBvZiBpbnB1dHMpIHtcbiAgICB0b2tlbklkcy5hZGQoaW5wdXQudG9rZW4pO1xuICB9XG5cbiAgZm9yIChjb25zdCBvdXRwdXQgb2Ygb3V0cHV0cykge1xuICAgIHRva2VuSWRzLmFkZChvdXRwdXQudG9rZW4pO1xuICB9XG5cbiAgcmV0dXJuIFsuLi50b2tlbklkc107XG59O1xuXG4vKipcbiAqIEdldCB0aGUgbWFwIG9mIHRva2VuIGJhbGFuY2VzIGZvciBlYWNoIHdhbGxldC5cbiAqXG4gKiBAcmVtYXJrc1xuICogRGlmZmVyZW50IGFkZHJlc3NlcyBjYW4gYmVsb25nIHRvIHRoZSBzYW1lIHdhbGxldCwgc28gdGhpcyBmdW5jdGlvbiBtZXJnZXMgdGhlaXJcbiAqIHRva2VuIGJhbGFuY2VzLlxuICpcbiAqIEBleGFtcGxlXG4gKiBSZXR1cm4gbWFwIGhhcyB0aGlzIGZvcm1hdDpcbiAqIGBgYFxuICoge1xuICogICB3YWxsZXQxOiB7dG9rZW4xOiBiYWxhbmNlMSwgdG9rZW4yOiBiYWxhbmNlMn0sXG4gKiAgIHdhbGxldDI6IHt0b2tlbjE6IGJhbGFuY2UzfVxuICogfVxuICogYGBgXG4gKlxuICogQHBhcmFtIGFkZHJlc3NXYWxsZXRNYXAgLSBNYXAgb2YgYWRkcmVzc2VzIGFuZCBjb3JyZXNwb25kaW5nIHdhbGxldHNcbiAqIEBwYXJhbSBhZGRyZXNzQmFsYW5jZU1hcCAtIE1hcCBvZiBhZGRyZXNzZXMgYW5kIGNvcnJlc3BvbmRpbmcgdG9rZW4gYmFsYW5jZXNcbiAqIEByZXR1cm5zIEEgbWFwIG9mIHdhbGxldCBpZHMgYW5kIGl0cyB0b2tlbiBiYWxhbmNlc1xuICovXG5leHBvcnQgY29uc3QgZ2V0V2FsbGV0QmFsYW5jZU1hcCA9IChcbiAgYWRkcmVzc1dhbGxldE1hcDogU3RyaW5nTWFwPFdhbGxldD4sXG4gIGFkZHJlc3NCYWxhbmNlTWFwOiBTdHJpbmdNYXA8VG9rZW5CYWxhbmNlTWFwPixcbik6IFN0cmluZ01hcDxUb2tlbkJhbGFuY2VNYXA+ID0+IHtcbiAgY29uc3Qgd2FsbGV0QmFsYW5jZU1hcCA9IHt9O1xuICBmb3IgKGNvbnN0IFthZGRyZXNzLCBiYWxhbmNlTWFwXSBvZiBPYmplY3QuZW50cmllcyhhZGRyZXNzQmFsYW5jZU1hcCkpIHtcbiAgICBjb25zdCB3YWxsZXQgPSBhZGRyZXNzV2FsbGV0TWFwW2FkZHJlc3NdO1xuICAgIGNvbnN0IHdhbGxldElkID0gd2FsbGV0ICYmIHdhbGxldC53YWxsZXRJZDtcblxuICAgIC8vIGlmIHRoaXMgYWRkcmVzcyBpcyBub3QgZnJvbSBhIHN0YXJ0ZWQgd2FsbGV0LCBpZ25vcmVcbiAgICBpZiAoIXdhbGxldElkKSBjb250aW51ZTtcblxuICAgIHdhbGxldEJhbGFuY2VNYXBbd2FsbGV0SWRdID0gVG9rZW5CYWxhbmNlTWFwLm1lcmdlKHdhbGxldEJhbGFuY2VNYXBbd2FsbGV0SWRdLCBiYWxhbmNlTWFwKTtcbiAgfVxuICByZXR1cm4gd2FsbGV0QmFsYW5jZU1hcDtcbn07XG5cbi8qKlxuICogR2V0IGEgd2FsbGV0J3MgYmFsYW5jZSwgdGFraW5nIGludG8gYWNjb3VudCBhbnkgZXhpc3RpbmcgdGltZWxvY2tzLlxuICpcbiAqIEByZW1hcmtzXG4gKiBJZiBhbnkgdGltZWxvY2sgaGFzIGV4cGlyZWQsIGRhdGFiYXNlIHRhYmxlcyB3aWxsIGJlIHJlZnJlc2hlZCBiZWZvcmUgcmV0dXJuaW5nIHRoZSBiYWxhbmNlcy5cbiAqXG4gKiBAcGFyYW0gbXlzcWwgLSBEYXRhYmFzZSBjb25uZWN0aW9uXG4gKiBAcGFyYW0gbm93IC0gQ3VycmVudCB0aW1lc3RhbXBcbiAqIEBwYXJhbSB3YWxsZXRJZCAtIFRoZSB3YWxsZXQgaWRcbiAqIEBwYXJhbSB0b2tlbklkcyAtIEEgbGlzdCBvZiB0b2tlbiBpZHNcbiAqL1xuZXhwb3J0IGNvbnN0IGdldFdhbGxldEJhbGFuY2VzID0gYXN5bmMgKFxuICBteXNxbDogU2VydmVybGVzc015c3FsLFxuICBub3c6IG51bWJlcixcbiAgd2FsbGV0SWQ6IHN0cmluZyxcbiAgdG9rZW5JZHM6IHN0cmluZ1tdID0gW10sXG4pOiBQcm9taXNlPFdhbGxldFRva2VuQmFsYW5jZVtdPiA9PiB7XG4gIGxldCBiYWxhbmNlcyA9IGF3YWl0IGRiR2V0V2FsbGV0QmFsYW5jZXMobXlzcWwsIHdhbGxldElkLCB0b2tlbklkcyk7XG5cbiAgLy8gaWYgYW55IG9mIHRoZSBiYWxhbmNlcycgdGltZWxvY2sgaGFzIGV4cGlyZWQsIHVwZGF0ZSB0aGUgdGFibGVzIGJlZm9yZSByZXR1cm5pbmdcbiAgY29uc3QgcmVmcmVzaEJhbGFuY2VzID0gYmFsYW5jZXMuc29tZSgodGIpID0+IHtcbiAgICBpZiAodGIuYmFsYW5jZS5sb2NrRXhwaXJlcyAmJiB0Yi5iYWxhbmNlLmxvY2tFeHBpcmVzIDw9IG5vdykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfSk7XG5cbiAgaWYgKHJlZnJlc2hCYWxhbmNlcykge1xuICAgIGNvbnN0IGN1cnJlbnRIZWlnaHQgPSBhd2FpdCBnZXRMYXRlc3RIZWlnaHQobXlzcWwpO1xuICAgIGNvbnN0IHV0eG9zID0gYXdhaXQgZ2V0V2FsbGV0VW5sb2NrZWRVdHhvcyhteXNxbCwgd2FsbGV0SWQsIG5vdywgY3VycmVudEhlaWdodCk7XG4gICAgYXdhaXQgdW5sb2NrVXR4b3MobXlzcWwsIHV0eG9zLCB0cnVlKTtcbiAgICBiYWxhbmNlcyA9IGF3YWl0IGRiR2V0V2FsbGV0QmFsYW5jZXMobXlzcWwsIHdhbGxldElkLCB0b2tlbklkcyk7XG4gIH1cbiAgcmV0dXJuIGJhbGFuY2VzO1xufTtcblxuLyoqXG4gKiBVcGRhdGVzIHRoZSB3YWxsZXQtbGliIGNvbnN0YW50cyBpZiBuZWVkZWQuXG4gKlxuICogQHJldHVybnMge1Byb21pc2U8dm9pZD59IEEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIHdhbGxldC1saWIgY29uc3RhbnRzIGhhdmUgYmVlbiBzZXQuXG4gKi9cbmV4cG9ydCBjb25zdCBtYXliZVJlZnJlc2hXYWxsZXRDb25zdGFudHMgPSBhc3luYyAobXlzcWw6IFNlcnZlcmxlc3NNeXNxbCk6IFByb21pc2U8dm9pZD4gPT4ge1xuICBjb25zdCBsYXN0VmVyc2lvbkRhdGE6IEZ1bGxOb2RlVmVyc2lvbkRhdGEgPSBhd2FpdCBnZXRWZXJzaW9uRGF0YShteXNxbCk7XG4gIGNvbnN0IG5vdyA9IGdldFVuaXhUaW1lc3RhbXAoKTtcblxuICBpZiAoIWxhc3RWZXJzaW9uRGF0YSB8fCBub3cgLSBsYXN0VmVyc2lvbkRhdGEudGltZXN0YW1wID4gVkVSU0lPTl9DSEVDS19NQVhfRElGRikge1xuICAgIC8vIFF1ZXJ5IGFuZCB1cGRhdGUgdmVyc2lvbnNcbiAgICBjb25zdCBhcGlSZXNwb25zZSA9IGF3YWl0IGhhdGhvckxpYi52ZXJzaW9uLmNoZWNrQXBpVmVyc2lvbigpO1xuICAgIGNvbnN0IHZlcnNpb25EYXRhOiBGdWxsTm9kZVZlcnNpb25EYXRhID0ge1xuICAgICAgdGltZXN0YW1wOiBub3csXG4gICAgICB2ZXJzaW9uOiBhcGlSZXNwb25zZS52ZXJzaW9uLFxuICAgICAgbmV0d29yazogYXBpUmVzcG9uc2UubmV0d29yayxcbiAgICAgIG1pbldlaWdodDogYXBpUmVzcG9uc2UubWluX3dlaWdodCxcbiAgICAgIG1pblR4V2VpZ2h0OiBhcGlSZXNwb25zZS5taW5fdHhfd2VpZ2h0LFxuICAgICAgbWluVHhXZWlnaHRDb2VmZmljaWVudDogYXBpUmVzcG9uc2UubWluX3R4X3dlaWdodF9jb2VmZmljaWVudCxcbiAgICAgIG1pblR4V2VpZ2h0SzogYXBpUmVzcG9uc2UubWluX3R4X3dlaWdodF9rLFxuICAgICAgdG9rZW5EZXBvc2l0UGVyY2VudGFnZTogYXBpUmVzcG9uc2UudG9rZW5fZGVwb3NpdF9wZXJjZW50YWdlLFxuICAgICAgcmV3YXJkU3BlbmRNaW5CbG9ja3M6IGFwaVJlc3BvbnNlLnJld2FyZF9zcGVuZF9taW5fYmxvY2tzLFxuICAgICAgbWF4TnVtYmVySW5wdXRzOiBhcGlSZXNwb25zZS5tYXhfbnVtYmVyX2lucHV0cyxcbiAgICAgIG1heE51bWJlck91dHB1dHM6IGFwaVJlc3BvbnNlLm1heF9udW1iZXJfb3V0cHV0cyxcbiAgICB9O1xuXG4gICAgYXdhaXQgdXBkYXRlVmVyc2lvbkRhdGEobXlzcWwsIHZlcnNpb25EYXRhKTtcbiAgfSBlbHNlIHtcbiAgICBoYXRob3JMaWIudHJhbnNhY3Rpb24udXBkYXRlVHJhbnNhY3Rpb25XZWlnaHRDb25zdGFudHMoXG4gICAgICBsYXN0VmVyc2lvbkRhdGEubWluVHhXZWlnaHQsXG4gICAgICBsYXN0VmVyc2lvbkRhdGEubWluVHhXZWlnaHRDb2VmZmljaWVudCxcbiAgICAgIGxhc3RWZXJzaW9uRGF0YS5taW5UeFdlaWdodEssXG4gICAgKTtcbiAgICBoYXRob3JMaWIudG9rZW5zLnVwZGF0ZURlcG9zaXRQZXJjZW50YWdlKGxhc3RWZXJzaW9uRGF0YS50b2tlbkRlcG9zaXRQZXJjZW50YWdlKTtcbiAgICBoYXRob3JMaWIudHJhbnNhY3Rpb24udXBkYXRlTWF4SW5wdXRzQ29uc3RhbnQobGFzdFZlcnNpb25EYXRhLm1heE51bWJlcklucHV0cyk7XG4gICAgaGF0aG9yTGliLnRyYW5zYWN0aW9uLnVwZGF0ZU1heE91dHB1dHNDb25zdGFudChsYXN0VmVyc2lvbkRhdGEubWF4TnVtYmVyT3V0cHV0cyk7XG4gICAgaGF0aG9yTGliLndhbGxldC51cGRhdGVSZXdhcmRMb2NrQ29uc3RhbnQobGFzdFZlcnNpb25EYXRhLnJld2FyZFNwZW5kTWluQmxvY2tzKTtcbiAgfVxufTtcblxuLyoqXG4gKiBTZWFyY2hlcyBvdXIgYmxvY2tzIGRhdGFiYXNlIGZvciB0aGUgbGFzdCBibG9jayB0aGF0IGlzIG5vdCB2b2lkZWQuXG4gKlxuICogQHBhcmFtIG15c3FsIC0gRGF0YWJhc2UgY29ubmVjdGlvblxuICpcbiAqIEByZXR1cm5zIEEgQmxvY2sgaW5zdGFuY2Ugd2l0aCB0aGUgbGFzdCBibG9jayB0aGF0IGlzIG5vdCB2b2lkZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBzZWFyY2hGb3JMYXRlc3RWYWxpZEJsb2NrID0gYXN5bmMgKG15c3FsOiBTZXJ2ZXJsZXNzTXlzcWwpOiBQcm9taXNlPEJsb2NrPiA9PiB7XG4gIC8vIEdldCBvdXIgY3VycmVudCBiZXN0IGJsb2NrLlxuICBjb25zdCBsYXRlc3RIZWlnaHQ6IG51bWJlciA9IGF3YWl0IGdldExhdGVzdEhlaWdodChteXNxbCk7XG4gIGNvbnN0IGJlc3RCbG9jazogQmxvY2sgPSBhd2FpdCBnZXRCbG9ja0J5SGVpZ2h0KG15c3FsLCBsYXRlc3RIZWlnaHQpO1xuXG4gIGxldCBzdGFydCA9IDA7XG4gIGxldCBlbmQgPSBiZXN0QmxvY2suaGVpZ2h0O1xuICBsZXQgbGF0ZXN0VmFsaWRCbG9jayA9IGJlc3RCbG9jaztcblxuICB3aGlsZSAoc3RhcnQgPD0gZW5kKSB7XG4gICAgY29uc3QgbWlkSGVpZ2h0ID0gTWF0aC5mbG9vcigoc3RhcnQgKyBlbmQpIC8gMik7XG5cbiAgICAvLyBDaGVjayBpZiB0aGUgYmxvY2sgYXQgbWlkZGxlIHBvc2l0aW9uIGlzIHZvaWRlZFxuICAgIGNvbnN0IG1pZGRsZUJsb2NrOiBCbG9jayA9IGF3YWl0IGdldEJsb2NrQnlIZWlnaHQobXlzcWwsIG1pZEhlaWdodCk7XG4gICAgY29uc3QgW2lzVm9pZGVkXSA9IGF3YWl0IGlzVHhWb2lkZWQobWlkZGxlQmxvY2sudHhJZCk7XG5cbiAgICBpZiAoIWlzVm9pZGVkKSB7XG4gICAgICAvLyBOb3Qgdm9pZGVkLCBkaXNjYXJkIGxlZnQgaGFsZiBhcyBhbGwgYmxvY2tzIHRvIHRoZSBsZWZ0IHNob3VsZFxuICAgICAgLy8gYmUgdmFsaWQsIHRoZSByZW9yZyBoYXBwZW5lZCBhZnRlciB0aGlzIGhlaWdodC5cbiAgICAgIGxhdGVzdFZhbGlkQmxvY2sgPSBtaWRkbGVCbG9jaztcbiAgICAgIHN0YXJ0ID0gbWlkSGVpZ2h0ICsgMTtcbiAgICB9IGVsc2Uge1xuICAgICAgZW5kID0gbWlkSGVpZ2h0IC0gMTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbGF0ZXN0VmFsaWRCbG9jaztcbn07XG5cbi8qXG4gKiBSZWNlaXZlcyBhIGxpc3Qgb2YgdHJhbnNhY3Rpb25zIHRoYXQgYXJlIGJlaW5nIHZvaWRlZCBvbiBhIHJlb3JnIGFuZCByZXR1cm5zIGEgbGlzdCBvZiB0cmFuc2FjdGlvbnMgdGhhdCBzcGVuZCB0aGVtLlxuICpcbiAqIEFsc28gbWFya3Mgd2FsbGV0IGFuZCBhZGRyZXNzZXMgaGlzdG9yeSB0aGF0IHVzZSB0aGlzIHRyYW5zYWN0aW9uIGFzIHZvaWRlZFxuICpcbiAqIEBwYXJhbSBteXNxbCAtIERhdGFiYXNlIGNvbm5lY3Rpb25cbiAqIEBwYXJhbSB0eHMgLSBMaXN0IG9mIHZvaWRlZCB0cmFuc2FjdGlvbnMgdG8gaGFuZGxlXG4gKlxuICogQHJldHVybnMgQSBuZXcgbGlzdCBvZiB2b2lkZWQgdHJhbnNhY3Rpb25zIHRoYXQgYXJlIGxpbmtlZCB0byB0aGUgcmVjZWl2ZWQgbGlzdCBhbmQgYSBsaXN0IG9mIHR4X291dHB1dHMgYWZmZWN0ZWRcbiAqIGJ5IHRoaXMgaXRlcmF0aW9uLlxuICovXG5leHBvcnQgY29uc3QgaGFuZGxlVm9pZGVkVHhMaXN0ID0gYXN5bmMgKG15c3FsOiBTZXJ2ZXJsZXNzTXlzcWwsIGxvZ2dlcjogTG9nZ2VyLCB0eHM6IFR4W10pOiBQcm9taXNlPFtUeFtdLCBEYlR4T3V0cHV0W11dPiA9PiB7XG4gIGxvZ2dlci5kZWJ1ZyhgU2V0dGluZyAke3R4cy5sZW5ndGh9IHRyYW5zYWN0aW9ucyBhcyB2b2lkZWQuYCwge1xuICAgIHRyYW5zYWN0aW9uczogdHhzLFxuICB9KTtcbiAgYXdhaXQgbWFya1R4c0FzVm9pZGVkKG15c3FsLCB0eHMpO1xuICBsb2dnZXIuZGVidWcoYFNldHRpbmcgV2FsbGV0VHhIaXN0b3J5IGFzIHZvaWRlZCBmcm9tICR7dHhzLmxlbmd0aH0gdHJhbnNhY3Rpb25zLmApO1xuICBhd2FpdCBtYXJrV2FsbGV0VHhIaXN0b3J5QXNWb2lkZWQobXlzcWwsIHR4cyk7XG4gIGxvZ2dlci5kZWJ1ZyhgU2V0dGluZyBBZGRyZXNzVHhIaXN0b3J5IGFzIHZvaWRlZCBmcm9tICR7dHhzLmxlbmd0aH0gdHJhbnNhY3Rpb25zLmApO1xuICBhd2FpdCBtYXJrQWRkcmVzc1R4SGlzdG9yeUFzVm9pZGVkKG15c3FsLCB0eHMpO1xuXG4gIC8vIHR4IG91dHB1dHMgYXJlIHRoZSBsaXN0IG9mIGFsbCBvdXRwdXRzIGluIHRoZSB0cmFuc2FjdGlvbiBsaXN0XG4gIGNvbnN0IHR4T3V0cHV0czogRGJUeE91dHB1dFtdID0gYXdhaXQgZ2V0VHhPdXRwdXRzKG15c3FsLCB0eHMpO1xuXG4gIGxvZ2dlci5kZWJ1ZyhgRmV0Y2hlZCAke3R4T3V0cHV0cy5sZW5ndGh9IHV0eG9zIGZyb20gdGhlIHZvaWRlZCB0cmFuc2FjdGlvbiBsaXN0YCwge1xuICAgIHR4T3V0cHV0cyxcbiAgfSk7XG5cbiAgLy8gZ2V0IG91dHB1dHMgdGhhdCB3ZXJlIHNwZW50IGluIHR4T3V0cHV0c1xuICBjb25zdCB0eE91dHB1dHNUeElkczogU2V0PHN0cmluZz4gPSB0eE91dHB1dHMucmVkdWNlKFxuICAgIChhY2M6IFNldDxzdHJpbmc+LCB0eE91dHB1dDogRGJUeE91dHB1dCkgPT4gYWNjLmFkZCh0eE91dHB1dC50eElkKSxcbiAgICBuZXcgU2V0PHN0cmluZz4oKSxcbiAgKTtcblxuICAvLyBzcGVudCBvdXRwdXRzIGFyZSB0aGUgbGlzdCBvZiBvdXRwdXRzIHRoYXQgd2VyZSBzcGVudCBieSB0aG9zZSB0eF9vdXRwdXRzXG4gIGNvbnN0IHNwZW50T3V0cHV0czogRGJUeE91dHB1dFtdID0gYXdhaXQgZ2V0VHhPdXRwdXRzQnlTcGVudChteXNxbCwgWy4uLnR4T3V0cHV0c1R4SWRzXSk7XG5cbiAgLy8gdW5zcGVuZCB0aGVtIGFzIHRoZSB0eF9vdXRwdXRzIHRoYXQgc3BlbnQgdGhlbSBhcmUgbm93IHZvaWRlZFxuICBpZiAoc3BlbnRPdXRwdXRzLmxlbmd0aCA+IDApIHtcbiAgICBsb2dnZXIuZGVidWcoYFVuc3BlbmRpbmcgJHtzcGVudE91dHB1dHMubGVuZ3RofSB0eF9vdXRwdXRzLmAsIHtcbiAgICAgIHR4T3V0cHV0czogc3BlbnRPdXRwdXRzLFxuICAgIH0pO1xuICAgIGF3YWl0IHVuc3BlbmRVdHhvcyhteXNxbCwgWy4uLnNwZW50T3V0cHV0c10pO1xuICB9XG5cbiAgY29uc3QgYWZmZWN0ZWRVdHhvTGlzdCA9IFsuLi50eE91dHB1dHMsIC4uLnNwZW50T3V0cHV0c107XG5cbiAgLy8gbWFyayB0aGUgdHhfb3V0cHV0cyBmcm9tIHRoZSByZWNlaXZlZCB0eCBsaXN0IGFzIHZvaWRlZFxuICBsb2dnZXIuZGVidWcoYFNldHRpbmcgJHt0eE91dHB1dHMubGVuZ3RofSB0eF9vdXRwdXRzIGFzIHZvaWRlZC5gLCB7XG4gICAgdHhPdXRwdXRzLFxuICB9KTtcbiAgYXdhaXQgbWFya1V0eG9zQXNWb2lkZWQobXlzcWwsIHR4T3V0cHV0cyk7XG5cbiAgLy8gZ2V0IHRoZSBsaXN0IG9mIHR4IGlkcyB0aGF0IHNwZW5kIHRoZSB0eF9vdXRwdXRzIGxpc3QgZnJvbSB0aGUgcmVjZWl2ZWQgdHggbGlzdFxuICBjb25zdCB0eElkcyA9IHR4T3V0cHV0cy5yZWR1Y2UoKGFjYzogU2V0PHN0cmluZz4sIHV0eG86IERiVHhPdXRwdXQpID0+IHtcbiAgICBpZiAodXR4by5zcGVudEJ5KSB7XG4gICAgICBhY2MuYWRkKHV0eG8uc3BlbnRCeSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFjYztcbiAgfSwgbmV3IFNldDxzdHJpbmc+KCkpO1xuXG4gIC8vIGZldGNoIGFsbCB0cmFuc2FjdGlvbnMgdGhhdCBzcGVuZCB0aG9zZSB2b2lkZWQgdHhzIG91dHB1dHM6XG4gIGNvbnN0IG5ld1R4cyA9IGF3YWl0IGdldFRyYW5zYWN0aW9uc0J5SWQobXlzcWwsIFsuLi50eElkc10pO1xuXG4gIGxvZ2dlci5kZWJ1ZyhgRmV0Y2hlZCAke25ld1R4cy5sZW5ndGh9IHRyYW5zYWN0aW9ucyB0aGF0IHNwZW5kIHRoZSB2b2lkZWQgdHggb3V0cHV0cyBsaXN0YCwge1xuICAgIHRyYW5zYWN0aW9uczogbmV3VHhzLFxuICB9KTtcblxuICByZXR1cm4gW25ld1R4cywgYWZmZWN0ZWRVdHhvTGlzdF07XG59O1xuXG4vKipcbiAqIEhhbmRsZXMgYSB2b2lkZWQgdHJhbnNhY3Rpb24gYnkgcmUtY2FsY3VsYXRpbmcgdGhlIGJhbGFuY2VzIGZvciBhbGwgYWZmZWN0ZWQgYWRkcmVzc2VzIGFmdGVyXG4gKiByZW1vdmluZyB0aGUgdHhcbiAqXG4gKiBAcGFyYW0gbXlzcWwgLSBEYXRhYmFzZSBjb25uZWN0aW9uXG4gKiBAcGFyYW0gdHggLSBUaGUgdm9pZGVkIHRyYW5zYWN0aW9uIHRvIHJlbW92ZVxuICovXG5leHBvcnQgY29uc3QgaGFuZGxlVm9pZGVkID0gYXN5bmMgKG15c3FsOiBTZXJ2ZXJsZXNzTXlzcWwsIGxvZ2dlcjogTG9nZ2VyLCB0eDogVHgpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgbGV0IHR4czogVHhbXSA9IFt0eF07XG4gIGxldCBhZmZlY3RlZFV0eG9MaXN0OiBEYlR4T3V0cHV0W10gPSBbXTtcblxuICB3aGlsZSAodHhzLmxlbmd0aCA+IDApIHtcbiAgICBjb25zdCBbbmV3VHhzLCBuZXdBZmZlY3RlZFV0eG9MaXN0XSA9IGF3YWl0IGhhbmRsZVZvaWRlZFR4TGlzdChteXNxbCwgbG9nZ2VyLCB0eHMpO1xuICAgIHR4cyA9IG5ld1R4cztcbiAgICBhZmZlY3RlZFV0eG9MaXN0ID0gWy4uLmFmZmVjdGVkVXR4b0xpc3QsIC4uLm5ld0FmZmVjdGVkVXR4b0xpc3RdO1xuICB9XG5cbiAgLy8gZmV0Y2ggYWxsIGFkZHJlc3NlcyBhbmQgdHJhbnNhY3Rpb25zIGFmZmVjdGVkIGJ5IHRoZSB2b2lkZWQgdHJhbnNhY3Rpb25cbiAgY29uc3QgW2FmZmVjdGVkQWRkcmVzc2VzLCBhZmZlY3RlZFR4SWRzXSA9IGFmZmVjdGVkVXR4b0xpc3QucmVkdWNlKFxuICAgIChhY2M6IFtTZXQ8c3RyaW5nPiwgU2V0PHN0cmluZz5dLCB1dHhvOiBEYlR4T3V0cHV0KSA9PiB7XG4gICAgICBhY2NbMF0uYWRkKHV0eG8uYWRkcmVzcyk7XG4gICAgICBhY2NbMV0uYWRkKHV0eG8udHhJZCk7XG5cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSxcbiAgICBbbmV3IFNldDxzdHJpbmc+KCksIG5ldyBTZXQ8c3RyaW5nPigpXSxcbiAgKTtcblxuICBpZiAoYWZmZWN0ZWRBZGRyZXNzZXMuc2l6ZSA+IDApIHtcbiAgICBjb25zdCBhZGRyZXNzZXMgPSBbLi4uYWZmZWN0ZWRBZGRyZXNzZXNdO1xuXG4gICAgbG9nZ2VyLmRlYnVnKGBSZWJ1aWxkaW5nIGJhbGFuY2VzIGZvciAke2FkZHJlc3Nlcy5sZW5ndGh9IGFkZHJlc3Nlcy5gLCB7XG4gICAgICBhZGRyZXNzZXMsXG4gICAgfSk7XG4gICAgbG9nZ2VyLmRlYnVnKGBSZWJ1aWxkaW5nIHR4IGNvdW50IGZyb20gJHthZmZlY3RlZFR4SWRzLnNpemV9IHRyYW5zYWN0aW9uc2AsIHtcbiAgICAgIGFmZmVjdGVkVHhJZHMsXG4gICAgfSk7XG4gICAgYXdhaXQgcmVidWlsZEFkZHJlc3NCYWxhbmNlc0Zyb21VdHhvcyhteXNxbCwgYWRkcmVzc2VzLCBbLi4uYWZmZWN0ZWRUeElkc10pO1xuICAgIGF3YWl0IHZhbGlkYXRlQWRkcmVzc0JhbGFuY2VzKG15c3FsLCBhZGRyZXNzZXMpO1xuICB9XG5cbiAgbG9nZ2VyLmRlYnVnKCdIYW5kbGUgdm9pZGVkIHR4IGlzIGRvbmUuJyk7XG59O1xuXG5leHBvcnQgY29uc3QgdmFsaWRhdGVBZGRyZXNzQmFsYW5jZXMgPSBhc3luYyAobXlzcWw6IFNlcnZlcmxlc3NNeXNxbCwgYWRkcmVzc2VzOiBzdHJpbmdbXSk6IFByb21pc2U8dm9pZD4gPT4ge1xuICBjb25zdCBhZGRyZXNzQmFsYW5jZXM6IEFkZHJlc3NCYWxhbmNlW10gPSBhd2FpdCBmZXRjaEFkZHJlc3NCYWxhbmNlKG15c3FsLCBhZGRyZXNzZXMpO1xuICBjb25zdCBhZGRyZXNzVHhIaXN0b3J5U3VtczogQWRkcmVzc1RvdGFsQmFsYW5jZVtdID0gYXdhaXQgZmV0Y2hBZGRyZXNzVHhIaXN0b3J5U3VtKG15c3FsLCBhZGRyZXNzZXMpO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYWRkcmVzc1R4SGlzdG9yeVN1bXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBhZGRyZXNzQmFsYW5jZTogQWRkcmVzc0JhbGFuY2UgPSBhZGRyZXNzQmFsYW5jZXNbaV07XG4gICAgY29uc3QgYWRkcmVzc1R4SGlzdG9yeVN1bTogQWRkcmVzc1RvdGFsQmFsYW5jZSA9IGFkZHJlc3NUeEhpc3RvcnlTdW1zW2ldO1xuXG4gICAgYXNzZXJ0LnN0cmljdEVxdWFsKGFkZHJlc3NCYWxhbmNlLnRva2VuSWQsIGFkZHJlc3NUeEhpc3RvcnlTdW0udG9rZW5JZCk7XG5cbiAgICAvLyBiYWxhbmNlcyBtdXN0IG1hdGNoXG4gICAgYXNzZXJ0LnN0cmljdEVxdWFsKGFkZHJlc3NCYWxhbmNlLnVubG9ja2VkQmFsYW5jZSArIGFkZHJlc3NCYWxhbmNlLmxvY2tlZEJhbGFuY2UsIGFkZHJlc3NUeEhpc3RvcnlTdW0uYmFsYW5jZSk7XG4gIH1cbn07XG5cbi8qKlxuICogSGFuZGxlcyBhIHJlb3JnIGJ5IGZpbmRpbmcgdGhlIGxhc3QgdmFsaWQgYmxvY2sgb24gdGhlIHNlcnZpY2UncyBkYXRhYmFzZSBhbmRcbiAqIHJlbW92aW5nIHRyYW5zYWN0aW9ucyBhbmQgdHhfb3V0cHV0cyBiZWZvcmUgcmUtY2FsY3VsYXRpbmcgdGhlIGFkZHJlc3MgYmFsYW5jZXMuXG4gKlxuICogQHBhcmFtIG15c3FsIC0gRGF0YWJhc2UgY29ubmVjdGlvblxuICpcbiAqIEByZXR1cm5zIFRoZSBuZXcgYmVzdCBibG9jayBoZWlnaHRcbiAqL1xuZXhwb3J0IGNvbnN0IGhhbmRsZVJlb3JnID0gYXN5bmMgKG15c3FsOiBTZXJ2ZXJsZXNzTXlzcWwsIGxvZ2dlcjogTG9nZ2VyKTogUHJvbWlzZTxudW1iZXI+ID0+IHtcbiAgY29uc3QgeyBoZWlnaHQgfSA9IGF3YWl0IHNlYXJjaEZvckxhdGVzdFZhbGlkQmxvY2sobXlzcWwpO1xuICBjb25zdCBjdXJyZW50SGVpZ2h0ID0gYXdhaXQgZ2V0TGF0ZXN0SGVpZ2h0KG15c3FsKTtcblxuICBsb2dnZXIuZGVidWcoYEhhbmRsaW5nIHJlb3JnLiBPdXIgbGF0ZXN0IHZhbGlkIGJsb2NrIGlzICR7aGVpZ2h0fSBhbmQgb3VyIGhpZ2hlc3QgYmxvY2sgaGVpZ2h0IGlzICR7Y3VycmVudEhlaWdodH1gLCB7XG4gICAgaGVpZ2h0LFxuICAgIGN1cnJlbnRIZWlnaHQsXG4gIH0pO1xuXG4gIGlmICgoY3VycmVudEhlaWdodCAtIGhlaWdodCkgPiBXQVJOX01BWF9SRU9SR19TSVpFKSB7XG4gICAgbG9nZ2VyLmVycm9yKGBBIHJlb3JnIHdpdGggJHtjdXJyZW50SGVpZ2h0IC0gaGVpZ2h0fSBibG9ja3MgaGFzIGJlZW4gZGV0ZWN0ZWRgKTtcbiAgICBhd2FpdCBhZGRBbGVydChcbiAgICAgICdCaWcgcmVvcmcgZGV0ZWN0ZWQnLFxuICAgICAgYEEgcmVvcmcgd2l0aCAke2N1cnJlbnRIZWlnaHQgLSBoZWlnaHR9IGJsb2NrcyBoYXMgYmVlbiBkZXRlY3RlZGAsXG4gICAgICBTZXZlcml0eS5NSU5PUixcbiAgICAgIHsgd2FsbGV0U2VydmljZUhlaWdodDogY3VycmVudEhlaWdodCwgZnVsbE5vZGVIZWlnaHQ6IGhlaWdodCB9LFxuICAgICk7XG4gIH1cblxuICAvLyBmZXRjaCBhbGwgYmxvY2sgdHJhbnNhY3Rpb25zIHdoZXJlIGhlaWdodCA+IGxhdGVzdFZhbGlkQmxvY2tcbiAgY29uc3QgYWxsVHhzQWZ0ZXJIZWlnaHQgPSBhd2FpdCBnZXRUeHNBZnRlckhlaWdodChteXNxbCwgaGVpZ2h0KTtcbiAgbGV0IHR4czogVHhbXSA9IGFsbFR4c0FmdGVySGVpZ2h0LmZpbHRlcigodHgpID0+IFtcbiAgICBoYXRob3JMaWIuY29uc3RhbnRzLkJMT0NLX1ZFUlNJT04sXG4gICAgaGF0aG9yTGliLmNvbnN0YW50cy5NRVJHRURfTUlORURfQkxPQ0tfVkVSU0lPTixcbiAgXS5pbmRleE9mKHR4LnZlcnNpb24pID4gLTEpO1xuXG4gIC8vIHJlbW92ZSBibG9ja3Mgd2hlcmUgaGVpZ2h0ID4gbGF0ZXN0VmFsaWRCbG9jayBhcyB3ZSBhbHJlYWR5IGhhdmUgdGhlbSBvbiBtZW1vcnlcbiAgYXdhaXQgZGVsZXRlQmxvY2tzQWZ0ZXJIZWlnaHQobXlzcWwsIGhlaWdodCk7XG5cbiAgbG9nZ2VyLmRlYnVnKCdSZW1vdmluZyB0cmFuc2FjdGlvbnMnLCB0eHMubWFwKCh0eCkgPT4gdHgudHhJZCkpO1xuXG4gIGxldCBhZmZlY3RlZFV0eG9MaXN0OiBEYlR4T3V0cHV0W10gPSBbXTtcblxuICAvKlxuICAgKiBIZXJlIHdlIG5lZWQgdG8gdHJhdmVyc2UgdGhlIERBRyBvZiBcImZ1bmRzXCIsIHN0YXJ0aW5nIGZyb20gdGhlIHZvaWRlZCB0eF9vdXRwdXRzIGZyb20gdGhlIGJsb2Nrc1xuICAgKiBhbmQgc3RvcHBpbmcgd2hlbiB0aGVyZSBhcmUgbm8gbW9yZSBsaW5rZWQgdHhfb3V0cHV0cyB2b2lkZWQuXG4gICAqXG4gICAqIFdlIGRvIHRoYXQgYnkgdXNpbmcgYSBCRlMsIHRoYXQgbXV0YXRlcyB0aGUgREFHIG9uIGV2ZXJ5IGl0ZXJhdGlvbiAoYnkgc2V0dGluZyB0aGUgdHJhbnNhY3Rpb25zXG4gICAqIGFzIHZvaWRlZCBvbiB0aGUgZGF0YWJhc2UpLlxuICAgKi9cbiAgd2hpbGUgKHR4cy5sZW5ndGggPiAwKSB7XG4gICAgY29uc3QgW25ld1R4cywgbmV3QWZmZWN0ZWRVdHhvTGlzdF0gPSBhd2FpdCBoYW5kbGVWb2lkZWRUeExpc3QobXlzcWwsIGxvZ2dlciwgdHhzKTtcblxuICAgIHR4cyA9IG5ld1R4cztcbiAgICBhZmZlY3RlZFV0eG9MaXN0ID0gWy4uLmFmZmVjdGVkVXR4b0xpc3QsIC4uLm5ld0FmZmVjdGVkVXR4b0xpc3RdO1xuICB9XG5cbiAgLy8gZ2V0IGFsbCByZW1haW5pbmcgdHhzIGFuZCBzZXQgaGVpZ2h0ID0gbnVsbCAobWVtcG9vbClcbiAgY29uc3QgcmVtYWluaW5nVHhzOiBUeFtdID0gYXdhaXQgZ2V0VHhzQWZ0ZXJIZWlnaHQobXlzcWwsIGhlaWdodCk7XG4gIGlmIChyZW1haW5pbmdUeHMubGVuZ3RoID4gMCkge1xuICAgIGxvZ2dlci5kZWJ1ZyhgU2V0dGluZyAke3JlbWFpbmluZ1R4cy5sZW5ndGh9IHVuY29uZmlybWVkIHRyYW5zYWN0aW9ucyB0byB0aGUgbWVtcG9vbCAoaGVpZ2h0ID0gTlVMTCkuYCwge1xuICAgICAgcmVtYWluaW5nVHhzLFxuICAgIH0pO1xuICAgIGF3YWl0IHJlbW92ZVR4c0hlaWdodChteXNxbCwgcmVtYWluaW5nVHhzKTtcbiAgfVxuXG4gIC8vIGZldGNoIGFsbCBhZGRyZXNzZXMgYW5kIHRyYW5zYWN0aW9ucyBhZmZlY3RlZCBieSB0aGUgcmVvcmdcbiAgY29uc3QgW2FmZmVjdGVkQWRkcmVzc2VzLCBhZmZlY3RlZFR4SWRzXSA9IGFmZmVjdGVkVXR4b0xpc3QucmVkdWNlKFxuICAgIChhY2M6IFtTZXQ8c3RyaW5nPiwgU2V0PHN0cmluZz5dLCB1dHhvOiBEYlR4T3V0cHV0KSA9PiB7XG4gICAgICBhY2NbMF0uYWRkKHV0eG8uYWRkcmVzcyk7XG4gICAgICBhY2NbMV0uYWRkKHV0eG8udHhJZCk7XG5cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSxcbiAgICBbbmV3IFNldDxzdHJpbmc+KCksIG5ldyBTZXQ8c3RyaW5nPigpXSxcbiAgKTtcblxuICBpZiAoYWZmZWN0ZWRBZGRyZXNzZXMuc2l6ZSA+IDApIHtcbiAgICBjb25zdCBhZGRyZXNzZXMgPSBbLi4uYWZmZWN0ZWRBZGRyZXNzZXNdO1xuICAgIGxvZ2dlci5kZWJ1ZyhgUmVidWlsZGluZyBiYWxhbmNlcyBmb3IgJHthZGRyZXNzZXMubGVuZ3RofSBhZGRyZXNzZXMuYCwge1xuICAgICAgYWRkcmVzc2VzLFxuICAgIH0pO1xuICAgIGxvZ2dlci5kZWJ1ZyhgUmVidWlsZGluZyB0eCBjb3VudCBmcm9tICR7YWZmZWN0ZWRUeElkcy5zaXplfSB0cmFuc2FjdGlvbnNgLCB7XG4gICAgICBhZmZlY3RlZFR4SWRzLFxuICAgIH0pO1xuICAgIGF3YWl0IHJlYnVpbGRBZGRyZXNzQmFsYW5jZXNGcm9tVXR4b3MobXlzcWwsIGFkZHJlc3NlcywgWy4uLmFmZmVjdGVkVHhJZHNdKTtcbiAgICBhd2FpdCB2YWxpZGF0ZUFkZHJlc3NCYWxhbmNlcyhteXNxbCwgYWRkcmVzc2VzKTtcbiAgfVxuXG4gIGxvZ2dlci5kZWJ1ZygnUmVvcmcgaXMgZG9uZS4nKTtcblxuICByZXR1cm4gaGVpZ2h0O1xufTtcblxuZXhwb3J0IGNvbnN0IHdhbGxldElkUHJveHlIYW5kbGVyID0gKGhhbmRsZXI6IFdhbGxldFByb3h5SGFuZGxlcik6IEFQSUdhdGV3YXlQcm94eUhhbmRsZXIgPT4gKFxuICBhc3luYyAoZXZlbnQsIGNvbnRleHQpID0+IHtcbiAgICBsZXQgd2FsbGV0SWQ6IHN0cmluZztcbiAgICB0cnkge1xuICAgICAgd2FsbGV0SWQgPSBldmVudC5yZXF1ZXN0Q29udGV4dC5hdXRob3JpemVyLnByaW5jaXBhbElkO1xuICAgICAgLy8gdmFsaWRhdGUgd2FsbGV0SWQ/XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc3RhdHVzQ29kZTogNDAxLFxuICAgICAgICBib2R5OiAnVW5hdXRob3JpemVkJyxcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBoYW5kbGVyKHdhbGxldElkLCBldmVudCwgY29udGV4dCk7XG4gIH1cbik7XG5cbmV4cG9ydCBjb25zdCBwcmVwYXJlT3V0cHV0cyA9IChvdXRwdXRzOiBUeE91dHB1dFtdLCB0eElkOiBzdHJpbmcsIGxvZ2dlcjogTG9nZ2VyKTogVHhPdXRwdXRXaXRoSW5kZXhbXSA9PiB7XG4gIGNvbnN0IHByZXBhcmVkT3V0cHV0czogW251bWJlciwgVHhPdXRwdXRXaXRoSW5kZXhbXV0gPSBvdXRwdXRzLnJlZHVjZShcbiAgICAoW2N1cnJJbmRleCwgbmV3T3V0cHV0c106IFtudW1iZXIsIFR4T3V0cHV0V2l0aEluZGV4W11dLCBvdXRwdXQ6IFR4T3V0cHV0KTogW251bWJlciwgVHhPdXRwdXRXaXRoSW5kZXhbXV0gPT4ge1xuICAgICAgaWYgKCFvdXRwdXQuZGVjb2RlZFxuICAgICAgICAgIHx8IG91dHB1dC5kZWNvZGVkLnR5cGUgPT09IG51bGxcbiAgICAgICAgICB8fCBvdXRwdXQuZGVjb2RlZC50eXBlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbG9nZ2VyLndhcm4oYElnbm9yaW5nIHR4IG91dHB1dCB3aXRoIGluZGV4ICR7Y3VyckluZGV4fSBmcm9tIHR4ICR7dHhJZH0gYXMgc2NyaXB0IGNvdWxkbid0IGJlIGRlY29kZWQuYCk7XG4gICAgICAgIHJldHVybiBbY3VyckluZGV4ICsgMSwgbmV3T3V0cHV0c107XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBbXG4gICAgICAgIGN1cnJJbmRleCArIDEsXG4gICAgICAgIFtcbiAgICAgICAgICAuLi5uZXdPdXRwdXRzLFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIC4uLm91dHB1dCxcbiAgICAgICAgICAgIGluZGV4OiBjdXJySW5kZXgsXG4gICAgICAgICAgfSxcbiAgICAgICAgXSxcbiAgICAgIF07XG4gICAgfSxcbiAgICBbMCwgW11dLFxuICApO1xuXG4gIHJldHVybiBwcmVwYXJlZE91dHB1dHNbMV07XG59O1xuXG4vKipcbiAqIEdldCBhIGxpc3Qgb2Ygd2FsbGV0IGJhbGFuY2UgcGVyIHRva2VuIGJ5IGluZm9ybWVkIHRyYW5zYWN0aW9uLlxuICpcbiAqIEBwYXJhbSBteXNxbFxuICogQHBhcmFtIHR4IC0gVGhlIHRyYW5zYWN0aW9uIHRvIGdldCByZWxhdGVkIHdhbGxldHMgYW5kIHRoZWlyIHRva2VuIGJhbGFuY2VzXG4gKiBAcmV0dXJuc1xuICovXG5leHBvcnQgY29uc3QgZ2V0V2FsbGV0QmFsYW5jZXNGb3JUeCA9IGFzeW5jIChteXNxbDogU2VydmVybGVzc015c3FsLCB0eDogVHJhbnNhY3Rpb24pOiBQcm9taXNlPFN0cmluZ01hcDxXYWxsZXRCYWxhbmNlVmFsdWU+PiA9PiB7XG4gIGNvbnN0IGFkZHJlc3NCYWxhbmNlTWFwOiBTdHJpbmdNYXA8VG9rZW5CYWxhbmNlTWFwPiA9IGdldEFkZHJlc3NCYWxhbmNlTWFwKHR4LmlucHV0cywgdHgub3V0cHV0cyk7XG4gIC8vIHJldHVybiBvbmx5IHdhbGxldHMgdGhhdCB3ZXJlIHN0YXJ0ZWRcbiAgY29uc3QgYWRkcmVzc1dhbGxldE1hcDogU3RyaW5nTWFwPFdhbGxldD4gPSBhd2FpdCBnZXRBZGRyZXNzV2FsbGV0SW5mbyhteXNxbCwgT2JqZWN0LmtleXMoYWRkcmVzc0JhbGFuY2VNYXApKTtcblxuICAvLyBDcmVhdGUgYSBuZXcgbWFwIGZvY3VzZWQgb24gdGhlIHdhbGxldElkIGFuZCBzdG9yaW5nIGl0cyBiYWxhbmNlIHZhcmlhdGlvbiBmcm9tIHRoaXMgdHhcbiAgY29uc3Qgd2FsbGV0c01hcDogU3RyaW5nTWFwPFdhbGxldEJhbGFuY2U+ID0ge307XG5cbiAgLy8gQWNjdW11bGF0aW9uIG9mIHRva2VuSWQgdG8gYmUgdXNlZCB0byBleHRyYWN0IGl0cyBzeW1ib2xzLlxuICBjb25zdCB0b2tlbklkQWNjdW11bGF0aW9uID0gW107XG5cbiAgLy8gSXRlcmF0ZXMgYWxsIHRoZSBhZGRyZXNzZXMgdG8gcG9wdWxhdGUgdGhlIG1hcCdzIGRhdGFcbiAgY29uc3QgYWRkcmVzc1dhbGxldEVudHJpZXMgPSBzdHJpbmdNYXBJdGVyYXRvcihhZGRyZXNzV2FsbGV0TWFwKSBhcyBbc3RyaW5nLCBXYWxsZXRdW107XG4gIGZvciAoY29uc3QgW2FkZHJlc3MsIHdhbGxldF0gb2YgYWRkcmVzc1dhbGxldEVudHJpZXMpIHtcbiAgICAvLyBDcmVhdGUgYSBuZXcgd2FsbGV0SWQgZW50cnkgaWYgaXQgZG9lcyBub3QgZXhpc3RcbiAgICBpZiAoIXdhbGxldHNNYXBbd2FsbGV0LndhbGxldElkXSkge1xuICAgICAgd2FsbGV0c01hcFt3YWxsZXQud2FsbGV0SWRdID0ge1xuICAgICAgICB0eElkOiB0eC50eF9pZCxcbiAgICAgICAgd2FsbGV0SWQ6IHdhbGxldC53YWxsZXRJZCxcbiAgICAgICAgYWRkcmVzc2VzOiBbXSxcbiAgICAgICAgd2FsbGV0QmFsYW5jZUZvclR4OiBuZXcgVG9rZW5CYWxhbmNlTWFwKCksXG4gICAgICB9O1xuICAgIH1cbiAgICBjb25zdCB3YWxsZXREYXRhID0gd2FsbGV0c01hcFt3YWxsZXQud2FsbGV0SWRdO1xuXG4gICAgLy8gQWRkIHRoaXMgYWRkcmVzcyB0byB0aGUgd2FsbGV0J3MgYWZmZWN0ZWQgYWRkcmVzc2VzIGxpc3RcbiAgICB3YWxsZXREYXRhLmFkZHJlc3Nlcy5wdXNoKGFkZHJlc3MpO1xuXG4gICAgLy8gTWVyZ2UgdGhlIGJhbGFuY2Ugb2YgdGhpcyBhZGRyZXNzIHdpdGggdGhlIHRvdGFsIGJhbGFuY2Ugb2YgdGhlIHdhbGxldFxuICAgIGNvbnN0IG1lcmdlZEJhbGFuY2UgPSBUb2tlbkJhbGFuY2VNYXAubWVyZ2Uod2FsbGV0RGF0YS53YWxsZXRCYWxhbmNlRm9yVHgsIGFkZHJlc3NCYWxhbmNlTWFwW2FkZHJlc3NdKTtcbiAgICB3YWxsZXREYXRhLndhbGxldEJhbGFuY2VGb3JUeCA9IG1lcmdlZEJhbGFuY2U7XG5cbiAgICBjb25zdCB0b2tlbklkTGlzdCA9IE9iamVjdC5rZXlzKG1lcmdlZEJhbGFuY2UubWFwKTtcbiAgICB0b2tlbklkQWNjdW11bGF0aW9uLnB1c2godG9rZW5JZExpc3QpO1xuICB9XG5cbiAgY29uc3QgdG9rZW5JZFNldCA9IG5ldyBTZXQ8c3RyaW5nPih0b2tlbklkQWNjdW11bGF0aW9uLnJlZHVjZSgocHJldiwgZWFjaEdyb3VwKSA9PiBbLi4ucHJldiwgLi4uZWFjaEdyb3VwXSwgW10pKTtcbiAgY29uc3QgdG9rZW5TeW1ib2xzTWFwID0gYXdhaXQgZ2V0VG9rZW5TeW1ib2xzKG15c3FsLCBBcnJheS5mcm9tKHRva2VuSWRTZXQudmFsdWVzKCkpKTtcblxuICByZXR1cm4gV2FsbGV0QmFsYW5jZU1hcENvbnZlcnRlci50b1ZhbHVlKHdhbGxldHNNYXAsIHRva2VuU3ltYm9sc01hcCk7XG59O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/commons.ts\n");

/***/ }),

/***/ "./src/db/index.ts":
/*!*************************!*\
  !*** ./src/db/index.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getTransactionsById = exports.getTxOutputs = exports.getTxsAfterHeight = exports.releaseTxProposalUtxos = exports.getTxProposal = exports.updateTxProposal = exports.createTxProposal = exports.markUtxosWithProposalId = exports.getUnusedAddresses = exports.getTokenInformation = exports.storeTokenInformation = exports.getBlockByHeight = exports.getLatestBlockByHeight = exports.getLatestHeight = exports.getVersionData = exports.updateVersionData = exports.getWalletUnlockedUtxos = exports.getUtxosLockedAtHeight = exports.getWalletTxHistory = exports.getWalletTokens = exports.getWalletBalances = exports.getNewAddresses = exports.getWalletAddresses = exports.updateWalletLockedBalance = exports.updateAddressLockedBalance = exports.updateAddressTablesWithTx = exports.getLockedUtxoFromInputs = exports.unlockUtxos = exports.getWalletSortedValueUtxos = exports.getUtxos = exports.getAuthorityUtxo = exports.getTxOutput = exports.updateTxOutputSpentBy = exports.addOrUpdateTx = exports.updateTx = exports.addUtxos = exports.updateWalletTablesWithTx = exports.initWalletBalance = exports.initWalletTxHistory = exports.getWalletAddressDetail = exports.updateExistingAddresses = exports.addNewAddresses = exports.updateWalletAuthXpub = exports.updateWalletStatus = exports.createWallet = exports.getWallet = exports.getAddressWalletInfo = exports.generateAddresses = exports.cleanupVoidedTx = exports.checkTxWasVoided = void 0;\nexports.getAddressAtIndex = exports.getUnsentTxProposals = exports.getTokenSymbols = exports.deleteStalePushDevices = exports.countStalePushDevices = exports.getPushDeviceSettingsList = exports.getPushDevice = exports.existsWallet = exports.getTransactionById = exports.unregisterPushDevice = exports.updatePushDevice = exports.removeAllPushDevicesByDeviceId = exports.registerPushDevice = exports.existsPushDevice = exports.incrementTokensTxCount = exports.getAffectedAddressTotalReceivedFromTxList = exports.getAffectedTokenTxCountFromTxList = exports.getAffectedAddressTxCountFromTxList = exports.getAvailableAuthorities = exports.getTotalTransactions = exports.getExpiredTimelocksUtxos = exports.getTotalSupply = exports.getMinersList = exports.addMiner = exports.getMempoolTransactionsBeforeDate = exports.getTxProposalInputs = exports.mapDbResultToDbTxOutput = exports.filterTxOutputs = exports.fetchAddressTxHistorySum = exports.fetchAddressBalance = exports.fetchTx = exports.rebuildAddressBalancesFromUtxos = exports.markWalletTxHistoryAsVoided = exports.markAddressTxHistoryAsVoided = exports.markTxsAsVoided = exports.deleteBlocksAfterHeight = exports.markUtxosAsVoided = exports.removeTxsHeight = exports.unspendUtxos = exports.getTxOutputsBySpent = void 0;\nconst assert_1 = __webpack_require__(/*! assert */ \"assert\");\nconst lodash_1 = __webpack_require__(/*! lodash */ \"lodash\");\nconst wallet_lib_1 = __webpack_require__(/*! @hathor/wallet-lib */ \"@hathor/wallet-lib\");\nconst types_1 = __webpack_require__(/*! @src/types */ \"./src/types.ts\");\nconst utils_1 = __webpack_require__(/*! @src/utils */ \"./src/utils.ts\");\nconst utils_2 = __webpack_require__(/*! @src/db/utils */ \"./src/db/utils.ts\");\nconst alerting_utils_1 = __webpack_require__(/*! @src/utils/alerting.utils */ \"./src/utils/alerting.utils.ts\");\nconst BLOCK_VERSION = [\n    wallet_lib_1.constants.BLOCK_VERSION,\n    wallet_lib_1.constants.MERGED_MINED_BLOCK_VERSION,\n];\nconst BURN_ADDRESS = 'HDeadDeadDeadDeadDeadDeadDeagTPgmn';\nconst checkTxWasVoided = async (mysql, txId) => {\n    const results = await mysql.query(`SELECT * FROM \\`address_tx_history\\`\n      WHERE tx_id = ?\n      LIMIT 1`, [txId]);\n    if (!results.length) {\n        return false;\n    }\n    const addressTxHistory = results[0];\n    return Boolean(addressTxHistory.voided);\n};\nexports.checkTxWasVoided = checkTxWasVoided;\nconst cleanupVoidedTx = async (mysql, txId) => {\n    await mysql.query(`DELETE FROM \\`transaction\\`\n      WHERE tx_id = ?\n        AND voided = true`, [txId]);\n    await mysql.query(`DELETE FROM \\`tx_output\\`\n      WHERE tx_id = ?\n        AND voided = true`, [txId]);\n    await mysql.query(`DELETE FROM \\`address_tx_history\\`\n      WHERE tx_id = ?\n        AND voided = true`, [txId]);\n    await mysql.query(`DELETE FROM \\`wallet_tx_history\\`\n      WHERE tx_id = ?\n        AND voided = true`, [txId]);\n};\nexports.cleanupVoidedTx = cleanupVoidedTx;\nconst generateAddresses = async (mysql, xpubkey, maxGap) => {\n    const existingAddresses = {};\n    const newAddresses = {};\n    const allAddresses = [];\n    const derivedXpub = (0, utils_1.xpubDeriveChild)(xpubkey, 0);\n    let highestCheckedIndex = -1;\n    let lastUsedAddressIndex = -1;\n    do {\n        const addrMap = (0, utils_1.getAddresses)(derivedXpub, highestCheckedIndex + 1, maxGap);\n        allAddresses.push(...Object.keys(addrMap));\n        const results = await mysql.query(`SELECT \\`address\\`,\n              \\`index\\`,\n              \\`transactions\\`\n         FROM \\`address\\`\n        WHERE \\`address\\`\n           IN (?)`, [Object.keys(addrMap)]);\n        for (const entry of results) {\n            const address = entry.address;\n            const index = addrMap[address];\n            existingAddresses[address] = index;\n            if (entry.transactions > 0 && index > lastUsedAddressIndex) {\n                lastUsedAddressIndex = index;\n            }\n            delete addrMap[address];\n        }\n        highestCheckedIndex += maxGap;\n        Object.assign(newAddresses, addrMap);\n    } while (lastUsedAddressIndex + maxGap > highestCheckedIndex);\n    const totalAddresses = lastUsedAddressIndex + maxGap + 1;\n    for (const [address, index] of Object.entries(newAddresses)) {\n        if (index > lastUsedAddressIndex + maxGap) {\n            delete newAddresses[address];\n        }\n    }\n    return {\n        addresses: allAddresses.slice(0, totalAddresses),\n        newAddresses,\n        existingAddresses,\n        lastUsedAddressIndex,\n    };\n};\nexports.generateAddresses = generateAddresses;\nconst getAddressWalletInfo = async (mysql, addresses) => {\n    const addressWalletMap = {};\n    const results = await mysql.query(`SELECT DISTINCT a.\\`address\\`,\n                     a.\\`wallet_id\\`,\n                     w.\\`auth_xpubkey\\`,\n                     w.\\`xpubkey\\`,\n                     w.\\`max_gap\\`\n       FROM \\`address\\` a\n INNER JOIN \\`wallet\\` w\n         ON a.wallet_id = w.id\n      WHERE a.\\`address\\`\n         IN (?)`, [addresses]);\n    for (const entry of results) {\n        const walletInfo = {\n            walletId: entry.wallet_id,\n            authXpubkey: entry.auth_xpubkey,\n            xpubkey: entry.xpubkey,\n            maxGap: entry.max_gap,\n        };\n        addressWalletMap[entry.address] = walletInfo;\n    }\n    return addressWalletMap;\n};\nexports.getAddressWalletInfo = getAddressWalletInfo;\nconst getWallet = async (mysql, walletId) => {\n    const results = await mysql.query('SELECT * FROM `wallet` WHERE `id` = ?', walletId);\n    if (results.length) {\n        const result = results[0];\n        return (0, utils_2.getWalletFromDbEntry)(result);\n    }\n    return null;\n};\nexports.getWallet = getWallet;\nconst createWallet = async (mysql, walletId, xpubkey, authXpubkey, maxGap) => {\n    const ts = (0, utils_1.getUnixTimestamp)();\n    const entry = {\n        id: walletId,\n        xpubkey,\n        auth_xpubkey: authXpubkey,\n        status: types_1.WalletStatus.CREATING,\n        created_at: ts,\n        max_gap: maxGap,\n    };\n    await mysql.query(`INSERT INTO \\`wallet\\`\n        SET ?`, [entry]);\n    return {\n        walletId,\n        xpubkey,\n        authXpubkey,\n        maxGap,\n        retryCount: 0,\n        status: types_1.WalletStatus.CREATING,\n        createdAt: ts,\n        readyAt: null,\n    };\n};\nexports.createWallet = createWallet;\nconst updateWalletStatus = async (mysql, walletId, status, retryCount = 0) => {\n    const ts = (0, utils_1.getUnixTimestamp)();\n    await mysql.query(`UPDATE \\`wallet\\`\n        SET \\`status\\` = ?,\n            \\`ready_at\\` = ?,\n            \\`retry_count\\` = ?\n      WHERE \\`id\\` = ?`, [status, ts, retryCount, walletId]);\n};\nexports.updateWalletStatus = updateWalletStatus;\nconst updateWalletAuthXpub = async (mysql, walletId, authXpubkey) => {\n    await mysql.query(`UPDATE \\`wallet\\`\n        SET \\`auth_xpubkey\\` = ?\n      WHERE \\`id\\` = ?`, [authXpubkey, walletId]);\n};\nexports.updateWalletAuthXpub = updateWalletAuthXpub;\nconst addNewAddresses = async (mysql, walletId, addresses, lastUsedAddressIndex) => {\n    if (Object.keys(addresses).length === 0)\n        return;\n    const entries = [];\n    for (const [address, index] of Object.entries(addresses)) {\n        entries.push([address, index, walletId, 0]);\n    }\n    await mysql.query(`INSERT INTO \\`address\\`(\\`address\\`, \\`index\\`,\n                             \\`wallet_id\\`, \\`transactions\\`)\n     VALUES ?`, [entries]);\n    await mysql.query(`UPDATE \\`wallet\\`\n        SET \\`last_used_address_index\\` = ?\n      WHERE \\`id\\` = ?`, [lastUsedAddressIndex, walletId]);\n};\nexports.addNewAddresses = addNewAddresses;\nconst updateExistingAddresses = async (mysql, walletId, addresses) => {\n    if (Object.keys(addresses).length === 0)\n        return;\n    for (const [address, index] of Object.entries(addresses)) {\n        await mysql.query(`UPDATE \\`address\\`\n          SET \\`wallet_id\\` = ?,\n              \\`index\\` = ?\n        WHERE \\`address\\` = ?`, [walletId, index, address]);\n    }\n};\nexports.updateExistingAddresses = updateExistingAddresses;\nconst getWalletAddressDetail = async (mysql, walletId, address) => {\n    const results = await mysql.query(`\n    SELECT *\n      FROM \\`address\\`\n     WHERE \\`wallet_id\\` = ?\n         AND \\`address\\` = ?`, [walletId, address]);\n    if (results.length > 0) {\n        const data = results[0];\n        const addressDetail = {\n            address: data.address,\n            index: data.index,\n            transactions: data.transactions,\n        };\n        return addressDetail;\n    }\n    return null;\n};\nexports.getWalletAddressDetail = getWalletAddressDetail;\nconst initWalletTxHistory = async (mysql, walletId, addresses) => {\n    if (addresses.length === 0)\n        return;\n    const results = await mysql.query(`SELECT \\`tx_id\\`,\n            \\`token_id\\`,\n            SUM(\\`balance\\`) AS balance,\n            \\`timestamp\\`\n       FROM \\`address_tx_history\\`\n      WHERE \\`address\\` IN (?)\n        AND \\`voided\\` = FALSE\n   GROUP BY \\`tx_id\\`,\n            \\`token_id\\`,\n            \\`timestamp\\``, [addresses]);\n    if (results.length === 0)\n        return;\n    const walletTxHistory = [];\n    for (const row of results) {\n        walletTxHistory.push([walletId, row.token_id, row.tx_id, row.balance, row.timestamp]);\n    }\n    await mysql.query(`INSERT INTO \\`wallet_tx_history\\`(\\`wallet_id\\`, \\`token_id\\`,\n                                       \\`tx_id\\`, \\`balance\\`,\n                                       \\`timestamp\\`)\n          VALUES ?`, [walletTxHistory]);\n};\nexports.initWalletTxHistory = initWalletTxHistory;\nconst initWalletBalance = async (mysql, walletId, addresses) => {\n    const results1 = await mysql.query(`SELECT \\`token_id\\`,\n            SUM(\\`total_received\\`) AS \\`total_received\\`,\n            SUM(\\`unlocked_balance\\`) AS \\`unlocked_balance\\`,\n            SUM(\\`locked_balance\\`) AS \\`locked_balance\\`,\n            MIN(\\`timelock_expires\\`) AS \\`timelock_expires\\`\n       FROM \\`address_balance\\`\n      WHERE \\`address\\`\n         IN (?)\n   GROUP BY \\`token_id\\`\n   ORDER BY \\`token_id\\``, [addresses]);\n    const results2 = await mysql.query(`SELECT \\`token_id\\`,\n            SUM(\\`balance\\`) AS \\`balance\\`,\n            COUNT(DISTINCT \\`tx_id\\`) AS \\`transactions\\`\n       FROM \\`address_tx_history\\`\n      WHERE \\`address\\` IN (?)\n        AND \\`voided\\` = FALSE\n   GROUP BY \\`token_id\\`\n   ORDER BY \\`token_id\\``, [addresses]);\n    assert_1.strict.strictEqual(results1.length, results2.length);\n    const balanceEntries = [];\n    for (let i = 0; i < results1.length; i++) {\n        const row1 = results1[i];\n        const row2 = results2[i];\n        assert_1.strict.strictEqual(row1.token_id, row2.token_id);\n        assert_1.strict.strictEqual(row1.unlocked_balance + row1.locked_balance, row2.balance);\n        balanceEntries.push([\n            walletId,\n            row1.token_id,\n            row1.total_received,\n            row1.unlocked_balance,\n            row1.locked_balance,\n            row1.timelock_expires,\n            row2.transactions,\n        ]);\n    }\n    if (balanceEntries.length > 0) {\n        await mysql.query(`INSERT INTO \\`wallet_balance\\`(\\`wallet_id\\`, \\`token_id\\`,\n                                      \\`total_received\\`,\n                                      \\`unlocked_balance\\`, \\`locked_balance\\`,\n                                      \\`timelock_expires\\`, \\`transactions\\`)\n            VALUES ?`, [balanceEntries]);\n    }\n};\nexports.initWalletBalance = initWalletBalance;\nconst updateWalletTablesWithTx = async (mysql, txId, timestamp, walletBalanceMap) => {\n    const entries = [];\n    for (const [walletId, tokenBalanceMap] of Object.entries(walletBalanceMap)) {\n        for (const [token, tokenBalance] of tokenBalanceMap.iterator()) {\n            const entry = {\n                wallet_id: walletId,\n                token_id: token,\n                total_received: tokenBalance.totalAmountSent,\n                unlocked_balance: (tokenBalance.unlockedAmount < 0 ? 0 : tokenBalance.unlockedAmount),\n                locked_balance: tokenBalance.lockedAmount,\n                unlocked_authorities: tokenBalance.unlockedAuthorities.toUnsignedInteger(),\n                locked_authorities: tokenBalance.lockedAuthorities.toUnsignedInteger(),\n                timelock_expires: tokenBalance.lockExpires,\n                transactions: 1,\n            };\n            await mysql.query(`INSERT INTO wallet_balance\n            SET ?\n             ON DUPLICATE KEY\n         UPDATE total_received = total_received + ?,\n                unlocked_balance = unlocked_balance + ?,\n                locked_balance = locked_balance + ?,\n                transactions = transactions + 1,\n                timelock_expires = CASE WHEN timelock_expires IS NULL THEN VALUES(timelock_expires)\n                                        WHEN VALUES(timelock_expires) IS NULL THEN timelock_expires\n                                        ELSE LEAST(timelock_expires, VALUES(timelock_expires))\n                                   END,\n                unlocked_authorities = (unlocked_authorities | VALUES(unlocked_authorities)),\n                locked_authorities = locked_authorities | VALUES(locked_authorities)`, [entry, tokenBalance.totalAmountSent, tokenBalance.unlockedAmount, tokenBalance.lockedAmount, walletId, token]);\n            if (tokenBalance.unlockedAuthorities.hasNegativeValue()) {\n                await mysql.query(`UPDATE \\`wallet_balance\\`\n              SET \\`unlocked_authorities\\` = (\n                SELECT BIT_OR(\\`unlocked_authorities\\`)\n                  FROM \\`address_balance\\`\n                 WHERE \\`address\\` IN (\n                   SELECT \\`address\\`\n                     FROM \\`address\\`\n                    WHERE \\`wallet_id\\` = ?)\n                   AND \\`token_id\\` = ?)\n            WHERE \\`wallet_id\\` = ?\n              AND \\`token_id\\` = ?`, [walletId, token, walletId, token]);\n            }\n            entries.push([walletId, token, txId, tokenBalance.total(), timestamp]);\n        }\n    }\n    if (entries.length > 0) {\n        await mysql.query(`INSERT INTO \\`wallet_tx_history\\` (\\`wallet_id\\`, \\`token_id\\`,\n                                          \\`tx_id\\`, \\`balance\\`,\n                                          \\`timestamp\\`)\n            VALUES ?`, [entries]);\n    }\n};\nexports.updateWalletTablesWithTx = updateWalletTablesWithTx;\nconst addUtxos = async (mysql, txId, outputs, heightlock = null) => {\n    if (outputs.length === 0)\n        return;\n    const entries = outputs.map((output) => {\n        let authorities = 0;\n        let value = output.value;\n        if ((0, utils_1.isAuthority)(output.token_data)) {\n            authorities = value;\n            value = 0;\n        }\n        return [\n            txId,\n            output.index,\n            output.token,\n            value,\n            authorities,\n            output.decoded.address,\n            output.decoded.timelock,\n            heightlock,\n            output.locked,\n        ];\n    });\n    await mysql.query(`INSERT INTO \\`tx_output\\` (\\`tx_id\\`, \\`index\\`, \\`token_id\\`,\n                           \\`value\\`, \\`authorities\\`, \\`address\\`,\n                           \\`timelock\\`, \\`heightlock\\`, \\`locked\\`)\n     VALUES ?\n     ON DUPLICATE KEY UPDATE tx_id=tx_id`, [entries]);\n};\nexports.addUtxos = addUtxos;\nconst updateTx = async (mysql, txId, height, timestamp, version, weight) => (0, exports.addOrUpdateTx)(mysql, txId, height, timestamp, version, weight);\nexports.updateTx = updateTx;\nconst addOrUpdateTx = async (mysql, txId, height, timestamp, version, weight) => {\n    const entries = [[txId, height, timestamp, version, weight]];\n    await mysql.query(`INSERT INTO \\`transaction\\` (tx_id, height, timestamp, version, weight)\n     VALUES ?\n         ON DUPLICATE KEY UPDATE height = ?`, [entries, height]);\n};\nexports.addOrUpdateTx = addOrUpdateTx;\nconst updateTxOutputSpentBy = async (mysql, inputs, txId) => {\n    const entries = inputs.map((input) => [input.tx_id, input.index]);\n    if (entries.length) {\n        const result = await mysql.query(`UPDATE \\`tx_output\\` USE INDEX (PRIMARY)\n          SET \\`spent_by\\` = ?\n        WHERE (\\`tx_id\\` ,\\`index\\`)\n           IN (?)`, [txId, entries]);\n        assert_1.strict.strictEqual(result.affectedRows, inputs.length, new Error('Not all informed UTXOs had their spentBy updated'));\n    }\n};\nexports.updateTxOutputSpentBy = updateTxOutputSpentBy;\nconst getTxOutput = async (mysql, txId, index, skipSpent) => {\n    const results = await mysql.query(`SELECT *\n       FROM \\`tx_output\\`\n      WHERE \\`tx_id\\` = ?\n        AND \\`index\\` = ?\n        ${skipSpent ? 'AND `spent_by` IS NULL' : ''}\n        AND \\`voided\\` = FALSE`, [txId, index]);\n    if (!results.length || results.length === 0) {\n        return null;\n    }\n    const result = results[0];\n    const txOutput = (0, exports.mapDbResultToDbTxOutput)(result);\n    return txOutput;\n};\nexports.getTxOutput = getTxOutput;\nconst getAuthorityUtxo = async (mysql, tokenId, authority) => {\n    const results = await mysql.query(`SELECT *\n       FROM \\`tx_output\\`\n      WHERE \\`authorities\\` = ?\n        AND \\`spent_by\\` IS NULL\n        AND \\`voided\\` = FALSE\n        AND \\`token_id\\` = ?\n      LIMIT 1`, [authority, tokenId]);\n    if (!results.length || results.length === 0) {\n        return null;\n    }\n    const result = results[0];\n    const utxo = (0, exports.mapDbResultToDbTxOutput)(result);\n    return utxo;\n};\nexports.getAuthorityUtxo = getAuthorityUtxo;\nconst getUtxos = async (mysql, utxosInfo) => {\n    const entries = utxosInfo.map((utxo) => [utxo.txId, utxo.index]);\n    const results = await mysql.query(`SELECT *\n       FROM \\`tx_output\\` USE INDEX (PRIMARY)\n      WHERE (\\`tx_id\\`, \\`index\\`)\n         IN (?)\n        AND \\`spent_by\\` IS NULL\n        AND \\`voided\\` = FALSE`, [entries]);\n    const utxos = results.map(exports.mapDbResultToDbTxOutput);\n    return utxos;\n};\nexports.getUtxos = getUtxos;\nconst getWalletSortedValueUtxos = async (mysql, walletId, tokenId) => {\n    const utxos = [];\n    const results = await mysql.query(`SELECT *\n       FROM \\`tx_output\\`\n      WHERE \\`address\\`\n         IN (\n           SELECT \\`address\\`\n             FROM \\`address\\`\n            WHERE \\`wallet_id\\` = ?\n         )\n        AND \\`token_id\\` = ?\n        AND \\`authorities\\` = 0\n        AND \\`locked\\` = FALSE\n        AND \\`tx_proposal\\` IS NULL\n        AND \\`spent_by\\` IS NULL\n        AND \\`voided\\` = FALSE\n   ORDER BY \\`value\\`\n       DESC`, [walletId, tokenId]);\n    for (const result of results) {\n        const utxo = {\n            txId: result.tx_id,\n            index: result.index,\n            tokenId: result.token_id,\n            address: result.address,\n            value: result.value,\n            authorities: result.authorities,\n            timelock: result.timelock,\n            heightlock: result.heightlock,\n            locked: result.locked > 0,\n        };\n        utxos.push(utxo);\n    }\n    return utxos;\n};\nexports.getWalletSortedValueUtxos = getWalletSortedValueUtxos;\nconst unlockUtxos = async (mysql, utxos) => {\n    if (utxos.length === 0)\n        return;\n    const entries = utxos.map((utxo) => [utxo.txId, utxo.index]);\n    await mysql.query(`UPDATE \\`tx_output\\`\n        SET \\`locked\\` = FALSE\n      WHERE (\\`tx_id\\` ,\\`index\\`)\n         IN (?)`, [entries]);\n};\nexports.unlockUtxos = unlockUtxos;\nconst getLockedUtxoFromInputs = async (mysql, inputs) => {\n    const entries = inputs.map((input) => [input.tx_id, input.index]);\n    if (entries.length) {\n        const results = await mysql.query(`SELECT *\n         FROM \\`tx_output\\` USE INDEX (PRIMARY)\n        WHERE (\\`tx_id\\` ,\\`index\\`)\n           IN (?)\n          AND \\`locked\\` = TRUE\n          AND \\`spent_by\\` IS NULL\n          AND \\`voided\\` = FALSE`, [entries]);\n        return results.map((utxo) => ({\n            txId: utxo.tx_id,\n            index: utxo.index,\n            tokenId: utxo.token_id,\n            address: utxo.address,\n            value: utxo.value,\n            authorities: utxo.authorities,\n            timelock: utxo.timelock,\n            heightlock: utxo.heightlock,\n            locked: (utxo.locked > 0),\n        }));\n    }\n    return [];\n};\nexports.getLockedUtxoFromInputs = getLockedUtxoFromInputs;\nconst updateAddressTablesWithTx = async (mysql, txId, timestamp, addressBalanceMap) => {\n    const addressEntries = Object.keys(addressBalanceMap).map((address) => [address, 1]);\n    await mysql.query(`INSERT INTO \\`address\\`(\\`address\\`, \\`transactions\\`)\n          VALUES ?\n              ON DUPLICATE KEY UPDATE transactions = transactions + 1`, [addressEntries]);\n    const entries = [];\n    for (const [address, tokenMap] of Object.entries(addressBalanceMap)) {\n        for (const [token, tokenBalance] of tokenMap.iterator()) {\n            const entry = {\n                address,\n                token_id: token,\n                total_received: tokenBalance.totalAmountSent,\n                unlocked_balance: (tokenBalance.unlockedAmount < 0 ? 0 : tokenBalance.unlockedAmount),\n                locked_balance: tokenBalance.lockedAmount,\n                unlocked_authorities: tokenBalance.unlockedAuthorities.toUnsignedInteger(),\n                locked_authorities: tokenBalance.lockedAuthorities.toUnsignedInteger(),\n                timelock_expires: tokenBalance.lockExpires,\n                transactions: 1,\n            };\n            await mysql.query(`INSERT INTO address_balance\n                 SET ?\n                  ON DUPLICATE KEY\n                            UPDATE total_received = total_received + ?,\n                                   unlocked_balance = unlocked_balance + ?,\n                                   locked_balance = locked_balance + ?,\n                                   transactions = transactions + 1,\n                                   timelock_expires = CASE\n                                                        WHEN timelock_expires IS NULL THEN VALUES(timelock_expires)\n                                                        WHEN VALUES(timelock_expires) IS NULL THEN timelock_expires\n                                                        ELSE LEAST(timelock_expires, VALUES(timelock_expires))\n                                                      END,\n                                   unlocked_authorities = (unlocked_authorities | VALUES(unlocked_authorities)),\n                                   locked_authorities = locked_authorities | VALUES(locked_authorities)`, [entry, tokenBalance.totalAmountSent, tokenBalance.unlockedAmount, tokenBalance.lockedAmount, address, token]);\n            if (tokenBalance.unlockedAuthorities.hasNegativeValue()) {\n                await mysql.query(`UPDATE \\`address_balance\\`\n              SET \\`unlocked_authorities\\` = (\n                SELECT BIT_OR(\\`authorities\\`)\n                  FROM \\`tx_output\\`\n                 WHERE \\`address\\` = ?\n                   AND \\`token_id\\` = ?\n                   AND \\`locked\\` = FALSE\n                   AND \\`spent_by\\` IS NULL\n                   AND \\`voided\\` = FALSE\n              )\n            WHERE \\`address\\` = ?\n              AND \\`token_id\\` = ?`, [address, token, address, token]);\n            }\n            entries.push([address, txId, token, tokenBalance.total(), timestamp]);\n        }\n    }\n    await mysql.query(`INSERT INTO \\`address_tx_history\\`(\\`address\\`, \\`tx_id\\`,\n                                        \\`token_id\\`, \\`balance\\`,\n                                        \\`timestamp\\`)\n     VALUES ?`, [entries]);\n};\nexports.updateAddressTablesWithTx = updateAddressTablesWithTx;\nconst updateAddressLockedBalance = async (mysql, addressBalanceMap, updateTimelocks = false) => {\n    for (const [address, tokenBalanceMap] of Object.entries(addressBalanceMap)) {\n        for (const [token, tokenBalance] of tokenBalanceMap.iterator()) {\n            await mysql.query(`UPDATE \\`address_balance\\`\n            SET \\`unlocked_balance\\` = \\`unlocked_balance\\` + ?,\n                \\`locked_balance\\` = \\`locked_balance\\` - ?,\n                \\`unlocked_authorities\\` = (unlocked_authorities | ?)\n          WHERE \\`address\\` = ?\n            AND \\`token_id\\` = ?`, [\n                tokenBalance.unlockedAmount,\n                tokenBalance.unlockedAmount,\n                tokenBalance.unlockedAuthorities.toInteger(),\n                address,\n                token,\n            ]);\n            if (tokenBalance.unlockedAuthorities.toInteger() > 0) {\n                await mysql.query(`UPDATE \\`address_balance\\`\n              SET \\`locked_authorities\\` = (\n                SELECT BIT_OR(\\`authorities\\`)\n                  FROM \\`tx_output\\`\n                 WHERE \\`address\\` = ?\n                   AND \\`token_id\\` = ?\n                   AND \\`locked\\` = TRUE\n                   AND \\`spent_by\\` IS NULL\n                   AND \\`voided\\` = FALSE)\n                 WHERE \\`address\\` = ?\n                   AND \\`token_id\\` = ?`, [address, token, address, token]);\n            }\n            if (updateTimelocks) {\n                await mysql.query(`\n          UPDATE \\`address_balance\\`\n             SET \\`timelock_expires\\` = (\n               SELECT MIN(\\`timelock\\`)\n                 FROM \\`tx_output\\`\n                WHERE \\`address\\` = ?\n                  AND \\`token_id\\` = ?\n                  AND \\`locked\\` = TRUE\n                  AND \\`spent_by\\` IS NULL\n                  AND \\`voided\\` = FALSE\n             )\n           WHERE \\`address\\` = ?\n             AND \\`token_id\\` = ?`, [address, token, address, token]);\n            }\n        }\n    }\n};\nexports.updateAddressLockedBalance = updateAddressLockedBalance;\nconst updateWalletLockedBalance = async (mysql, walletBalanceMap, updateTimelocks = false) => {\n    for (const [walletId, tokenBalanceMap] of Object.entries(walletBalanceMap)) {\n        for (const [token, tokenBalance] of tokenBalanceMap.iterator()) {\n            await mysql.query(`UPDATE \\`wallet_balance\\`\n            SET \\`unlocked_balance\\` = \\`unlocked_balance\\` + ?,\n                \\`locked_balance\\` = \\`locked_balance\\` - ?,\n                \\`unlocked_authorities\\` = (\\`unlocked_authorities\\` | ?)\n          WHERE \\`wallet_id\\` = ?\n            AND \\`token_id\\` = ?`, [tokenBalance.unlockedAmount, tokenBalance.unlockedAmount,\n                tokenBalance.unlockedAuthorities.toInteger(), walletId, token]);\n            if (tokenBalance.unlockedAuthorities.toInteger() > 0) {\n                await mysql.query(`UPDATE \\`wallet_balance\\`\n              SET \\`locked_authorities\\` = (\n                SELECT BIT_OR(\\`locked_authorities\\`)\n                  FROM \\`address_balance\\`\n                 WHERE \\`address\\` IN (\n                   SELECT \\`address\\`\n                     FROM \\`address\\`\n                    WHERE \\`wallet_id\\` = ?)\n                    AND \\`token_id\\` = ?)\n            WHERE \\`wallet_id\\` = ?\n              AND \\`token_id\\` = ?`, [walletId, token, walletId, token]);\n            }\n            if (updateTimelocks) {\n                await mysql.query(`UPDATE \\`wallet_balance\\`\n              SET \\`timelock_expires\\` = (\n                SELECT MIN(\\`timelock_expires\\`)\n                  FROM \\`address_balance\\`\n                 WHERE \\`address\\`\n                    IN (\n                      SELECT \\`address\\`\n                        FROM \\`address\\`\n                       WHERE \\`wallet_id\\` = ?)\n                   AND \\`token_id\\` = ?)\n            WHERE \\`wallet_id\\` = ? AND \\`token_id\\` = ?`, [walletId, token, walletId, token]);\n            }\n        }\n    }\n};\nexports.updateWalletLockedBalance = updateWalletLockedBalance;\nconst getWalletAddresses = async (mysql, walletId, filterAddresses) => {\n    const addresses = [];\n    const subQuery = filterAddresses ? `\n    AND \\`address\\` IN (?)\n  ` : '';\n    const results = await mysql.query(`\n    SELECT *\n      FROM \\`address\\`\n     WHERE \\`wallet_id\\` = ?\n      ${subQuery}\n  ORDER BY \\`index\\`\n       ASC`, [walletId, filterAddresses]);\n    for (const result of results) {\n        const address = {\n            address: result.address,\n            index: result.index,\n            transactions: result.transactions,\n        };\n        addresses.push(address);\n    }\n    return addresses;\n};\nexports.getWalletAddresses = getWalletAddresses;\nconst getNewAddresses = async (mysql, walletId) => {\n    const addresses = [];\n    const resultsWallet = await mysql.query('SELECT * FROM `wallet` WHERE `id` = ?', walletId);\n    if (resultsWallet.length) {\n        const gapLimit = resultsWallet[0].max_gap;\n        const latestUsedIndex = resultsWallet[0].last_used_address_index;\n        const results = await mysql.query(`\n      SELECT *\n        FROM \\`address\\`\n       WHERE \\`wallet_id\\` = ?\n         AND \\`transactions\\` = 0\n         AND \\`index\\` > ?\n    ORDER BY \\`index\\`\n         ASC\n    LIMIT ?`, [walletId, latestUsedIndex, gapLimit]);\n        for (const result of results) {\n            const index = result.index;\n            const address = {\n                address: result.address,\n                index,\n                addressPath: (0, utils_1.getAddressPath)(index),\n            };\n            addresses.push(address);\n        }\n    }\n    return addresses;\n};\nexports.getNewAddresses = getNewAddresses;\nconst getWalletBalances = async (mysql, walletId, tokenIds = []) => {\n    const balances = [];\n    let subquery = 'SELECT * FROM `wallet_balance` WHERE `wallet_id` = ?';\n    const params = [walletId];\n    if (tokenIds.length > 0) {\n        subquery += ' AND `token_id` IN (?)';\n        params.push(tokenIds);\n    }\n    const query = `\n    SELECT w.total_received AS total_received,\n           w.unlocked_balance AS unlocked_balance,\n           w.locked_balance AS locked_balance,\n           w.unlocked_authorities AS unlocked_authorities,\n           w.locked_authorities AS locked_authorities,\n           w.timelock_expires AS timelock_expires,\n           w.transactions AS transactions,\n           w.token_id AS token_id,\n           token.name AS name,\n           token.symbol AS symbol\n      FROM (${subquery}) w\nINNER JOIN token ON w.token_id = token.id\n  `;\n    const results = await mysql.query(query, params);\n    for (const result of results) {\n        const totalAmount = result.total_received;\n        const unlockedBalance = result.unlocked_balance;\n        const lockedBalance = result.locked_balance;\n        const unlockedAuthorities = new types_1.Authorities(result.unlocked_authorities);\n        const lockedAuthorities = new types_1.Authorities(result.locked_authorities);\n        const timelockExpires = result.timelock_expires;\n        const balance = new types_1.WalletTokenBalance(new types_1.TokenInfo(result.token_id, result.name, result.symbol), new types_1.Balance(totalAmount, unlockedBalance, lockedBalance, timelockExpires, unlockedAuthorities, lockedAuthorities), result.transactions);\n        balances.push(balance);\n    }\n    return balances;\n};\nexports.getWalletBalances = getWalletBalances;\nconst getWalletTokens = async (mysql, walletId) => {\n    const tokenList = [];\n    const results = await mysql.query(`SELECT DISTINCT(token_id)\n       FROM \\`wallet_tx_history\\`\n      WHERE \\`wallet_id\\` = ?`, [walletId]);\n    for (const result of results) {\n        tokenList.push(result.token_id);\n    }\n    return tokenList;\n};\nexports.getWalletTokens = getWalletTokens;\nconst getWalletTxHistory = async (mysql, walletId, tokenId, skip, count) => {\n    const history = [];\n    const results = await mysql.query(`\n    SELECT wallet_tx_history.balance AS balance,\n           wallet_tx_history.timestamp AS timestamp,\n           wallet_tx_history.token_id AS token_id,\n           wallet_tx_history.tx_id AS tx_id,\n           wallet_tx_history.voided AS voided,\n           wallet_tx_history.wallet_id AS wallet_id,\n           transaction.version AS version\n      FROM wallet_tx_history\nLEFT OUTER JOIN transaction ON transaction.tx_id = wallet_tx_history.tx_id\n     WHERE wallet_id = ?\n       AND token_id = ?\n  ORDER BY wallet_tx_history.timestamp\n      DESC\n     LIMIT ?, ?`, [walletId, tokenId, skip, count]);\n    for (const result of results) {\n        const tx = {\n            txId: result.tx_id,\n            timestamp: result.timestamp,\n            voided: result.voided,\n            balance: result.balance,\n            version: result.version,\n        };\n        history.push(tx);\n    }\n    return history;\n};\nexports.getWalletTxHistory = getWalletTxHistory;\nconst getUtxosLockedAtHeight = async (mysql, now, height) => {\n    const utxos = [];\n    if (height >= 0) {\n        const results = await mysql.query(`SELECT *\n         FROM \\`tx_output\\`\n        WHERE \\`heightlock\\` = ?\n          AND \\`spent_by\\` IS NULL\n          AND \\`voided\\` = FALSE\n          AND (\\`timelock\\` <= ?\n               OR \\`timelock\\` is NULL)\n          AND \\`locked\\` = 1`, [height, now]);\n        for (const result of results) {\n            const utxo = {\n                txId: result.tx_id,\n                index: result.index,\n                tokenId: result.token_id,\n                address: result.address,\n                value: result.value,\n                authorities: result.authorities,\n                timelock: result.timelock,\n                heightlock: result.heightlock,\n                locked: result.locked > 0,\n            };\n            utxos.push(utxo);\n        }\n    }\n    return utxos;\n};\nexports.getUtxosLockedAtHeight = getUtxosLockedAtHeight;\nconst getWalletUnlockedUtxos = async (mysql, walletId, now, currentHeight) => {\n    const utxos = [];\n    const results = await mysql.query(`SELECT *\n       FROM \\`tx_output\\`\n      WHERE (\\`heightlock\\` <= ?\n             OR \\`heightlock\\` is NULL)\n        AND (\\`timelock\\` <= ?\n             OR \\`timelock\\` is NULL)\n        AND \\`locked\\` = 1\n        AND \\`spent_by\\` IS NULL\n        AND \\`voided\\` = FALSE\n        AND \\`address\\` IN (\n          SELECT \\`address\\`\n            FROM \\`address\\`\n           WHERE \\`wallet_id\\` = ?)`, [currentHeight, now, walletId]);\n    for (const result of results) {\n        const utxo = {\n            txId: result.tx_id,\n            index: result.index,\n            tokenId: result.token_id,\n            address: result.address,\n            value: result.value,\n            authorities: result.authorities,\n            timelock: result.timelock,\n            heightlock: result.heightlock,\n            locked: result.locked > 0,\n        };\n        utxos.push(utxo);\n    }\n    return utxos;\n};\nexports.getWalletUnlockedUtxos = getWalletUnlockedUtxos;\nconst updateVersionData = async (mysql, data) => {\n    const entry = {\n        id: 1,\n        timestamp: data.timestamp,\n        version: data.version,\n        network: data.network,\n        min_weight: data.minWeight,\n        min_tx_weight: data.minTxWeight,\n        min_tx_weight_coefficient: data.minTxWeightCoefficient,\n        min_tx_weight_k: data.minTxWeightK,\n        token_deposit_percentage: data.tokenDepositPercentage,\n        reward_spend_min_blocks: data.rewardSpendMinBlocks,\n        max_number_inputs: data.maxNumberInputs,\n        max_number_outputs: data.maxNumberOutputs,\n    };\n    await mysql.query('INSERT INTO `version_data` SET ? ON DUPLICATE KEY UPDATE ?', [entry, entry]);\n};\nexports.updateVersionData = updateVersionData;\nconst getVersionData = async (mysql) => {\n    const results = await mysql.query('SELECT * FROM `version_data` WHERE id = 1 LIMIT 1;');\n    if (results.length > 0) {\n        const data = results[0];\n        const entry = {\n            timestamp: data.timestamp,\n            version: data.version,\n            network: data.network,\n            minWeight: data.min_weight,\n            minTxWeight: data.min_tx_weight,\n            minTxWeightCoefficient: data.min_tx_weight_coefficient,\n            minTxWeightK: data.min_tx_weight_k,\n            tokenDepositPercentage: data.token_deposit_percentage,\n            rewardSpendMinBlocks: data.reward_spend_min_blocks,\n            maxNumberInputs: data.max_number_inputs,\n            maxNumberOutputs: data.max_number_outputs,\n        };\n        return entry;\n    }\n    return null;\n};\nexports.getVersionData = getVersionData;\nconst getLatestHeight = async (mysql) => {\n    const results = await mysql.query(`SELECT \\`height\\` AS value\n       FROM \\`transaction\\`\n      WHERE version\n         IN (?)\n      ORDER BY height\n       DESC\n      LIMIT 1`, [BLOCK_VERSION]);\n    if (results.length > 0 && results[0].value !== null) {\n        return results[0].value;\n    }\n    return 0;\n};\nexports.getLatestHeight = getLatestHeight;\nconst getLatestBlockByHeight = async (mysql) => {\n    const results = await mysql.query(`SELECT *\n       FROM \\`transaction\\`\n      WHERE \\`version\\` IN (?)\n      ORDER BY height DESC\n      LIMIT 1`, [BLOCK_VERSION]);\n    if (results.length > 0) {\n        return {\n            txId: results[0].tx_id,\n            height: results[0].height,\n            timestamp: results[0].timestamp,\n        };\n    }\n    return null;\n};\nexports.getLatestBlockByHeight = getLatestBlockByHeight;\nconst getBlockByHeight = async (mysql, height) => {\n    const results = await mysql.query(`SELECT *\n       FROM \\`transaction\\`\n      WHERE \\`height\\` = ?\n        AND \\`version\\` IN (?)\n      LIMIT 1`, [height, BLOCK_VERSION]);\n    if (results.length > 0) {\n        return {\n            txId: results[0].tx_id,\n            height: results[0].height,\n            timestamp: results[0].timestamp,\n        };\n    }\n    return null;\n};\nexports.getBlockByHeight = getBlockByHeight;\nconst storeTokenInformation = async (mysql, tokenId, tokenName, tokenSymbol) => {\n    const entry = { id: tokenId, name: tokenName, symbol: tokenSymbol };\n    await mysql.query('INSERT INTO `token` SET ?', [entry]);\n};\nexports.storeTokenInformation = storeTokenInformation;\nconst getTokenInformation = async (mysql, tokenId) => {\n    const results = await mysql.query('SELECT * FROM `token` WHERE `id` = ?', [tokenId]);\n    if (results.length === 0)\n        return null;\n    return new types_1.TokenInfo(tokenId, results[0].name, results[0].symbol);\n};\nexports.getTokenInformation = getTokenInformation;\nconst getUnusedAddresses = async (mysql, walletId) => {\n    const addresses = [];\n    const results = await mysql.query('SELECT `address` FROM `address` WHERE `wallet_id` = ? AND `transactions` = 0 ORDER BY `index` ASC', [walletId]);\n    for (const entry of results) {\n        const address = entry.address;\n        addresses.push(address);\n    }\n    return addresses;\n};\nexports.getUnusedAddresses = getUnusedAddresses;\nconst markUtxosWithProposalId = async (mysql, txProposalId, utxos) => {\n    const entries = utxos.map((utxo, index) => ([utxo.txId, utxo.index, '', '', 0, 0, null, null, false, txProposalId, index, null, 0]));\n    await mysql.query(`INSERT INTO \\`tx_output\\`\n          VALUES ?\n              ON DUPLICATE KEY\\\n          UPDATE \\`tx_proposal\\` = VALUES(\\`tx_proposal\\`),\n                 \\`tx_proposal_index\\` = VALUES(\\`tx_proposal_index\\`)`, [entries]);\n};\nexports.markUtxosWithProposalId = markUtxosWithProposalId;\nconst createTxProposal = async (mysql, txProposalId, walletId, now) => {\n    const entry = { id: txProposalId, wallet_id: walletId, status: types_1.TxProposalStatus.OPEN, created_at: now };\n    await mysql.query('INSERT INTO `tx_proposal` SET ?', [entry]);\n};\nexports.createTxProposal = createTxProposal;\nconst updateTxProposal = async (mysql, txProposalIds, now, status) => {\n    await mysql.query(`\n    UPDATE \\`tx_proposal\\`\n       SET \\`updated_at\\` = ?,\n           \\`status\\` = ?\n     WHERE \\`id\\` IN (?)`, [\n        now,\n        status,\n        txProposalIds,\n    ]);\n};\nexports.updateTxProposal = updateTxProposal;\nconst getTxProposal = async (mysql, txProposalId) => {\n    const results = await mysql.query('SELECT * FROM `tx_proposal` WHERE `id` = ?', [txProposalId]);\n    if (results.length === 0)\n        return null;\n    return {\n        id: txProposalId,\n        walletId: results[0].wallet_id,\n        status: results[0].status,\n        createdAt: results[0].created_at,\n        updatedAt: results[0].updated_at,\n    };\n};\nexports.getTxProposal = getTxProposal;\nconst releaseTxProposalUtxos = async (mysql, txProposalIds) => {\n    const result = await mysql.query(`UPDATE \\`tx_output\\`\n        SET \\`tx_proposal\\` = NULL,\n            \\`tx_proposal_index\\` = NULL\n      WHERE \\`tx_proposal\\` IN (?)`, [txProposalIds]);\n    assert_1.strict.strictEqual(result.affectedRows, txProposalIds.length, 'Not all utxos were correctly updated');\n};\nexports.releaseTxProposalUtxos = releaseTxProposalUtxos;\nconst getTxsAfterHeight = async (mysql, height) => {\n    const results = await mysql.query(`SELECT *\n       FROM \\`transaction\\`\n      WHERE \\`height\\` > ?\n        AND \\`voided\\` = FALSE`, [height]);\n    return (0, utils_2.getTxsFromDBResult)(results);\n};\nexports.getTxsAfterHeight = getTxsAfterHeight;\nconst getTxOutputs = async (mysql, transactions) => {\n    const txIds = transactions.map((tx) => tx.txId);\n    const results = await mysql.query(`SELECT *\n       FROM \\`tx_output\\`\n      WHERE \\`tx_id\\` IN (?)`, [txIds]);\n    const utxos = [];\n    for (const result of results) {\n        const utxo = {\n            txId: result.tx_id,\n            index: result.index,\n            tokenId: result.token_id,\n            address: result.address,\n            value: result.value,\n            authorities: result.authorities,\n            timelock: result.timelock,\n            heightlock: result.heightlock,\n            locked: result.locked > 0,\n            txProposalId: result.tx_proposal,\n            txProposalIndex: result.tx_proposal_index,\n            spentBy: result.spent_by ? result.spent_by : null,\n        };\n        utxos.push(utxo);\n    }\n    return utxos;\n};\nexports.getTxOutputs = getTxOutputs;\nconst getTransactionsById = async (mysql, txIds) => {\n    if (txIds.length === 0) {\n        return [];\n    }\n    const results = await mysql.query(`SELECT *\n       FROM \\`transaction\\`\n      WHERE \\`tx_id\\` IN (?)\n        AND \\`voided\\` = FALSE`, [txIds]);\n    return (0, utils_2.getTxsFromDBResult)(results);\n};\nexports.getTransactionsById = getTransactionsById;\nconst getTxOutputsBySpent = async (mysql, txIds) => {\n    const results = await mysql.query(`SELECT *\n       FROM \\`tx_output\\`\n      WHERE \\`spent_by\\` IN (?)`, [txIds]);\n    const utxos = [];\n    for (const result of results) {\n        const utxo = {\n            txId: result.tx_id,\n            index: result.index,\n            tokenId: result.token_id,\n            address: result.address,\n            value: result.value,\n            authorities: result.authorities,\n            timelock: result.timelock,\n            heightlock: result.heightlock,\n            locked: result.locked > 0,\n            txProposalId: result.tx_proposal,\n            txProposalIndex: result.tx_proposal_index,\n            spentBy: result.spent_by ? result.spent_by : null,\n        };\n        utxos.push(utxo);\n    }\n    return utxos;\n};\nexports.getTxOutputsBySpent = getTxOutputsBySpent;\nconst unspendUtxos = async (mysql, txOutputs) => {\n    const txIdIndexList = txOutputs.map((txOutput) => [txOutput.txId, txOutput.index]);\n    await mysql.query(`UPDATE \\`tx_output\\`\n        SET \\`spent_by\\` = NULL\n      WHERE (\\`tx_id\\`, \\`index\\`) IN (?)`, [txIdIndexList]);\n};\nexports.unspendUtxos = unspendUtxos;\nconst removeTxsHeight = async (mysql, txs) => {\n    const txIds = txs.map((tx) => tx.txId);\n    await mysql.query(`UPDATE \\`transaction\\`\n        SET \\`height\\` = NULL\n      WHERE \\`tx_id\\` IN (?)`, [txIds]);\n};\nexports.removeTxsHeight = removeTxsHeight;\nconst markUtxosAsVoided = async (mysql, utxos) => {\n    const txIds = utxos.map((tx) => tx.txId);\n    await mysql.query(`\n    UPDATE \\`tx_output\\`\n       SET \\`voided\\` = TRUE\n     WHERE \\`tx_id\\` IN (?)`, [txIds]);\n};\nexports.markUtxosAsVoided = markUtxosAsVoided;\nconst deleteBlocksAfterHeight = async (mysql, height) => {\n    await mysql.query(`DELETE FROM \\`transaction\\`\n      WHERE height > ?\n        AND version IN (?)`, [height, BLOCK_VERSION]);\n};\nexports.deleteBlocksAfterHeight = deleteBlocksAfterHeight;\nconst markTxsAsVoided = async (mysql, transactions) => {\n    const txIds = transactions.map((tx) => tx.txId);\n    await mysql.query(`UPDATE \\`transaction\\`\n        SET \\`voided\\` = TRUE\n      WHERE \\`tx_id\\` IN (?)`, [txIds]);\n};\nexports.markTxsAsVoided = markTxsAsVoided;\nconst markAddressTxHistoryAsVoided = async (mysql, transactions) => {\n    const txIds = transactions.map((tx) => tx.txId);\n    await mysql.query(`UPDATE \\`address_tx_history\\`\n        SET \\`voided\\` = TRUE\n      WHERE \\`tx_id\\` IN (?)`, [txIds]);\n};\nexports.markAddressTxHistoryAsVoided = markAddressTxHistoryAsVoided;\nconst markWalletTxHistoryAsVoided = async (mysql, transactions) => {\n    const txIds = transactions.map((tx) => tx.txId);\n    await mysql.query(`UPDATE \\`wallet_tx_history\\`\n        SET \\`voided\\` = TRUE\n      WHERE \\`tx_id\\` IN (?)`, [txIds]);\n};\nexports.markWalletTxHistoryAsVoided = markWalletTxHistoryAsVoided;\nconst rebuildAddressBalancesFromUtxos = async (mysql, addresses, txList) => {\n    if (txList.length === 0) {\n        throw new Error('Attempted to rebuild address balances but no transactions were affected');\n    }\n    const oldAddressTokenTransactions = await mysql.query(`SELECT \\`address\\`, \\`token_id\\` AS tokenId, \\`transactions\\`, \\`total_received\\` as \\`totalReceived\\`\n       FROM \\`address_balance\\`\n      WHERE \\`address\\` IN (?)`, [addresses]);\n    await mysql.query(`UPDATE \\`address_balance\\`\n        SET \\`unlocked_balance\\` = 0,\n            \\`locked_balance\\` = 0,\n            \\`locked_authorities\\` = 0,\n            \\`unlocked_authorities\\` = 0,\n            \\`timelock_expires\\` = NULL,\n            \\`transactions\\` = 0\n      WHERE \\`address\\` IN (?)`, [addresses]);\n    await mysql.query(`\n    INSERT INTO address_balance (\n      \\`address\\`,\n      \\`token_id\\`,\n      \\`unlocked_balance\\`,\n      \\`locked_balance\\`,\n      \\`unlocked_authorities\\`,\n      \\`locked_authorities\\`,\n      \\`timelock_expires\\`,\n      \\`transactions\\`\n    )\n        SELECT address,\n                token_id,\n                SUM(\\`value\\`), -- unlocked_balance\n                0,\n                BIT_OR(\\`authorities\\`), -- unlocked_authorities\n                0, -- locked_authorities\n                NULL, -- timelock_expires\n                0 -- transactions\n          FROM \\`tx_output\\`\n         WHERE spent_by IS NULL\n           AND voided = FALSE\n           AND locked = FALSE\n           AND address IN (?)\n      GROUP BY address, token_id\n   ON DUPLICATE KEY UPDATE\n    unlocked_balance = VALUES(unlocked_balance),\n    unlocked_authorities = VALUES(unlocked_authorities)\n  `, [addresses]);\n    await mysql.query(`\n    INSERT INTO \\`address_balance\\` (\n      \\`address\\`,\n      \\`token_id\\`,\n      \\`unlocked_balance\\`,\n      \\`locked_balance\\`,\n      \\`locked_authorities\\`,\n      \\`timelock_expires\\`,\n      \\`transactions\\`\n    )\n       SELECT address,\n              token_id,\n              0 AS unlocked_balance,\n              SUM(\\`value\\`) AS locked_balance,\n              BIT_OR(\\`authorities\\`) AS locked_authorities,\n              MIN(\\`timelock\\`) AS timelock_expires,\n              0 -- transactions\n         FROM \\`tx_output\\`\n        WHERE spent_by IS NULL\n          AND voided = FALSE\n          AND locked = TRUE\n          AND address IN (?)\n     GROUP BY \\`address\\`, \\`token_id\\`\n   ON DUPLICATE KEY UPDATE\n    locked_balance = VALUES(locked_balance),\n    locked_authorities = VALUES(locked_authorities),\n    timelock_expires = VALUES(timelock_expires)\n   `, [addresses]);\n    const addressTransactionCount = await (0, exports.getAffectedAddressTxCountFromTxList)(mysql, txList);\n    const addressTotalReceived = await (0, exports.getAffectedAddressTotalReceivedFromTxList)(mysql, txList);\n    const tokenTransactionCount = await (0, exports.getAffectedTokenTxCountFromTxList)(mysql, txList);\n    const finalValues = oldAddressTokenTransactions.map(({ address, tokenId, transactions, totalReceived }) => {\n        const diffTransactions = addressTransactionCount[`${address}_${tokenId}`] || 0;\n        const diffTotalReceived = addressTotalReceived[`${address}_${tokenId}`] || 0;\n        return [transactions - diffTransactions, totalReceived - diffTotalReceived, address, tokenId];\n    });\n    for (const item of finalValues) {\n        await mysql.query(`\n      UPDATE \\`address_balance\\`\n        SET \\`transactions\\` = ?,\n            \\`total_received\\` = ?\n       WHERE \\`address\\` = ?\n         AND \\`token_id\\` = ?\n    `, item);\n    }\n    for (const token of Object.keys(tokenTransactionCount)) {\n        await mysql.query(`\n      UPDATE \\`token\\`\n        SET \\`transactions\\` = \\`transactions\\` - ?\n       WHERE \\`id\\` = ?\n    `, [tokenTransactionCount[token], token]);\n    }\n};\nexports.rebuildAddressBalancesFromUtxos = rebuildAddressBalancesFromUtxos;\nconst fetchTx = async (mysql, txId) => {\n    const results = await mysql.query(`SELECT *\n       FROM \\`transaction\\`\n      WHERE \\`tx_id\\` = ?\n        AND \\`voided\\` = FALSE`, [txId]);\n    const txResult = (0, utils_2.getTxsFromDBResult)(results);\n    return (0, lodash_1.get)(txResult, '[0]', null);\n};\nexports.fetchTx = fetchTx;\nconst fetchAddressBalance = async (mysql, addresses) => {\n    const results = await mysql.query(`SELECT *\n       FROM \\`address_balance\\`\n      WHERE \\`address\\` IN (?)\n   ORDER BY \\`address\\`, \\`token_id\\``, [addresses]);\n    return results.map((result) => ({\n        address: result.address,\n        tokenId: result.token_id,\n        unlockedBalance: result.unlocked_balance,\n        lockedBalance: result.locked_balance,\n        lockedAuthorities: result.locked_authorities,\n        unlockedAuthorities: result.unlocked_authorities,\n        timelockExpires: result.timelock_expires,\n        transactions: result.transactions,\n    }));\n};\nexports.fetchAddressBalance = fetchAddressBalance;\nconst fetchAddressTxHistorySum = async (mysql, addresses) => {\n    const results = await mysql.query(`SELECT address,\n            token_id,\n            SUM(\\`balance\\`) AS balance,\n            COUNT(\\`tx_id\\`) AS transactions\n       FROM \\`address_tx_history\\`\n      WHERE \\`address\\` IN (?)\n        AND \\`voided\\` = FALSE\n   GROUP BY address, token_id\n   ORDER BY address, token_id`, [addresses]);\n    return results.map((result) => ({\n        address: result.address,\n        tokenId: result.token_id,\n        balance: result.balance,\n        transactions: result.transactions,\n    }));\n};\nexports.fetchAddressTxHistorySum = fetchAddressTxHistorySum;\nconst filterTxOutputs = async (mysql, filters = { addresses: [] }) => {\n    const finalFilters = Object.assign({ addresses: [], tokenId: '00', authority: 0, ignoreLocked: false, skipSpent: true, biggerThan: -1, smallerThan: wallet_lib_1.constants.MAX_OUTPUT_VALUE + 1 }, filters);\n    if (finalFilters.addresses.length === 0) {\n        throw new Error('Addresses can\\'t be empty.');\n    }\n    const queryParams = [\n        finalFilters.addresses,\n        finalFilters.tokenId,\n    ];\n    if (finalFilters.authority === 0) {\n        queryParams.push(finalFilters.smallerThan);\n        queryParams.push(finalFilters.biggerThan);\n    }\n    else {\n        queryParams.push(finalFilters.authority);\n    }\n    queryParams.push(finalFilters.maxOutputs);\n    const results = await mysql.query(`SELECT *\n       FROM \\`tx_output\\`\n      WHERE \\`address\\`\n         IN (?)\n        AND \\`token_id\\` = ?\n        ${finalFilters.authority !== 0 ? 'AND `authorities` & ? > 0' : 'AND `authorities` = 0'}\n        ${finalFilters.ignoreLocked ? 'AND `locked` = FALSE' : ''}\n        ${finalFilters.authority === 0 ? 'AND value < ?' : ''}\n        ${finalFilters.authority === 0 ? 'AND value > ?' : ''}\n        ${finalFilters.skipSpent ? 'AND `spent_by` IS NULL' : ''}\n        ${finalFilters.skipSpent ? 'AND `tx_proposal` IS NULL' : ''}\n        AND \\`voided\\` = FALSE\n   ORDER BY \\`value\\` DESC\n        ${finalFilters.maxOutputs ? 'LIMIT ?' : ''}\n       `, queryParams);\n    const utxos = results.map(exports.mapDbResultToDbTxOutput);\n    return utxos;\n};\nexports.filterTxOutputs = filterTxOutputs;\nconst mapDbResultToDbTxOutput = (result) => ({\n    txId: result.tx_id,\n    index: result.index,\n    tokenId: result.token_id,\n    address: result.address,\n    value: result.value,\n    authorities: result.authorities,\n    timelock: result.timelock,\n    heightlock: result.heightlock,\n    locked: result.locked > 0,\n    txProposalId: result.tx_proposal,\n    txProposalIndex: result.tx_proposal_index,\n    spentBy: result.spent_by,\n});\nexports.mapDbResultToDbTxOutput = mapDbResultToDbTxOutput;\nconst getTxProposalInputs = async (mysql, txProposalId) => {\n    const inputs = [];\n    const results = await mysql.query('SELECT * FROM `tx_output` WHERE `tx_proposal` = ? ORDER BY `tx_proposal_index` ASC', [txProposalId]);\n    for (const result of results) {\n        const input = {\n            txId: result.tx_id,\n            index: result.index,\n        };\n        inputs.push(input);\n    }\n    return inputs;\n};\nexports.getTxProposalInputs = getTxProposalInputs;\nconst getMempoolTransactionsBeforeDate = async (mysql, date) => {\n    const results = await mysql.query(`SELECT *\n       FROM \\`transaction\\`\n      WHERE \\`timestamp\\` < ?\n        AND \\`voided\\` = FALSE\n        AND \\`height\\` IS NULL`, [date]);\n    return (0, utils_2.getTxsFromDBResult)(results);\n};\nexports.getMempoolTransactionsBeforeDate = getMempoolTransactionsBeforeDate;\nconst addMiner = async (mysql, address, txId) => {\n    await mysql.query(`INSERT INTO \\`miner\\` (address, first_block, last_block, count)\n     VALUES (?, ?, ?, 1)\n         ON DUPLICATE KEY UPDATE last_block = ?, count = count + 1`, [address, txId, txId, txId]);\n};\nexports.addMiner = addMiner;\nconst getMinersList = async (mysql) => {\n    const results = await mysql.query(`\n    SELECT address, first_block, last_block, count\n      FROM miner;\n  `);\n    const minerList = [];\n    for (const result of results) {\n        minerList.push({\n            address: result.address,\n            firstBlock: result.first_block,\n            lastBlock: result.last_block,\n            count: result.count,\n        });\n    }\n    return minerList;\n};\nexports.getMinersList = getMinersList;\nconst getTotalSupply = async (mysql, tokenId) => {\n    const results = await mysql.query(`\n    SELECT SUM(value) as value\n      FROM tx_output\n     WHERE spent_by IS NULL\n       AND token_id = ?\n       AND voided = FALSE\n       AND address != '${BURN_ADDRESS}'\n  `, [tokenId]);\n    if (!results.length) {\n        await (0, alerting_utils_1.addAlert)('Total supply query returned no results', '-', types_1.Severity.MINOR, { tokenId });\n        throw new Error('Total supply query returned no results');\n    }\n    return results[0].value;\n};\nexports.getTotalSupply = getTotalSupply;\nconst getExpiredTimelocksUtxos = async (mysql, now) => {\n    const results = await mysql.query(`\n    SELECT *\n      FROM tx_output\n     WHERE locked = TRUE\n       AND timelock IS NOT NULL\n       AND timelock < ?\n  `, [now]);\n    const lockedUtxos = results.map(exports.mapDbResultToDbTxOutput);\n    return lockedUtxos;\n};\nexports.getExpiredTimelocksUtxos = getExpiredTimelocksUtxos;\nconst getTotalTransactions = async (mysql, tokenId) => {\n    const results = await mysql.query(`\n    SELECT COUNT(DISTINCT(tx_id)) AS count\n      FROM address_tx_history\n     WHERE token_id = ?\n       AND voided = FALSE\n  `, [tokenId]);\n    if (!results.length) {\n        await (0, alerting_utils_1.addAlert)('Total transactions query returned no results', '-', types_1.Severity.MINOR, { tokenId });\n        throw new Error('Total transactions query returned no results');\n    }\n    return results[0].count;\n};\nexports.getTotalTransactions = getTotalTransactions;\nconst getAvailableAuthorities = async (mysql, tokenId) => {\n    const results = await mysql.query(`\n  SELECT *\n    FROM tx_output\n   WHERE authorities > 0\n     AND token_id = ?\n     AND voided = FALSE\n     AND locked = FALSE\n     AND spent_by IS NULL\n  `, [tokenId]);\n    const utxos = results.map(exports.mapDbResultToDbTxOutput);\n    return utxos;\n};\nexports.getAvailableAuthorities = getAvailableAuthorities;\nconst getAffectedAddressTxCountFromTxList = async (mysql, txList) => {\n    const results = await mysql.query(`\n    SELECT address, COUNT(DISTINCT(tx_id)) AS txCount, token_id as tokenId\n      FROM address_tx_history\n     WHERE tx_id IN (?)\n       AND voided = TRUE\n  GROUP BY address, token_id\n  `, [txList]);\n    const addressTransactions = results.reduce((acc, result) => {\n        const address = result.address;\n        const txCount = result.txCount;\n        const tokenId = result.tokenId;\n        acc[`${address}_${tokenId}`] = txCount;\n        return acc;\n    }, {});\n    return addressTransactions;\n};\nexports.getAffectedAddressTxCountFromTxList = getAffectedAddressTxCountFromTxList;\nconst getAffectedTokenTxCountFromTxList = async (mysql, txList) => {\n    const results = await mysql.query(`\n    SELECT token_id AS tokenId, COUNT(DISTINCT(tx_id)) AS txCount\n      FROM address_tx_history\n     WHERE tx_id IN (?)\n       AND voided = TRUE\n  GROUP BY token_id\n  `, [txList]);\n    const tokenTransactions = results.reduce((acc, result) => {\n        const tokenId = result.tokenId;\n        const txCount = result.txCount;\n        acc[tokenId] = txCount;\n        return acc;\n    }, {});\n    return tokenTransactions;\n};\nexports.getAffectedTokenTxCountFromTxList = getAffectedTokenTxCountFromTxList;\nconst getAffectedAddressTotalReceivedFromTxList = async (mysql, txList) => {\n    const results = await mysql.query(`\n    SELECT address, token_id as tokenId, SUM(value) as total\n      FROM tx_output\n     WHERE tx_id IN (?)\n       AND voided = TRUE\n  GROUP BY address, token_id\n  `, [txList]);\n    const addressTotalReceivedMap = results.reduce((acc, result) => {\n        const address = result.address;\n        const total = result.total;\n        const tokenId = result.tokenId;\n        acc[`${address}_${tokenId}`] = total;\n        return acc;\n    }, {});\n    return addressTotalReceivedMap;\n};\nexports.getAffectedAddressTotalReceivedFromTxList = getAffectedAddressTotalReceivedFromTxList;\nconst incrementTokensTxCount = async (mysql, tokenList) => {\n    await mysql.query(`\n    UPDATE \\`token\\`\n       SET \\`transactions\\` = \\`transactions\\` + 1\n     WHERE \\`id\\` IN (?)\n  `, [tokenList]);\n};\nexports.incrementTokensTxCount = incrementTokensTxCount;\nconst existsPushDevice = async (mysql, deviceId, walletId) => {\n    const [{ count }] = await mysql.query(`\n    SELECT COUNT(1) as \\`count\\`\n      FROM \\`push_devices\\` pd\n     WHERE device_id = ?\n       AND wallet_id = ?`, [deviceId, walletId]);\n    return count > 0;\n};\nexports.existsPushDevice = existsPushDevice;\nconst registerPushDevice = async (mysql, input) => {\n    await mysql.query(`\n    INSERT\n      INTO \\`push_devices\\` (\n           device_id\n         , wallet_id\n         , push_provider\n         , enable_push\n         , enable_show_amounts)\n    VALUES (?, ?, ?, ?, ?)\n        ON DUPLICATE KEY UPDATE\n           updated_at = CURRENT_TIMESTAMP`, [input.deviceId, input.walletId, input.pushProvider, input.enablePush, input.enableShowAmounts]);\n};\nexports.registerPushDevice = registerPushDevice;\nconst removeAllPushDevicesByDeviceId = async (mysql, deviceId) => {\n    await mysql.query(`\n     DELETE\n       FROM \\`push_devices\\`\n      WHERE\n  device_id = ?\n    `, [deviceId]);\n};\nexports.removeAllPushDevicesByDeviceId = removeAllPushDevicesByDeviceId;\nconst updatePushDevice = async (mysql, input) => {\n    await mysql.query(`\n    UPDATE \\`push_devices\\`\n       SET enable_push = ?\n         , enable_show_amounts = ?\n     WHERE device_id = ?\n       AND wallet_id = ?`, [input.enablePush, input.enableShowAmounts, input.deviceId, input.walletId]);\n};\nexports.updatePushDevice = updatePushDevice;\nconst unregisterPushDevice = async (mysql, deviceId, walletId) => {\n    if (walletId) {\n        await mysql.query(`\n      DELETE\n        FROM \\`push_devices\\`\n       WHERE device_id = ?\n         AND wallet_id = ?`, [deviceId, walletId]);\n    }\n    else {\n        await mysql.query(`\n      DELETE\n        FROM \\`push_devices\\`\n       WHERE device_id = ?`, [deviceId]);\n    }\n};\nexports.unregisterPushDevice = unregisterPushDevice;\nconst getTransactionById = async (mysql, txId, walletId) => {\n    const result = await mysql.query(`\n       SELECT\n              transaction.tx_id AS tx_id\n            , transaction.timestamp AS timestamp\n            , transaction.version AS version\n            , transaction.voided AS voided\n            , transaction.height AS height\n            , transaction.weight AS weight\n            , wallet_tx_history.balance AS balance\n            , wallet_tx_history.token_id AS token_id\n            , token.name AS name\n            , token.symbol AS symbol\n         FROM wallet_tx_history\n   INNER JOIN transaction ON transaction.tx_id = wallet_tx_history.tx_id\n   INNER JOIN token ON wallet_tx_history.token_id = token.id\n        WHERE transaction.tx_id = ?\n          AND transaction.voided = FALSE\n          AND wallet_tx_history.wallet_id = ?`, [txId, walletId]);\n    const txTokens = [];\n    result.forEach((eachTxToken) => {\n        const txToken = {\n            txId: eachTxToken.tx_id,\n            timestamp: eachTxToken.timestamp,\n            version: eachTxToken.version,\n            voided: !!eachTxToken.voided,\n            weight: eachTxToken.weight,\n            balance: eachTxToken.balance,\n            tokenId: eachTxToken.token_id,\n            tokenName: eachTxToken.name,\n            tokenSymbol: eachTxToken.symbol,\n        };\n        txTokens.push(txToken);\n    });\n    return txTokens;\n};\nexports.getTransactionById = getTransactionById;\nconst existsWallet = async (mysql, walletId) => {\n    const [{ count }] = (await mysql.query(`\n    SELECT COUNT(1) as \\`count\\`\n      FROM \\`wallet\\` pd\n     WHERE id = ?`, [walletId]));\n    return count > 0;\n};\nexports.existsWallet = existsWallet;\nconst getPushDevice = async (mysql, deviceId) => {\n    const [pushDevice] = await mysql.query(`\n    SELECT *\n      FROM \\`push_devices\\`\n     WHERE device_id = ?`, [deviceId]);\n    if (!pushDevice) {\n        return null;\n    }\n    return {\n        walletId: pushDevice.wallet_id,\n        deviceId: pushDevice.device_id,\n        pushProvider: pushDevice.push_provider,\n        enablePush: !!pushDevice.enable_push,\n        enableShowAmounts: !!pushDevice.enable_show_amounts,\n    };\n};\nexports.getPushDevice = getPushDevice;\nconst getPushDeviceSettingsList = async (mysql, walletIdList) => {\n    const pushDeviceSettingsResult = await mysql.query(`\n    SELECT wallet_id\n         , device_id\n         , enable_push\n         , enable_show_amounts\n      FROM \\`push_devices\\`\n     WHERE wallet_id in (?)`, [walletIdList]);\n    const pushDeviceSettignsList = pushDeviceSettingsResult.map((each) => ({\n        walletId: each.wallet_id,\n        deviceId: each.device_id,\n        enablePush: !!each.enable_push,\n        enableShowAmounts: !!each.enable_show_amounts,\n    }));\n    return pushDeviceSettignsList;\n};\nexports.getPushDeviceSettingsList = getPushDeviceSettingsList;\nconst countStalePushDevices = async (mysql) => {\n    const [{ count }] = await mysql.query(`\n    SELECT COUNT(device_id) as count\n      FROM \\`push_devices\\`\n     WHERE UNIX_TIMESTAMP(updated_at) < UNIX_TIMESTAMP(date_sub(now(), interval 1 month))`);\n    return count;\n};\nexports.countStalePushDevices = countStalePushDevices;\nconst deleteStalePushDevices = async (mysql) => {\n    await mysql.query(`\n    DELETE\n      FROM \\`push_devices\\`\n     WHERE UNIX_TIMESTAMP(updated_at) < UNIX_TIMESTAMP(date_sub(now(), interval 1 month))`);\n};\nexports.deleteStalePushDevices = deleteStalePushDevices;\nconst getTokenSymbols = async (mysql, tokenIdList) => {\n    if (tokenIdList.length === 0)\n        return null;\n    const results = await mysql.query('SELECT `id`, `symbol` FROM `token` WHERE `id` IN (?)', [tokenIdList]);\n    if (results.length === 0)\n        return null;\n    return results.reduce((prev, token) => {\n        prev[token.id] = token.symbol;\n        return prev;\n    }, {});\n};\nexports.getTokenSymbols = getTokenSymbols;\nconst getUnsentTxProposals = async (mysql, txProposalsBefore) => {\n    const result = await mysql.query(`\n    SELECT id\n      FROM \\`tx_proposal\\`\n     WHERE created_at < ?\n       AND status IN (?)`, [txProposalsBefore, [\n            types_1.TxProposalStatus.OPEN,\n            types_1.TxProposalStatus.SEND_ERROR,\n            types_1.TxProposalStatus.CANCELLED,\n        ]]);\n    return result.map((row) => row.id);\n};\nexports.getUnsentTxProposals = getUnsentTxProposals;\nconst getAddressAtIndex = async (mysql, walletId, index) => {\n    const addresses = await mysql.query(`\n    SELECT \\`address\\`, \\`index\\`, \\`transactions\\`\n      FROM \\`address\\` pd\n     WHERE \\`index\\` = ?\n       AND \\`wallet_id\\` = ?\n     LIMIT 1`, [walletId, index]);\n    if (addresses.length <= 0) {\n        return null;\n    }\n    return {\n        address: addresses[0].address,\n        index: addresses[0].index,\n        transactions: addresses[0].transactions,\n    };\n};\nexports.getAddressAtIndex = getAddressAtIndex;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/db/index.ts\n");

/***/ }),

/***/ "./src/db/utils.ts":
/*!*************************!*\
  !*** ./src/db/utils.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.stringMapIterator = exports.WalletBalanceMapConverter = exports.sortBalanceValueByAbsTotal = exports.FromTokenBalanceMapToBalanceValueList = exports.getTxFromDBResult = exports.getTxsFromDBResult = exports.getWalletFromDbEntry = exports.transactionDecorator = exports.rollbackTransaction = exports.commitTransaction = exports.beginTransaction = void 0;\nconst utils_1 = __webpack_require__(/*! @src/utils */ \"./src/utils.ts\");\nconst beginTransaction = async (mysql) => {\n    await mysql.query('START TRANSACTION');\n};\nexports.beginTransaction = beginTransaction;\nconst commitTransaction = async (mysql) => {\n    await mysql.query('COMMIT');\n};\nexports.commitTransaction = commitTransaction;\nconst rollbackTransaction = async (mysql) => {\n    await mysql.query('ROLLBACK');\n};\nexports.rollbackTransaction = rollbackTransaction;\nasync function transactionDecorator(_mysql, wrapped) {\n    return async function wrapper(...args) {\n        try {\n            await (0, exports.beginTransaction)(_mysql);\n            await wrapped.apply(this, args);\n            await (0, exports.commitTransaction)(_mysql);\n        }\n        catch (e) {\n            await (0, exports.rollbackTransaction)(_mysql);\n            throw e;\n        }\n    };\n}\nexports.transactionDecorator = transactionDecorator;\nconst getWalletFromDbEntry = (entry) => ({\n    walletId: (0, utils_1.getWalletId)(entry.xpubkey),\n    xpubkey: entry.xpubkey,\n    authXpubkey: entry.auth_xpubkey,\n    status: entry.status,\n    retryCount: entry.retry_count,\n    maxGap: entry.max_gap,\n    createdAt: entry.created_at,\n    readyAt: entry.ready_at,\n});\nexports.getWalletFromDbEntry = getWalletFromDbEntry;\nconst getTxsFromDBResult = (results) => {\n    const transactions = [];\n    for (const result of results) {\n        const tx = _mapTxRecord2Tx(result);\n        transactions.push(tx);\n    }\n    return transactions;\n};\nexports.getTxsFromDBResult = getTxsFromDBResult;\nconst getTxFromDBResult = (result) => {\n    const { 0: row } = result;\n    return _mapTxRecord2Tx(row);\n};\nexports.getTxFromDBResult = getTxFromDBResult;\nconst _mapTxRecord2Tx = (record) => ({\n    txId: record.tx_id,\n    timestamp: record.timestamp,\n    version: record.version,\n    voided: record.voided === 1,\n    height: record.height,\n    weight: record.weight,\n});\nclass FromTokenBalanceMapToBalanceValueList {\n    static convert(tokenBalanceMap, tokenSymbolsMap) {\n        const entryBalances = Object.entries(tokenBalanceMap.map);\n        const balances = entryBalances.map(([tokenId, balance]) => ({\n            tokenId,\n            tokenSymbol: tokenSymbolsMap[tokenId],\n            lockedAmount: balance.lockedAmount,\n            lockedAuthorities: balance.lockedAuthorities.toJSON(),\n            lockExpires: balance.lockExpires,\n            unlockedAmount: balance.unlockedAmount,\n            unlockedAuthorities: balance.unlockedAuthorities.toJSON(),\n            totalAmountSent: balance.totalAmountSent,\n            total: balance.total(),\n        }));\n        return balances;\n    }\n}\nexports.FromTokenBalanceMapToBalanceValueList = FromTokenBalanceMapToBalanceValueList;\nconst sortBalanceValueByAbsTotal = (balanceA, balanceB) => {\n    if (Math.abs(balanceA.total) - Math.abs(balanceB.total) >= 0)\n        return -1;\n    return 0;\n};\nexports.sortBalanceValueByAbsTotal = sortBalanceValueByAbsTotal;\nclass WalletBalanceMapConverter {\n    static toValue(walletBalanceMap, tokenSymbolsMap) {\n        const walletBalanceEntries = Object.entries(walletBalanceMap);\n        const walletBalanceValueMap = {};\n        for (const [walletId, walletBalance] of walletBalanceEntries) {\n            const sortedTokenBalanceList = FromTokenBalanceMapToBalanceValueList\n                .convert(walletBalance.walletBalanceForTx, tokenSymbolsMap)\n                .sort(exports.sortBalanceValueByAbsTotal);\n            walletBalanceValueMap[walletId] = {\n                addresses: walletBalance.addresses,\n                txId: walletBalance.txId,\n                walletId: walletBalance.walletId,\n                walletBalanceForTx: sortedTokenBalanceList,\n            };\n        }\n        return walletBalanceValueMap;\n    }\n}\nexports.WalletBalanceMapConverter = WalletBalanceMapConverter;\nconst stringMapIterator = (stringMap) => (Object.entries(stringMap));\nexports.stringMapIterator = stringMapIterator;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/db/utils.ts\n");

/***/ }),

/***/ "./src/fullnode.ts":
/*!*************************!*\
  !*** ./src/fullnode.ts ***!
  \*************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.create = exports.TIMEOUT = exports.BASE_URL = void 0;\nconst axios_1 = __importDefault(__webpack_require__(/*! axios */ \"axios\"));\nexports.BASE_URL = process.env.DEFAULT_SERVER;\nexports.TIMEOUT = 10000;\nconst create = (baseURL = exports.BASE_URL) => {\n    const api = axios_1.default.create({\n        baseURL,\n        headers: {},\n        timeout: exports.TIMEOUT,\n    });\n    const downloadTx = async (txId) => {\n        const response = await api.get(`transaction?id=${txId}`, {\n            data: null,\n            headers: { 'content-type': 'application/json' },\n        });\n        return response.data;\n    };\n    const getConfirmationData = async (txId) => {\n        const response = await api.get(`transaction_acc_weight?id=${txId}`, {\n            data: null,\n            headers: { 'content-type': 'application/json' },\n        });\n        return response.data;\n    };\n    const queryGraphvizNeighbours = async (txId, graphType, maxLevel) => {\n        const url = `graphviz/neighbours.dot/?tx=${txId}&graph_type=${graphType}&max_level=${maxLevel}`;\n        const response = await api.get(url, {\n            data: null,\n            headers: { 'content-type': 'application/json' },\n        });\n        return response.data;\n    };\n    return {\n        api,\n        downloadTx,\n        getConfirmationData,\n        queryGraphvizNeighbours,\n    };\n};\nexports.create = create;\nexports[\"default\"] = (0, exports.create)();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvZnVsbG5vZGUudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBT0E7QUFFQTtBQUNBO0FBT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUVBO0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQTdDQTtBQStDQSIsInNvdXJjZXMiOlsid2VicGFjazovL3dhbGxldC1zZXJ2aWNlLy4vc3JjL2Z1bGxub2RlLnRzPzhjNTIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEhhdGhvciBMYWJzIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pbXBvcnQgYXhpb3MgZnJvbSAnYXhpb3MnO1xuXG5leHBvcnQgY29uc3QgQkFTRV9VUkwgPSBwcm9jZXNzLmVudi5ERUZBVUxUX1NFUlZFUjtcbmV4cG9ydCBjb25zdCBUSU1FT1VUID0gMTAwMDA7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhhbmRsZXIgZm9yIHJlcXVlc3RpbmcgZGF0YSBmcm9tIHRoZSBmdWxsbm9kZVxuICpcbiAqIEBwYXJhbSBiYXNlVVJMIC0gVGhlIGJhc2UgVVJMIGZvciB0aGUgZnVsbC1ub2RlLiBEZWZhdWx0cyB0byBgZW52LkRFRkFVTFRfU0VSVkVSYFxuICovXG5leHBvcnQgY29uc3QgY3JlYXRlID0gKGJhc2VVUkwgPSBCQVNFX1VSTCk6IGFueSA9PiB7XG4gIGNvbnN0IGFwaSA9IGF4aW9zLmNyZWF0ZSh7XG4gICAgYmFzZVVSTCxcbiAgICBoZWFkZXJzOiB7fSxcbiAgICB0aW1lb3V0OiBUSU1FT1VULFxuICB9KTtcblxuICBjb25zdCBkb3dubG9hZFR4ID0gYXN5bmMgKHR4SWQ6IHN0cmluZykgPT4ge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXBpLmdldChgdHJhbnNhY3Rpb24/aWQ9JHt0eElkfWAsIHtcbiAgICAgIGRhdGE6IG51bGwsXG4gICAgICBoZWFkZXJzOiB7ICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcbiAgICB9KTtcblxuICAgIHJldHVybiByZXNwb25zZS5kYXRhO1xuICB9O1xuXG4gIGNvbnN0IGdldENvbmZpcm1hdGlvbkRhdGEgPSBhc3luYyAodHhJZDogc3RyaW5nKSA9PiB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkuZ2V0KGB0cmFuc2FjdGlvbl9hY2Nfd2VpZ2h0P2lkPSR7dHhJZH1gLCB7XG4gICAgICBkYXRhOiBudWxsLFxuICAgICAgaGVhZGVyczogeyAnY29udGVudC10eXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXG4gICAgfSk7XG5cbiAgICByZXR1cm4gcmVzcG9uc2UuZGF0YTtcbiAgfTtcblxuICBjb25zdCBxdWVyeUdyYXBodml6TmVpZ2hib3VycyA9IGFzeW5jIChcbiAgICB0eElkOiBzdHJpbmcsXG4gICAgZ3JhcGhUeXBlOiBzdHJpbmcsXG4gICAgbWF4TGV2ZWw6IG51bWJlcixcbiAgKSA9PiB7XG4gICAgY29uc3QgdXJsID0gYGdyYXBodml6L25laWdoYm91cnMuZG90Lz90eD0ke3R4SWR9JmdyYXBoX3R5cGU9JHtncmFwaFR5cGV9Jm1heF9sZXZlbD0ke21heExldmVsfWA7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBhcGkuZ2V0KHVybCwge1xuICAgICAgZGF0YTogbnVsbCxcbiAgICAgIGhlYWRlcnM6IHsgJ2NvbnRlbnQtdHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LFxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHJlc3BvbnNlLmRhdGE7XG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBhcGksIC8vIGV4cG9ydGVkIHNvIHdlIGNhbiBtb2NrIGl0IG9uIHRoZSB0ZXN0c1xuICAgIGRvd25sb2FkVHgsXG4gICAgZ2V0Q29uZmlybWF0aW9uRGF0YSxcbiAgICBxdWVyeUdyYXBodml6TmVpZ2hib3VycyxcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZSgpO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/fullnode.ts\n");

/***/ }),

/***/ "./src/logger.ts":
/*!***********************!*\
  !*** ./src/logger.ts ***!
  \***********************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst winston_1 = __webpack_require__(/*! winston */ \"winston\");\nconst createDefaultLogger = () => (0, winston_1.createLogger)({\n    level: process.env.LOG_LEVEL || 'info',\n    format: winston_1.format.json(),\n    transports: [\n        new winston_1.transports.Console(),\n    ],\n});\nexports[\"default\"] = createDefaultLogger;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvbG9nZ2VyLnRzIiwibWFwcGluZ3MiOiI7O0FBQUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2FsbGV0LXNlcnZpY2UvLi9zcmMvbG9nZ2VyLnRzP2Q4M2MiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY3JlYXRlTG9nZ2VyLCBmb3JtYXQsIHRyYW5zcG9ydHMsIExvZ2dlciB9IGZyb20gJ3dpbnN0b24nO1xuXG5jb25zdCBjcmVhdGVEZWZhdWx0TG9nZ2VyID0gKCk6IExvZ2dlciA9PiBjcmVhdGVMb2dnZXIoe1xuICBsZXZlbDogcHJvY2Vzcy5lbnYuTE9HX0xFVkVMIHx8ICdpbmZvJyxcbiAgZm9ybWF0OiBmb3JtYXQuanNvbigpLFxuICB0cmFuc3BvcnRzOiBbXG4gICAgbmV3IHRyYW5zcG9ydHMuQ29uc29sZSgpLFxuICBdLFxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZURlZmF1bHRMb2dnZXI7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/logger.ts\n");

/***/ }),

/***/ "./src/types.ts":
/*!**********************!*\
  !*** ./src/types.ts ***!
  \**********************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Severity = exports.PushProvider = exports.InputSelectionAlgo = exports.TokenBalanceMap = exports.WalletTokenBalance = exports.Balance = exports.Authorities = exports.TokenInfo = exports.WalletStatus = exports.TxProposalStatus = void 0;\nconst wallet_lib_1 = __importDefault(__webpack_require__(/*! @hathor/wallet-lib */ \"@hathor/wallet-lib\"));\nconst utils_1 = __webpack_require__(/*! @src/utils */ \"./src/utils.ts\");\nvar TxProposalStatus;\n(function (TxProposalStatus) {\n    TxProposalStatus[\"OPEN\"] = \"open\";\n    TxProposalStatus[\"SENT\"] = \"sent\";\n    TxProposalStatus[\"SEND_ERROR\"] = \"send_error\";\n    TxProposalStatus[\"CANCELLED\"] = \"cancelled\";\n})(TxProposalStatus = exports.TxProposalStatus || (exports.TxProposalStatus = {}));\nvar WalletStatus;\n(function (WalletStatus) {\n    WalletStatus[\"CREATING\"] = \"creating\";\n    WalletStatus[\"READY\"] = \"ready\";\n    WalletStatus[\"ERROR\"] = \"error\";\n})(WalletStatus = exports.WalletStatus || (exports.WalletStatus = {}));\nclass TokenInfo {\n    constructor(id, name, symbol, transactions) {\n        this.id = id;\n        this.name = name;\n        this.symbol = symbol;\n        this.transactions = transactions || 0;\n        const hathorConfig = wallet_lib_1.default.constants.HATHOR_TOKEN_CONFIG;\n        if (this.id === hathorConfig.uid) {\n            this.name = hathorConfig.name;\n            this.symbol = hathorConfig.symbol;\n        }\n    }\n    toJSON() {\n        return {\n            id: this.id,\n            name: this.name,\n            symbol: this.symbol,\n        };\n    }\n}\nexports.TokenInfo = TokenInfo;\nclass Authorities {\n    constructor(authorities) {\n        let tmp = [];\n        if (authorities instanceof Array) {\n            tmp = authorities;\n        }\n        else if (authorities != null) {\n            tmp = Authorities.intToArray(authorities);\n        }\n        this.array = new Array(Authorities.LENGTH - tmp.length).fill(0).concat(tmp);\n    }\n    toInteger() {\n        let n = 0;\n        for (let i = 0; i < this.array.length; i++) {\n            if (this.array[i] === 0)\n                continue;\n            n += this.array[i] * (2 ** (this.array.length - i - 1));\n        }\n        return n;\n    }\n    toUnsignedInteger() {\n        return Math.abs(this.toInteger());\n    }\n    clone() {\n        return new Authorities(this.array);\n    }\n    toNegative() {\n        const finalAuthorities = this.array.map((value) => {\n            if (value === 0)\n                return 0;\n            return (-1) * value;\n        });\n        return new Authorities(finalAuthorities);\n    }\n    hasNegativeValue() {\n        return this.array.some((authority) => authority < 0);\n    }\n    static intToArray(authorities) {\n        const ret = [];\n        for (const c of authorities.toString(2)) {\n            ret.push(parseInt(c, 10));\n        }\n        return ret;\n    }\n    static merge(a1, a2) {\n        return new Authorities(a1.array.map((value, index) => Math.sign(value + a2.array[index])));\n    }\n    toJSON() {\n        const authorities = this.toInteger();\n        return {\n            mint: (authorities & wallet_lib_1.default.constants.TOKEN_MINT_MASK) > 0,\n            melt: (authorities & wallet_lib_1.default.constants.TOKEN_MELT_MASK) > 0,\n        };\n    }\n}\nexports.Authorities = Authorities;\nAuthorities.LENGTH = 8;\nclass Balance {\n    constructor(totalAmountSent = 0, unlockedAmount = 0, lockedAmount = 0, lockExpires = null, unlockedAuthorities = null, lockedAuthorities = null) {\n        this.totalAmountSent = totalAmountSent;\n        this.unlockedAmount = unlockedAmount;\n        this.lockedAmount = lockedAmount;\n        this.lockExpires = lockExpires;\n        this.unlockedAuthorities = unlockedAuthorities || new Authorities();\n        this.lockedAuthorities = lockedAuthorities || new Authorities();\n    }\n    total() {\n        return this.unlockedAmount + this.lockedAmount;\n    }\n    authorities() {\n        return Authorities.merge(this.unlockedAuthorities, this.lockedAuthorities);\n    }\n    clone() {\n        return new Balance(this.totalAmountSent, this.unlockedAmount, this.lockedAmount, this.lockExpires, this.unlockedAuthorities.clone(), this.lockedAuthorities.clone());\n    }\n    static merge(b1, b2) {\n        let lockExpires = null;\n        if (b1.lockExpires === null) {\n            lockExpires = b2.lockExpires;\n        }\n        else if (b2.lockExpires === null) {\n            lockExpires = b1.lockExpires;\n        }\n        else {\n            lockExpires = Math.min(b1.lockExpires, b2.lockExpires);\n        }\n        return new Balance(b1.totalAmountSent + b2.totalAmountSent, b1.unlockedAmount + b2.unlockedAmount, b1.lockedAmount + b2.lockedAmount, lockExpires, Authorities.merge(b1.unlockedAuthorities, b2.unlockedAuthorities), Authorities.merge(b1.lockedAuthorities, b2.lockedAuthorities));\n    }\n}\nexports.Balance = Balance;\nclass WalletTokenBalance {\n    constructor(token, balance, transactions) {\n        this.token = token;\n        this.balance = balance;\n        this.transactions = transactions;\n    }\n    toJSON() {\n        return {\n            token: this.token,\n            transactions: this.transactions,\n            balance: {\n                unlocked: this.balance.unlockedAmount,\n                locked: this.balance.lockedAmount,\n            },\n            tokenAuthorities: {\n                unlocked: this.balance.unlockedAuthorities,\n                locked: this.balance.lockedAuthorities,\n            },\n            lockExpires: this.balance.lockExpires,\n        };\n    }\n}\nexports.WalletTokenBalance = WalletTokenBalance;\nclass TokenBalanceMap {\n    constructor() {\n        this.map = {};\n    }\n    get(tokenId) {\n        return this.map[tokenId] || new Balance(0, 0, 0);\n    }\n    set(tokenId, balance) {\n        this.map[tokenId] = balance;\n    }\n    getTokens() {\n        return Object.keys(this.map);\n    }\n    iterator() {\n        return Object.entries(this.map);\n    }\n    clone() {\n        const cloned = new TokenBalanceMap();\n        for (const [token, balance] of this.iterator()) {\n            cloned.set(token, balance.clone());\n        }\n        return cloned;\n    }\n    static fromStringMap(tokenBalanceMap) {\n        const obj = new TokenBalanceMap();\n        for (const [tokenId, balance] of Object.entries(tokenBalanceMap)) {\n            obj.set(tokenId, new Balance(balance.totalSent, balance.unlocked, balance.locked, balance.lockExpires || null, balance.unlockedAuthorities, balance.lockedAuthorities));\n        }\n        return obj;\n    }\n    static merge(balanceMap1, balanceMap2) {\n        if (!balanceMap1)\n            return balanceMap2.clone();\n        if (!balanceMap2)\n            return balanceMap1.clone();\n        const mergedMap = balanceMap1.clone();\n        for (const [token, balance] of balanceMap2.iterator()) {\n            const finalBalance = Balance.merge(mergedMap.get(token), balance);\n            mergedMap.set(token, finalBalance);\n        }\n        return mergedMap;\n    }\n    static fromTxOutput(output) {\n        const token = output.token;\n        const value = output.value;\n        const obj = new TokenBalanceMap();\n        if (output.locked) {\n            if ((0, utils_1.isAuthority)(output.token_data)) {\n                obj.set(token, new Balance(0, 0, 0, output.decoded.timelock, 0, new Authorities(output.value)));\n            }\n            else {\n                obj.set(token, new Balance(value, 0, value, output.decoded.timelock, 0, 0));\n            }\n        }\n        else if ((0, utils_1.isAuthority)(output.token_data)) {\n            obj.set(token, new Balance(0, 0, 0, null, new Authorities(output.value), 0));\n        }\n        else {\n            obj.set(token, new Balance(value, value, 0, null));\n        }\n        return obj;\n    }\n    static fromTxInput(input) {\n        const token = input.token;\n        const obj = new TokenBalanceMap();\n        if ((0, utils_1.isAuthority)(input.token_data)) {\n            const authorities = new Authorities(input.value);\n            obj.set(token, new Balance(0, 0, 0, null, authorities.toNegative(), new Authorities(0)));\n        }\n        else {\n            obj.set(token, new Balance(0, -input.value, 0, null));\n        }\n        return obj;\n    }\n}\nexports.TokenBalanceMap = TokenBalanceMap;\nvar InputSelectionAlgo;\n(function (InputSelectionAlgo) {\n    InputSelectionAlgo[\"USE_LARGER_UTXOS\"] = \"use-larger-utxos\";\n})(InputSelectionAlgo = exports.InputSelectionAlgo || (exports.InputSelectionAlgo = {}));\nvar PushProvider;\n(function (PushProvider) {\n    PushProvider[\"IOS\"] = \"ios\";\n    PushProvider[\"ANDROID\"] = \"android\";\n})(PushProvider = exports.PushProvider || (exports.PushProvider = {}));\nvar Severity;\n(function (Severity) {\n    Severity[\"CRITICAL\"] = \"critical\";\n    Severity[\"MAJOR\"] = \"major\";\n    Severity[\"MEDIUM\"] = \"medium\";\n    Severity[\"MINOR\"] = \"minor\";\n    Severity[\"WARNING\"] = \"warning\";\n    Severity[\"INFO\"] = \"info\";\n})(Severity = exports.Severity || (exports.Severity = {}));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/types.ts\n");

/***/ }),

/***/ "./src/utils.ts":
/*!**********************!*\
  !*** ./src/utils.ts ***!
  \**********************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.assertEnvVariablesExistence = exports.getAddressFromXpub = exports.verifySignature = exports.xpubDeriveChild = exports.getAddresses = exports.getAddressAtIndex = exports.validateAuthTimestamp = exports.AUTH_MAX_TIMESTAMP_SHIFT_IN_SECONDS = exports.confirmFirstAddress = exports.getAddressPath = exports.fetchBlockHeight = exports.isTxVoided = exports.arrayShuffle = exports.isAuthority = exports.closeDbConnection = exports.getDbConnection = exports.getUnixTimestamp = exports.getWalletId = exports.sha256d = exports.CustomStorage = void 0;\nconst crypto_1 = __webpack_require__(/*! crypto */ \"crypto\");\nconst serverless_mysql_1 = __importDefault(__webpack_require__(/*! serverless-mysql */ \"serverless-mysql\"));\nconst wallet_lib_1 = __importDefault(__webpack_require__(/*! @hathor/wallet-lib */ \"@hathor/wallet-lib\"));\nconst fullnode_1 = __importDefault(__webpack_require__(/*! @src/fullnode */ \"./src/fullnode.ts\"));\nconst bitcoin = __importStar(__webpack_require__(/*! bitcoinjs-lib */ \"bitcoinjs-lib\"));\nconst bitcoinMessage = __importStar(__webpack_require__(/*! bitcoinjs-message */ \"bitcoinjs-message\"));\nconst ecc = __importStar(__webpack_require__(/*! tiny-secp256k1 */ \"tiny-secp256k1\"));\nconst bip32_1 = __importDefault(__webpack_require__(/*! bip32 */ \"bip32\"));\nconst bip32 = (0, bip32_1.default)(ecc);\nclass CustomStorage {\n    constructor() {\n        this.preStart();\n    }\n    getItem(key) {\n        return this.store[key];\n    }\n    setItem(key, value) {\n        this.store[key] = value;\n        return value;\n    }\n    removeItem(key) {\n        delete this.store[key];\n        return key;\n    }\n    clear() {\n        this.store = {};\n    }\n    preStart() {\n        this.store = {\n            'wallet:server': process.env.DEFAULT_SERVER || wallet_lib_1.default.constants.DEFAULT_SERVER,\n            'wallet:defaultServer': process.env.DEFAULT_SERVER || wallet_lib_1.default.constants.DEFAULT_SERVER,\n        };\n    }\n}\nexports.CustomStorage = CustomStorage;\nwallet_lib_1.default.network.setNetwork(process.env.NETWORK);\nwallet_lib_1.default.storage.setStore(new CustomStorage());\nconst libNetwork = wallet_lib_1.default.network.getNetwork();\nconst hathorNetwork = {\n    messagePrefix: '\\x18Hathor Signed Message:\\n',\n    bech32: wallet_lib_1.default.network.bech32prefix,\n    bip32: {\n        public: libNetwork.xpubkey,\n        private: libNetwork.xprivkey,\n    },\n    pubKeyHash: libNetwork.pubkeyhash,\n    scriptHash: libNetwork.scripthash,\n    wif: libNetwork.privatekey,\n};\nconst sha256d = (data, encoding) => {\n    const hash1 = (0, crypto_1.createHash)('sha256');\n    hash1.update(data);\n    const hash2 = (0, crypto_1.createHash)('sha256');\n    hash2.update(hash1.digest());\n    return hash2.digest(encoding);\n};\nexports.sha256d = sha256d;\nconst getWalletId = (xpubkey) => ((0, exports.sha256d)(xpubkey, 'hex'));\nexports.getWalletId = getWalletId;\nconst getUnixTimestamp = () => (Math.round((new Date()).getTime() / 1000));\nexports.getUnixTimestamp = getUnixTimestamp;\nconst getDbConnection = () => ((0, serverless_mysql_1.default)({\n    config: {\n        host: process.env.DB_ENDPOINT,\n        database: process.env.DB_NAME,\n        user: process.env.DB_USER,\n        port: parseInt(process.env.DB_PORT, 10),\n        password: process.env.DB_PASS,\n    },\n}));\nexports.getDbConnection = getDbConnection;\nconst closeDbConnection = async (mysql) => {\n    if (process.env.STAGE === 'local') {\n        await mysql.quit();\n    }\n    else {\n        await mysql.end();\n    }\n};\nexports.closeDbConnection = closeDbConnection;\nconst isAuthority = (tokenData) => ((tokenData & wallet_lib_1.default.constants.TOKEN_AUTHORITY_MASK) > 0);\nexports.isAuthority = isAuthority;\nconst arrayShuffle = (array) => {\n    let j;\n    let x;\n    let i;\n    for (i = array.length - 1; i > 0; i--) {\n        j = Math.floor(Math.random() * (i + 1));\n        x = array[i];\n        array[i] = array[j];\n        array[j] = x;\n    }\n    return array;\n};\nexports.arrayShuffle = arrayShuffle;\nconst isTxVoided = async (txId) => {\n    const transaction = await fullnode_1.default.downloadTx(txId);\n    if (!transaction.meta.voided_by || transaction.meta.voided_by.length === 0) {\n        return [false, transaction];\n    }\n    return [true, transaction];\n};\nexports.isTxVoided = isTxVoided;\nconst fetchBlockHeight = async (txId, logger) => {\n    const transaction = await fullnode_1.default.downloadTx(txId);\n    if (!transaction.tx.height) {\n        logger.error(JSON.stringify(transaction));\n        throw new Error(`Block ${txId} has no height.`);\n    }\n    return [transaction.tx.height, transaction];\n};\nexports.fetchBlockHeight = fetchBlockHeight;\nconst getAddressPath = (index) => (`m/44'/${wallet_lib_1.default.constants.HATHOR_BIP44_CODE}'/0'/0/${index}`);\nexports.getAddressPath = getAddressPath;\nconst confirmFirstAddress = (expectedFirstAddress, xpubkey) => {\n    const derivedXpub = (0, exports.xpubDeriveChild)(xpubkey, 0);\n    const firstAddress = (0, exports.getAddressAtIndex)(derivedXpub, 0);\n    return [\n        firstAddress === expectedFirstAddress,\n        firstAddress,\n    ];\n};\nexports.confirmFirstAddress = confirmFirstAddress;\nexports.AUTH_MAX_TIMESTAMP_SHIFT_IN_SECONDS = 30;\nconst validateAuthTimestamp = (timestamp, now) => {\n    const timestampShiftInSeconds = Math.floor(Math.abs(now - timestamp));\n    return [timestampShiftInSeconds < exports.AUTH_MAX_TIMESTAMP_SHIFT_IN_SECONDS, timestampShiftInSeconds];\n};\nexports.validateAuthTimestamp = validateAuthTimestamp;\nconst getAddressAtIndex = (xpubkey, addressIndex) => {\n    const node = bip32.fromBase58(xpubkey).derive(addressIndex);\n    return bitcoin.payments.p2pkh({\n        pubkey: node.publicKey,\n        network: hathorNetwork,\n    }).address;\n};\nexports.getAddressAtIndex = getAddressAtIndex;\nconst getAddresses = (xpubkey, startIndex, quantity) => {\n    const addrMap = {};\n    for (let index = startIndex; index < startIndex + quantity; index++) {\n        const address = (0, exports.getAddressAtIndex)(xpubkey, index);\n        addrMap[address] = index;\n    }\n    return addrMap;\n};\nexports.getAddresses = getAddresses;\nconst xpubDeriveChild = (xpubkey, index) => (bip32.fromBase58(xpubkey).derive(index).toBase58());\nexports.xpubDeriveChild = xpubDeriveChild;\nconst verifySignature = (signature, timestamp, address, walletId) => {\n    try {\n        const message = String(timestamp).concat(walletId).concat(address);\n        return bitcoinMessage.verify(message, address, Buffer.from(signature, 'base64'), '\\u0017Hathor Signed Message:\\n');\n    }\n    catch (e) {\n        return false;\n    }\n};\nexports.verifySignature = verifySignature;\nconst getAddressFromXpub = (xpubkey) => {\n    const node = bip32.fromBase58(xpubkey);\n    return bitcoin.payments.p2pkh({\n        pubkey: node.publicKey,\n        network: hathorNetwork,\n    }).address;\n};\nexports.getAddressFromXpub = getAddressFromXpub;\nconst assertEnvVariablesExistence = (envVariables) => {\n    const missingList = [];\n    for (const envVariable of envVariables) {\n        if (!(envVariable in process.env) || process.env[envVariable].length === 0) {\n            missingList.push(envVariable);\n        }\n    }\n    if (missingList.length > 0) {\n        throw new Error(`Env missing the following variables ${missingList.join(', ')}`);\n    }\n};\nexports.assertEnvVariablesExistence = assertEnvVariablesExistence;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/utils.ts\n");

/***/ }),

/***/ "./src/utils/alerting.utils.ts":
/*!*************************************!*\
  !*** ./src/utils/alerting.utils.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.addAlert = void 0;\nconst aws_sdk_1 = __importDefault(__webpack_require__(/*! aws-sdk */ \"aws-sdk\"));\nconst utils_1 = __webpack_require__(/*! @src/utils */ \"./src/utils.ts\");\nconst logger_1 = __importDefault(__webpack_require__(/*! @src/logger */ \"./src/logger.ts\"));\n(0, utils_1.assertEnvVariablesExistence)([\n    'NETWORK',\n    'APPLICATION_NAME',\n    'ACCOUNT_ID',\n    'ALERT_MANAGER_REGION',\n    'ALERT_MANAGER_TOPIC',\n]);\nconst addAlert = async (title, message, severity, metadata) => {\n    const logger = (0, logger_1.default)();\n    const preparedMessage = {\n        title,\n        message,\n        severity,\n        metadata,\n        environment: process.env.NETWORK,\n        application: process.env.APPLICATION_NAME,\n    };\n    const sqs = new aws_sdk_1.default.SQS({ apiVersion: '2015-03-31' });\n    const { ACCOUNT_ID, ALERT_MANAGER_REGION, ALERT_MANAGER_TOPIC, } = process.env;\n    const QUEUE_URL = `https://sqs.${ALERT_MANAGER_REGION}.amazonaws.com/${ACCOUNT_ID}/${ALERT_MANAGER_TOPIC}`;\n    const params = {\n        MessageBody: JSON.stringify(preparedMessage),\n        QueueUrl: QUEUE_URL,\n        MessageAttributes: {\n            None: {\n                DataType: 'String',\n                StringValue: '--',\n            },\n        },\n    };\n    await new Promise((resolve) => {\n        sqs.sendMessage(params, (err) => {\n            if (err) {\n                logger.error('[ALERT] Erroed while sending message to the alert sqs queue', err);\n            }\n            resolve();\n        });\n    });\n};\nexports.addAlert = addAlert;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvdXRpbHMvYWxlcnRpbmcudXRpbHMudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBT0E7QUFFQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFRQTtBQU1BO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFNQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBNUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2FsbGV0LXNlcnZpY2UvLi9zcmMvdXRpbHMvYWxlcnRpbmcudXRpbHMudHM/YWE2OCJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvcHlyaWdodCAoYykgSGF0aG9yIExhYnMgYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmltcG9ydCBBV1MgZnJvbSAnYXdzLXNkayc7XG5pbXBvcnQgeyBTZXZlcml0eSB9IGZyb20gJ0BzcmMvdHlwZXMnO1xuaW1wb3J0IHsgYXNzZXJ0RW52VmFyaWFibGVzRXhpc3RlbmNlIH0gZnJvbSAnQHNyYy91dGlscyc7XG5pbXBvcnQgY3JlYXRlRGVmYXVsdExvZ2dlciBmcm9tICdAc3JjL2xvZ2dlcic7XG5cbmFzc2VydEVudlZhcmlhYmxlc0V4aXN0ZW5jZShbXG4gICdORVRXT1JLJyxcbiAgJ0FQUExJQ0FUSU9OX05BTUUnLFxuICAnQUNDT1VOVF9JRCcsXG4gICdBTEVSVF9NQU5BR0VSX1JFR0lPTicsXG4gICdBTEVSVF9NQU5BR0VSX1RPUElDJyxcbl0pO1xuXG4vKipcbiAqIEFkZHMgYSBtZXNzYWdlIHRvIHRoZSBTUVMgYWxlcnRpbmcgcXVldWVcbiAqXG4gKiBAcGFyYW0gZm5OYW1lIC0gVGhlIGxhbWJkYSBmdW5jdGlvbiBuYW1lXG4gKiBAcGFyYW0gcGF5bG9hZCAtIFRoZSBwYXlsb2FkIHRvIGJlIHNlbnRcbiAqL1xuZXhwb3J0IGNvbnN0IGFkZEFsZXJ0ID0gYXN5bmMgKFxuICB0aXRsZTogc3RyaW5nLFxuICBtZXNzYWdlOiBzdHJpbmcsXG4gIHNldmVyaXR5OiBTZXZlcml0eSxcbiAgbWV0YWRhdGE/OiB1bmtub3duLFxuKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gIGNvbnN0IGxvZ2dlciA9IGNyZWF0ZURlZmF1bHRMb2dnZXIoKTtcbiAgY29uc3QgcHJlcGFyZWRNZXNzYWdlID0ge1xuICAgIHRpdGxlLFxuICAgIG1lc3NhZ2UsXG4gICAgc2V2ZXJpdHksXG4gICAgbWV0YWRhdGEsXG4gICAgZW52aXJvbm1lbnQ6IHByb2Nlc3MuZW52Lk5FVFdPUkssXG4gICAgYXBwbGljYXRpb246IHByb2Nlc3MuZW52LkFQUExJQ0FUSU9OX05BTUUsXG4gIH07XG5cbiAgY29uc3Qgc3FzID0gbmV3IEFXUy5TUVMoeyBhcGlWZXJzaW9uOiAnMjAxNS0wMy0zMScgfSk7XG4gIGNvbnN0IHtcbiAgICBBQ0NPVU5UX0lELFxuICAgIEFMRVJUX01BTkFHRVJfUkVHSU9OLFxuICAgIEFMRVJUX01BTkFHRVJfVE9QSUMsXG4gIH0gPSBwcm9jZXNzLmVudjtcblxuICBjb25zdCBRVUVVRV9VUkwgPSBgaHR0cHM6Ly9zcXMuJHtBTEVSVF9NQU5BR0VSX1JFR0lPTn0uYW1hem9uYXdzLmNvbS8ke0FDQ09VTlRfSUR9LyR7QUxFUlRfTUFOQUdFUl9UT1BJQ31gO1xuICBjb25zdCBwYXJhbXMgPSB7XG4gICAgTWVzc2FnZUJvZHk6IEpTT04uc3RyaW5naWZ5KHByZXBhcmVkTWVzc2FnZSksXG4gICAgUXVldWVVcmw6IFFVRVVFX1VSTCxcbiAgICBNZXNzYWdlQXR0cmlidXRlczoge1xuICAgICAgTm9uZToge1xuICAgICAgICBEYXRhVHlwZTogJ1N0cmluZycsXG4gICAgICAgIFN0cmluZ1ZhbHVlOiAnLS0nLFxuICAgICAgfSxcbiAgICB9LFxuICB9O1xuXG4gIGF3YWl0IG5ldyBQcm9taXNlPHZvaWQ+KChyZXNvbHZlKSA9PiB7XG4gICAgc3FzLnNlbmRNZXNzYWdlKHBhcmFtcywgKGVycikgPT4ge1xuICAgICAgaWYgKGVycikge1xuICAgICAgICBsb2dnZXIuZXJyb3IoJ1tBTEVSVF0gRXJyb2VkIHdoaWxlIHNlbmRpbmcgbWVzc2FnZSB0byB0aGUgYWxlcnQgc3FzIHF1ZXVlJywgZXJyKTtcbiAgICAgIH1cblxuICAgICAgcmVzb2x2ZSgpO1xuICAgIH0pO1xuICB9KTtcbn07XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/utils/alerting.utils.ts\n");

/***/ }),

/***/ "@hathor/wallet-lib":
/*!*************************************!*\
  !*** external "@hathor/wallet-lib" ***!
  \*************************************/
/***/ ((module) => {

module.exports = require("@hathor/wallet-lib");

/***/ }),

/***/ "@middy/core":
/*!******************************!*\
  !*** external "@middy/core" ***!
  \******************************/
/***/ ((module) => {

module.exports = require("@middy/core");

/***/ }),

/***/ "@middy/http-cors":
/*!***********************************!*\
  !*** external "@middy/http-cors" ***!
  \***********************************/
/***/ ((module) => {

module.exports = require("@middy/http-cors");

/***/ }),

/***/ "aws-sdk":
/*!**************************!*\
  !*** external "aws-sdk" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("aws-sdk");

/***/ }),

/***/ "axios":
/*!************************!*\
  !*** external "axios" ***!
  \************************/
/***/ ((module) => {

module.exports = require("axios");

/***/ }),

/***/ "bip32":
/*!************************!*\
  !*** external "bip32" ***!
  \************************/
/***/ ((module) => {

module.exports = require("bip32");

/***/ }),

/***/ "bitcoinjs-lib":
/*!********************************!*\
  !*** external "bitcoinjs-lib" ***!
  \********************************/
/***/ ((module) => {

module.exports = require("bitcoinjs-lib");

/***/ }),

/***/ "bitcoinjs-message":
/*!************************************!*\
  !*** external "bitcoinjs-message" ***!
  \************************************/
/***/ ((module) => {

module.exports = require("bitcoinjs-message");

/***/ }),

/***/ "joi":
/*!**********************!*\
  !*** external "joi" ***!
  \**********************/
/***/ ((module) => {

module.exports = require("joi");

/***/ }),

/***/ "lodash":
/*!*************************!*\
  !*** external "lodash" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("lodash");

/***/ }),

/***/ "serverless-mysql":
/*!***********************************!*\
  !*** external "serverless-mysql" ***!
  \***********************************/
/***/ ((module) => {

module.exports = require("serverless-mysql");

/***/ }),

/***/ "source-map-support/register":
/*!**********************************************!*\
  !*** external "source-map-support/register" ***!
  \**********************************************/
/***/ ((module) => {

module.exports = require("source-map-support/register");

/***/ }),

/***/ "tiny-secp256k1":
/*!*********************************!*\
  !*** external "tiny-secp256k1" ***!
  \*********************************/
/***/ ((module) => {

module.exports = require("tiny-secp256k1");

/***/ }),

/***/ "winston":
/*!**************************!*\
  !*** external "winston" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("winston");

/***/ }),

/***/ "assert":
/*!*************************!*\
  !*** external "assert" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("assert");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/api/txProposalDestroy.ts");
/******/ 	var __webpack_export_target__ = exports;
/******/ 	for(var i in __webpack_exports__) __webpack_export_target__[i] = __webpack_exports__[i];
/******/ 	if(__webpack_exports__.__esModule) Object.defineProperty(__webpack_export_target__, "__esModule", { value: true });
/******/ 	
/******/ })()
;