{
  "service": {
    "service": "hathor-wallet-service",
    "serviceObject": {
      "name": "hathor-wallet-service"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs18.x",
      "memorySize": 256,
      "timeout": 6,
      "websocketsApiName": "wallet-realtime-ws-api-dev",
      "websocketsApiRouteSelectionExpression": "$request.body.action",
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "sqs:*"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "WalletServiceNewTxQueue",
                    "Arn"
                  ]
                },
                "arn:aws:sqs:us-east-1:1234:teta"
              ]
            }
          ]
        }
      },
      "vpc": {
        "securityGroupIds": [
          "123"
        ],
        "subnetIds": [
          "123",
          "123",
          "123"
        ]
      },
      "stackTags": {
        "Application": "hathor-wallet-service",
        "Stage": "dev"
      },
      "apiGateway": {
        "minimumCompressionSize": 1024
      },
      "environment": {
        "ACCOUNT_ID": "1234",
        "AUTH_SECRET": "A05qT6meWzwBGnprXOEHT4k31rzL5fMn",
        "AWS_VPC_DEFAULT_SG_ID": "123",
        "AWS_SUBNET_ID_1": "123",
        "AWS_SUBNET_ID_2": "123",
        "AWS_SUBNET_ID_3": "123",
        "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
        "APPLICATION_NAME": "hathor-wallet-service",
        "BLOCK_REWARD_LOCK": "300",
        "CONFIRM_FIRST_ADDRESS": "true",
        "DB_ENDPOINT": "localhost",
        "DB_PORT": "5432",
        "DB_NAME": "hathor_tetinha2",
        "DB_USER": "root",
        "DB_PASS": "hathor",
        "MAX_ADDRESS_GAP": "10",
        "NETWORK": "mainnet",
        "NEW_TX_SQS": {
          "Ref": "WalletServiceNewTxQueue"
        },
        "REDIS_URL": "localhost",
        "REDIS_PASSWORD": "hathor",
        "SERVICE_NAME": "hathor-wallet-service",
        "STAGE": "dev",
        "EXPLORER_SERVICE_STAGE": "dev",
        "NFT_AUTO_REVIEW_ENABLED": "false",
        "VOIDED_TX_OFFSET": "5",
        "DEFAULT_SERVER": "https://node1.mainnet.hathor.network/v1a/",
        "WS_DOMAIN": "ws.wallet-service.hathor.network",
        "TX_HISTORY_MAX_COUNT": "10",
        "WALLET_SERVICE_LAMBDA_ENDPOINT": "",
        "PUSH_NOTIFICATION_ENABLED": "false",
        "PUSH_ALLOWED_PROVIDERS": "",
        "FIREBASE_PROJECT_ID": "",
        "FIREBASE_PRIVATE_KEY_ID": "",
        "FIREBASE_PRIVATE_KEY": "",
        "FIREBASE_CLIENT_EMAIL": "",
        "FIREBASE_CLIENT_ID": "",
        "FIREBASE_AUTH_URI": "",
        "FIREBASE_TOKEN_URI": "",
        "FIREBASE_AUTH_PROVIDER_X509_CERT_URL": "",
        "FIREBASE_CLIENT_X509_CERT_URL": "",
        "LOG_LEVEL": "debug",
        "ALERT_MANAGER_REGION": "us-east-1",
        "ALERT_MANAGER_TOPIC": "teta"
      },
      "stage": "dev",
      "region": "us-east-1",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "OnHandleOldVoidedTxsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/hathor-wallet-service-dev-onHandleOldVoidedTxs"
            }
          },
          "GetLatestBlockLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/hathor-wallet-service-dev-getLatestBlock"
            }
          },
          "OnNewTxRequestLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/hathor-wallet-service-dev-onNewTxRequest"
            }
          },
          "OnMinersListRequestLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/hathor-wallet-service-dev-onMinersListRequest"
            }
          },
          "OnTotalSupplyRequestLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/hathor-wallet-service-dev-onTotalSupplyRequest"
            }
          },
          "OnHandleReorgRequestLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/hathor-wallet-service-dev-onHandleReorgRequest"
            }
          },
          "OnNewTxEventLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/hathor-wallet-service-dev-onNewTxEvent"
            }
          },
          "OnNewNftEventLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/hathor-wallet-service-dev-onNewNftEvent"
            }
          },
          "LoadWalletAsyncLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/hathor-wallet-service-dev-loadWalletAsync"
            }
          },
          "LoadWalletApiLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/hathor-wallet-service-dev-loadWalletApi"
            }
          },
          "ChangeWalletAuthXpubApiLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/hathor-wallet-service-dev-changeWalletAuthXpubApi"
            }
          },
          "GetWalletStatusApiLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/hathor-wallet-service-dev-getWalletStatusApi"
            }
          },
          "CheckAddressMineApiLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/hathor-wallet-service-dev-checkAddressMineApi"
            }
          },
          "GetAddressesApiLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/hathor-wallet-service-dev-getAddressesApi"
            }
          },
          "GetNewAddressesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/hathor-wallet-service-dev-getNewAddresses"
            }
          },
          "GetUtxosLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/hathor-wallet-service-dev-getUtxos"
            }
          },
          "GetTxOutputsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/hathor-wallet-service-dev-getTxOutputs"
            }
          },
          "GetBalanceApiLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/hathor-wallet-service-dev-getBalanceApi"
            }
          },
          "GetTokensApiLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/hathor-wallet-service-dev-getTokensApi"
            }
          },
          "GetTokenDetailsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/hathor-wallet-service-dev-getTokenDetails"
            }
          },
          "GetVersionDataLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/hathor-wallet-service-dev-getVersionData"
            }
          },
          "GetTxHistoryApiLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/hathor-wallet-service-dev-getTxHistoryApi"
            }
          },
          "CreateTxProposalApiLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/hathor-wallet-service-dev-createTxProposalApi"
            }
          },
          "SendTxProposalApiLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/hathor-wallet-service-dev-sendTxProposalApi"
            }
          },
          "DeleteTxProposalApiLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/hathor-wallet-service-dev-deleteTxProposalApi"
            }
          },
          "WsConnectLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/hathor-wallet-service-dev-wsConnect"
            }
          },
          "WsJoinLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/hathor-wallet-service-dev-wsJoin"
            }
          },
          "WsTxNotifyNewLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/hathor-wallet-service-dev-wsTxNotifyNew"
            }
          },
          "WsTxNotifyUpdateLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/hathor-wallet-service-dev-wsTxNotifyUpdate"
            }
          },
          "WsAdminBroadcastLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/hathor-wallet-service-dev-wsAdminBroadcast"
            }
          },
          "WsAdminDisconnectLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/hathor-wallet-service-dev-wsAdminDisconnect"
            }
          },
          "WsAdminMulticastLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/hathor-wallet-service-dev-wsAdminMulticast"
            }
          },
          "AuthTokenApiLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/hathor-wallet-service-dev-authTokenApi"
            }
          },
          "BearerAuthorizerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/hathor-wallet-service-dev-bearerAuthorizer"
            }
          },
          "MetricsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/hathor-wallet-service-dev-metrics"
            }
          },
          "PushRegisterLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/hathor-wallet-service-dev-pushRegister"
            }
          },
          "PushUpdateLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/hathor-wallet-service-dev-pushUpdate"
            }
          },
          "PushUnregisterLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/hathor-wallet-service-dev-pushUnregister"
            }
          },
          "GetTxByIdLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/hathor-wallet-service-dev-getTxById"
            }
          },
          "ProxiedGetTxByIdLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/hathor-wallet-service-dev-proxiedGetTxById"
            }
          },
          "ProxiedGetConfirmationDataLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/hathor-wallet-service-dev-proxiedGetConfirmationData"
            }
          },
          "ProxiedGraphvizNeighborsQueryLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/hathor-wallet-service-dev-proxiedGraphvizNeighborsQuery"
            }
          },
          "SendNotificationToDeviceLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/hathor-wallet-service-dev-sendNotificationToDevice"
            }
          },
          "TxPushRequestedLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/hathor-wallet-service-dev-txPushRequested"
            }
          },
          "DeleteStalePushDevicesLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/hathor-wallet-service-dev-deleteStalePushDevices"
            }
          },
          "CleanUnsentTxProposalsUtxosLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/hathor-wallet-service-dev-cleanUnsentTxProposalsUtxos"
            }
          },
          "WarmUpPluginWalletWarmerLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/hathor-wallet-service-dev-warmup-plugin-walletWarmer"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "hathor-wallet-service",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/hathor-wallet-service-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/hathor-wallet-service-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][0]"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "execute-api:ManageConnections"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:execute-api:*:*:*/@connections/*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "sqs:ReceiveMessage",
                          "sqs:DeleteMessage",
                          "sqs:GetQueueAttributes"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "WalletServiceNewTxQueue",
                              "Arn"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "hathor-wallet-service",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              },
              "ManagedPolicyArns": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
                    ]
                  ]
                }
              ]
            }
          },
          "OnHandleOldVoidedTxsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/hathor-wallet-service/dev/1696424677965-2023-10-04T13:04:37.965Z/hathor-wallet-service.zip"
              },
              "Handler": "src/mempool.onHandleOldVoidedTxs",
              "Runtime": "nodejs18.x",
              "FunctionName": "hathor-wallet-service-dev-onHandleOldVoidedTxs",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ACCOUNT_ID": "1234",
                  "AUTH_SECRET": "A05qT6meWzwBGnprXOEHT4k31rzL5fMn",
                  "AWS_VPC_DEFAULT_SG_ID": "123",
                  "AWS_SUBNET_ID_1": "123",
                  "AWS_SUBNET_ID_2": "123",
                  "AWS_SUBNET_ID_3": "123",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "APPLICATION_NAME": "hathor-wallet-service",
                  "BLOCK_REWARD_LOCK": "300",
                  "CONFIRM_FIRST_ADDRESS": "true",
                  "DB_ENDPOINT": "localhost",
                  "DB_PORT": "5432",
                  "DB_NAME": "hathor_tetinha2",
                  "DB_USER": "root",
                  "DB_PASS": "hathor",
                  "MAX_ADDRESS_GAP": "10",
                  "NETWORK": "mainnet",
                  "NEW_TX_SQS": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"NEW_TX_SQS\"]"
                  },
                  "REDIS_URL": "localhost",
                  "REDIS_PASSWORD": "hathor",
                  "SERVICE_NAME": "hathor-wallet-service",
                  "STAGE": "dev",
                  "EXPLORER_SERVICE_STAGE": "dev",
                  "NFT_AUTO_REVIEW_ENABLED": "false",
                  "VOIDED_TX_OFFSET": "5",
                  "DEFAULT_SERVER": "https://node1.mainnet.hathor.network/v1a/",
                  "WS_DOMAIN": "ws.wallet-service.hathor.network",
                  "TX_HISTORY_MAX_COUNT": "10",
                  "WALLET_SERVICE_LAMBDA_ENDPOINT": "",
                  "PUSH_NOTIFICATION_ENABLED": "false",
                  "PUSH_ALLOWED_PROVIDERS": "",
                  "FIREBASE_PROJECT_ID": "",
                  "FIREBASE_PRIVATE_KEY_ID": "",
                  "FIREBASE_PRIVATE_KEY": "",
                  "FIREBASE_CLIENT_EMAIL": "",
                  "FIREBASE_CLIENT_ID": "",
                  "FIREBASE_AUTH_URI": "",
                  "FIREBASE_TOKEN_URI": "",
                  "FIREBASE_AUTH_PROVIDER_X509_CERT_URL": "",
                  "FIREBASE_CLIENT_X509_CERT_URL": "",
                  "LOG_LEVEL": "debug",
                  "ALERT_MANAGER_REGION": "us-east-1",
                  "ALERT_MANAGER_TOPIC": "teta"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "OnHandleOldVoidedTxsLogGroup"
            ]
          },
          "GetLatestBlockLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/hathor-wallet-service/dev/1696424677965-2023-10-04T13:04:37.965Z/hathor-wallet-service.zip"
              },
              "Handler": "src/height.getLatestBlock",
              "Runtime": "nodejs18.x",
              "FunctionName": "hathor-wallet-service-dev-getLatestBlock",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ACCOUNT_ID": "1234",
                  "AUTH_SECRET": "A05qT6meWzwBGnprXOEHT4k31rzL5fMn",
                  "AWS_VPC_DEFAULT_SG_ID": "123",
                  "AWS_SUBNET_ID_1": "123",
                  "AWS_SUBNET_ID_2": "123",
                  "AWS_SUBNET_ID_3": "123",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "APPLICATION_NAME": "hathor-wallet-service",
                  "BLOCK_REWARD_LOCK": "300",
                  "CONFIRM_FIRST_ADDRESS": "true",
                  "DB_ENDPOINT": "localhost",
                  "DB_PORT": "5432",
                  "DB_NAME": "hathor_tetinha2",
                  "DB_USER": "root",
                  "DB_PASS": "hathor",
                  "MAX_ADDRESS_GAP": "10",
                  "NETWORK": "mainnet",
                  "NEW_TX_SQS": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"NEW_TX_SQS\"]"
                  },
                  "REDIS_URL": "localhost",
                  "REDIS_PASSWORD": "hathor",
                  "SERVICE_NAME": "hathor-wallet-service",
                  "STAGE": "dev",
                  "EXPLORER_SERVICE_STAGE": "dev",
                  "NFT_AUTO_REVIEW_ENABLED": "false",
                  "VOIDED_TX_OFFSET": "5",
                  "DEFAULT_SERVER": "https://node1.mainnet.hathor.network/v1a/",
                  "WS_DOMAIN": "ws.wallet-service.hathor.network",
                  "TX_HISTORY_MAX_COUNT": "10",
                  "WALLET_SERVICE_LAMBDA_ENDPOINT": "",
                  "PUSH_NOTIFICATION_ENABLED": "false",
                  "PUSH_ALLOWED_PROVIDERS": "",
                  "FIREBASE_PROJECT_ID": "",
                  "FIREBASE_PRIVATE_KEY_ID": "",
                  "FIREBASE_PRIVATE_KEY": "",
                  "FIREBASE_CLIENT_EMAIL": "",
                  "FIREBASE_CLIENT_ID": "",
                  "FIREBASE_AUTH_URI": "",
                  "FIREBASE_TOKEN_URI": "",
                  "FIREBASE_AUTH_PROVIDER_X509_CERT_URL": "",
                  "FIREBASE_CLIENT_X509_CERT_URL": "",
                  "LOG_LEVEL": "debug",
                  "ALERT_MANAGER_REGION": "us-east-1",
                  "ALERT_MANAGER_TOPIC": "teta"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "GetLatestBlockLogGroup"
            ]
          },
          "OnNewTxRequestLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/hathor-wallet-service/dev/1696424677965-2023-10-04T13:04:37.965Z/hathor-wallet-service.zip"
              },
              "Handler": "src/txProcessor.onNewTxRequest",
              "Runtime": "nodejs18.x",
              "FunctionName": "hathor-wallet-service-dev-onNewTxRequest",
              "MemorySize": 256,
              "Timeout": 12,
              "Environment": {
                "Variables": {
                  "ACCOUNT_ID": "1234",
                  "AUTH_SECRET": "A05qT6meWzwBGnprXOEHT4k31rzL5fMn",
                  "AWS_VPC_DEFAULT_SG_ID": "123",
                  "AWS_SUBNET_ID_1": "123",
                  "AWS_SUBNET_ID_2": "123",
                  "AWS_SUBNET_ID_3": "123",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "APPLICATION_NAME": "hathor-wallet-service",
                  "BLOCK_REWARD_LOCK": "300",
                  "CONFIRM_FIRST_ADDRESS": "true",
                  "DB_ENDPOINT": "localhost",
                  "DB_PORT": "5432",
                  "DB_NAME": "hathor_tetinha2",
                  "DB_USER": "root",
                  "DB_PASS": "hathor",
                  "MAX_ADDRESS_GAP": "10",
                  "NETWORK": "mainnet",
                  "NEW_TX_SQS": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"NEW_TX_SQS\"]"
                  },
                  "REDIS_URL": "localhost",
                  "REDIS_PASSWORD": "hathor",
                  "SERVICE_NAME": "hathor-wallet-service",
                  "STAGE": "dev",
                  "EXPLORER_SERVICE_STAGE": "dev",
                  "NFT_AUTO_REVIEW_ENABLED": "false",
                  "VOIDED_TX_OFFSET": "5",
                  "DEFAULT_SERVER": "https://node1.mainnet.hathor.network/v1a/",
                  "WS_DOMAIN": "ws.wallet-service.hathor.network",
                  "TX_HISTORY_MAX_COUNT": "10",
                  "WALLET_SERVICE_LAMBDA_ENDPOINT": "",
                  "PUSH_NOTIFICATION_ENABLED": "false",
                  "PUSH_ALLOWED_PROVIDERS": "",
                  "FIREBASE_PROJECT_ID": "",
                  "FIREBASE_PRIVATE_KEY_ID": "",
                  "FIREBASE_PRIVATE_KEY": "",
                  "FIREBASE_CLIENT_EMAIL": "",
                  "FIREBASE_CLIENT_ID": "",
                  "FIREBASE_AUTH_URI": "",
                  "FIREBASE_TOKEN_URI": "",
                  "FIREBASE_AUTH_PROVIDER_X509_CERT_URL": "",
                  "FIREBASE_CLIENT_X509_CERT_URL": "",
                  "LOG_LEVEL": "debug",
                  "ALERT_MANAGER_REGION": "us-east-1",
                  "ALERT_MANAGER_TOPIC": "teta"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "OnNewTxRequestIamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "OnNewTxRequestIamRoleLambdaExecution",
              "OnNewTxRequestLogGroup"
            ]
          },
          "OnMinersListRequestLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/hathor-wallet-service/dev/1696424677965-2023-10-04T13:04:37.965Z/hathor-wallet-service.zip"
              },
              "Handler": "src/api/miners.onMinersListRequest",
              "Runtime": "nodejs18.x",
              "FunctionName": "hathor-wallet-service-dev-onMinersListRequest",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ACCOUNT_ID": "1234",
                  "AUTH_SECRET": "A05qT6meWzwBGnprXOEHT4k31rzL5fMn",
                  "AWS_VPC_DEFAULT_SG_ID": "123",
                  "AWS_SUBNET_ID_1": "123",
                  "AWS_SUBNET_ID_2": "123",
                  "AWS_SUBNET_ID_3": "123",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "APPLICATION_NAME": "hathor-wallet-service",
                  "BLOCK_REWARD_LOCK": "300",
                  "CONFIRM_FIRST_ADDRESS": "true",
                  "DB_ENDPOINT": "localhost",
                  "DB_PORT": "5432",
                  "DB_NAME": "hathor_tetinha2",
                  "DB_USER": "root",
                  "DB_PASS": "hathor",
                  "MAX_ADDRESS_GAP": "10",
                  "NETWORK": "mainnet",
                  "NEW_TX_SQS": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"NEW_TX_SQS\"]"
                  },
                  "REDIS_URL": "localhost",
                  "REDIS_PASSWORD": "hathor",
                  "SERVICE_NAME": "hathor-wallet-service",
                  "STAGE": "dev",
                  "EXPLORER_SERVICE_STAGE": "dev",
                  "NFT_AUTO_REVIEW_ENABLED": "false",
                  "VOIDED_TX_OFFSET": "5",
                  "DEFAULT_SERVER": "https://node1.mainnet.hathor.network/v1a/",
                  "WS_DOMAIN": "ws.wallet-service.hathor.network",
                  "TX_HISTORY_MAX_COUNT": "10",
                  "WALLET_SERVICE_LAMBDA_ENDPOINT": "",
                  "PUSH_NOTIFICATION_ENABLED": "false",
                  "PUSH_ALLOWED_PROVIDERS": "",
                  "FIREBASE_PROJECT_ID": "",
                  "FIREBASE_PRIVATE_KEY_ID": "",
                  "FIREBASE_PRIVATE_KEY": "",
                  "FIREBASE_CLIENT_EMAIL": "",
                  "FIREBASE_CLIENT_ID": "",
                  "FIREBASE_AUTH_URI": "",
                  "FIREBASE_TOKEN_URI": "",
                  "FIREBASE_AUTH_PROVIDER_X509_CERT_URL": "",
                  "FIREBASE_CLIENT_X509_CERT_URL": "",
                  "LOG_LEVEL": "debug",
                  "ALERT_MANAGER_REGION": "us-east-1",
                  "ALERT_MANAGER_TOPIC": "teta"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "OnMinersListRequestLogGroup"
            ]
          },
          "OnTotalSupplyRequestLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/hathor-wallet-service/dev/1696424677965-2023-10-04T13:04:37.965Z/hathor-wallet-service.zip"
              },
              "Handler": "src/api/totalSupply.onTotalSupplyRequest",
              "Runtime": "nodejs18.x",
              "FunctionName": "hathor-wallet-service-dev-onTotalSupplyRequest",
              "MemorySize": 256,
              "Timeout": 120,
              "Environment": {
                "Variables": {
                  "ACCOUNT_ID": "1234",
                  "AUTH_SECRET": "A05qT6meWzwBGnprXOEHT4k31rzL5fMn",
                  "AWS_VPC_DEFAULT_SG_ID": "123",
                  "AWS_SUBNET_ID_1": "123",
                  "AWS_SUBNET_ID_2": "123",
                  "AWS_SUBNET_ID_3": "123",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "APPLICATION_NAME": "hathor-wallet-service",
                  "BLOCK_REWARD_LOCK": "300",
                  "CONFIRM_FIRST_ADDRESS": "true",
                  "DB_ENDPOINT": "localhost",
                  "DB_PORT": "5432",
                  "DB_NAME": "hathor_tetinha2",
                  "DB_USER": "root",
                  "DB_PASS": "hathor",
                  "MAX_ADDRESS_GAP": "10",
                  "NETWORK": "mainnet",
                  "NEW_TX_SQS": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"NEW_TX_SQS\"]"
                  },
                  "REDIS_URL": "localhost",
                  "REDIS_PASSWORD": "hathor",
                  "SERVICE_NAME": "hathor-wallet-service",
                  "STAGE": "dev",
                  "EXPLORER_SERVICE_STAGE": "dev",
                  "NFT_AUTO_REVIEW_ENABLED": "false",
                  "VOIDED_TX_OFFSET": "5",
                  "DEFAULT_SERVER": "https://node1.mainnet.hathor.network/v1a/",
                  "WS_DOMAIN": "ws.wallet-service.hathor.network",
                  "TX_HISTORY_MAX_COUNT": "10",
                  "WALLET_SERVICE_LAMBDA_ENDPOINT": "",
                  "PUSH_NOTIFICATION_ENABLED": "false",
                  "PUSH_ALLOWED_PROVIDERS": "",
                  "FIREBASE_PROJECT_ID": "",
                  "FIREBASE_PRIVATE_KEY_ID": "",
                  "FIREBASE_PRIVATE_KEY": "",
                  "FIREBASE_CLIENT_EMAIL": "",
                  "FIREBASE_CLIENT_ID": "",
                  "FIREBASE_AUTH_URI": "",
                  "FIREBASE_TOKEN_URI": "",
                  "FIREBASE_AUTH_PROVIDER_X509_CERT_URL": "",
                  "FIREBASE_CLIENT_X509_CERT_URL": "",
                  "LOG_LEVEL": "debug",
                  "ALERT_MANAGER_REGION": "us-east-1",
                  "ALERT_MANAGER_TOPIC": "teta"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "OnTotalSupplyRequestLogGroup"
            ]
          },
          "OnHandleReorgRequestLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/hathor-wallet-service/dev/1696424677965-2023-10-04T13:04:37.965Z/hathor-wallet-service.zip"
              },
              "Handler": "src/txProcessor.onHandleReorgRequest",
              "Runtime": "nodejs18.x",
              "FunctionName": "hathor-wallet-service-dev-onHandleReorgRequest",
              "MemorySize": 256,
              "Timeout": 300,
              "Environment": {
                "Variables": {
                  "ACCOUNT_ID": "1234",
                  "AUTH_SECRET": "A05qT6meWzwBGnprXOEHT4k31rzL5fMn",
                  "AWS_VPC_DEFAULT_SG_ID": "123",
                  "AWS_SUBNET_ID_1": "123",
                  "AWS_SUBNET_ID_2": "123",
                  "AWS_SUBNET_ID_3": "123",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "APPLICATION_NAME": "hathor-wallet-service",
                  "BLOCK_REWARD_LOCK": "300",
                  "CONFIRM_FIRST_ADDRESS": "true",
                  "DB_ENDPOINT": "localhost",
                  "DB_PORT": "5432",
                  "DB_NAME": "hathor_tetinha2",
                  "DB_USER": "root",
                  "DB_PASS": "hathor",
                  "MAX_ADDRESS_GAP": "10",
                  "NETWORK": "mainnet",
                  "NEW_TX_SQS": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"NEW_TX_SQS\"]"
                  },
                  "REDIS_URL": "localhost",
                  "REDIS_PASSWORD": "hathor",
                  "SERVICE_NAME": "hathor-wallet-service",
                  "STAGE": "dev",
                  "EXPLORER_SERVICE_STAGE": "dev",
                  "NFT_AUTO_REVIEW_ENABLED": "false",
                  "VOIDED_TX_OFFSET": "5",
                  "DEFAULT_SERVER": "https://node1.mainnet.hathor.network/v1a/",
                  "WS_DOMAIN": "ws.wallet-service.hathor.network",
                  "TX_HISTORY_MAX_COUNT": "10",
                  "WALLET_SERVICE_LAMBDA_ENDPOINT": "",
                  "PUSH_NOTIFICATION_ENABLED": "false",
                  "PUSH_ALLOWED_PROVIDERS": "",
                  "FIREBASE_PROJECT_ID": "",
                  "FIREBASE_PRIVATE_KEY_ID": "",
                  "FIREBASE_PRIVATE_KEY": "",
                  "FIREBASE_CLIENT_EMAIL": "",
                  "FIREBASE_CLIENT_ID": "",
                  "FIREBASE_AUTH_URI": "",
                  "FIREBASE_TOKEN_URI": "",
                  "FIREBASE_AUTH_PROVIDER_X509_CERT_URL": "",
                  "FIREBASE_CLIENT_X509_CERT_URL": "",
                  "LOG_LEVEL": "debug",
                  "ALERT_MANAGER_REGION": "us-east-1",
                  "ALERT_MANAGER_TOPIC": "teta"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "OnHandleReorgRequestLogGroup"
            ]
          },
          "OnNewTxEventLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/hathor-wallet-service/dev/1696424677965-2023-10-04T13:04:37.965Z/hathor-wallet-service.zip"
              },
              "Handler": "src/txProcessor.onNewTxEvent",
              "Runtime": "nodejs18.x",
              "FunctionName": "hathor-wallet-service-dev-onNewTxEvent",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ACCOUNT_ID": "1234",
                  "AUTH_SECRET": "A05qT6meWzwBGnprXOEHT4k31rzL5fMn",
                  "AWS_VPC_DEFAULT_SG_ID": "123",
                  "AWS_SUBNET_ID_1": "123",
                  "AWS_SUBNET_ID_2": "123",
                  "AWS_SUBNET_ID_3": "123",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "APPLICATION_NAME": "hathor-wallet-service",
                  "BLOCK_REWARD_LOCK": "300",
                  "CONFIRM_FIRST_ADDRESS": "true",
                  "DB_ENDPOINT": "localhost",
                  "DB_PORT": "5432",
                  "DB_NAME": "hathor_tetinha2",
                  "DB_USER": "root",
                  "DB_PASS": "hathor",
                  "MAX_ADDRESS_GAP": "10",
                  "NETWORK": "mainnet",
                  "NEW_TX_SQS": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"NEW_TX_SQS\"]"
                  },
                  "REDIS_URL": "localhost",
                  "REDIS_PASSWORD": "hathor",
                  "SERVICE_NAME": "hathor-wallet-service",
                  "STAGE": "dev",
                  "EXPLORER_SERVICE_STAGE": "dev",
                  "NFT_AUTO_REVIEW_ENABLED": "false",
                  "VOIDED_TX_OFFSET": "5",
                  "DEFAULT_SERVER": "https://node1.mainnet.hathor.network/v1a/",
                  "WS_DOMAIN": "ws.wallet-service.hathor.network",
                  "TX_HISTORY_MAX_COUNT": "10",
                  "WALLET_SERVICE_LAMBDA_ENDPOINT": "",
                  "PUSH_NOTIFICATION_ENABLED": "false",
                  "PUSH_ALLOWED_PROVIDERS": "",
                  "FIREBASE_PROJECT_ID": "",
                  "FIREBASE_PRIVATE_KEY_ID": "",
                  "FIREBASE_PRIVATE_KEY": "",
                  "FIREBASE_CLIENT_EMAIL": "",
                  "FIREBASE_CLIENT_ID": "",
                  "FIREBASE_AUTH_URI": "",
                  "FIREBASE_TOKEN_URI": "",
                  "FIREBASE_AUTH_PROVIDER_X509_CERT_URL": "",
                  "FIREBASE_CLIENT_X509_CERT_URL": "",
                  "LOG_LEVEL": "debug",
                  "ALERT_MANAGER_REGION": "us-east-1",
                  "ALERT_MANAGER_TOPIC": "teta"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "OnNewTxEventLogGroup"
            ]
          },
          "OnNewNftEventLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/hathor-wallet-service/dev/1696424677965-2023-10-04T13:04:37.965Z/hathor-wallet-service.zip"
              },
              "Handler": "src/txProcessor.onNewNftEvent",
              "Runtime": "nodejs18.x",
              "FunctionName": "hathor-wallet-service-dev-onNewNftEvent",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ACCOUNT_ID": "1234",
                  "AUTH_SECRET": "A05qT6meWzwBGnprXOEHT4k31rzL5fMn",
                  "AWS_VPC_DEFAULT_SG_ID": "123",
                  "AWS_SUBNET_ID_1": "123",
                  "AWS_SUBNET_ID_2": "123",
                  "AWS_SUBNET_ID_3": "123",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "APPLICATION_NAME": "hathor-wallet-service",
                  "BLOCK_REWARD_LOCK": "300",
                  "CONFIRM_FIRST_ADDRESS": "true",
                  "DB_ENDPOINT": "localhost",
                  "DB_PORT": "5432",
                  "DB_NAME": "hathor_tetinha2",
                  "DB_USER": "root",
                  "DB_PASS": "hathor",
                  "MAX_ADDRESS_GAP": "10",
                  "NETWORK": "mainnet",
                  "NEW_TX_SQS": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"NEW_TX_SQS\"]"
                  },
                  "REDIS_URL": "localhost",
                  "REDIS_PASSWORD": "hathor",
                  "SERVICE_NAME": "hathor-wallet-service",
                  "STAGE": "dev",
                  "EXPLORER_SERVICE_STAGE": "dev",
                  "NFT_AUTO_REVIEW_ENABLED": "false",
                  "VOIDED_TX_OFFSET": "5",
                  "DEFAULT_SERVER": "https://node1.mainnet.hathor.network/v1a/",
                  "WS_DOMAIN": "ws.wallet-service.hathor.network",
                  "TX_HISTORY_MAX_COUNT": "10",
                  "WALLET_SERVICE_LAMBDA_ENDPOINT": "",
                  "PUSH_NOTIFICATION_ENABLED": "false",
                  "PUSH_ALLOWED_PROVIDERS": "",
                  "FIREBASE_PROJECT_ID": "",
                  "FIREBASE_PRIVATE_KEY_ID": "",
                  "FIREBASE_PRIVATE_KEY": "",
                  "FIREBASE_CLIENT_EMAIL": "",
                  "FIREBASE_CLIENT_ID": "",
                  "FIREBASE_AUTH_URI": "",
                  "FIREBASE_TOKEN_URI": "",
                  "FIREBASE_AUTH_PROVIDER_X509_CERT_URL": "",
                  "FIREBASE_CLIENT_X509_CERT_URL": "",
                  "LOG_LEVEL": "debug",
                  "ALERT_MANAGER_REGION": "us-east-1",
                  "ALERT_MANAGER_TOPIC": "teta"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "OnNewNftEventIamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "OnNewNftEventIamRoleLambdaExecution",
              "OnNewNftEventLogGroup"
            ]
          },
          "LoadWalletAsyncLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/hathor-wallet-service/dev/1696424677965-2023-10-04T13:04:37.965Z/hathor-wallet-service.zip"
              },
              "Handler": "src/api/wallet.loadWallet",
              "Runtime": "nodejs18.x",
              "FunctionName": "hathor-wallet-service-dev-loadWalletAsync",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ACCOUNT_ID": "1234",
                  "AUTH_SECRET": "A05qT6meWzwBGnprXOEHT4k31rzL5fMn",
                  "AWS_VPC_DEFAULT_SG_ID": "123",
                  "AWS_SUBNET_ID_1": "123",
                  "AWS_SUBNET_ID_2": "123",
                  "AWS_SUBNET_ID_3": "123",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "APPLICATION_NAME": "hathor-wallet-service",
                  "BLOCK_REWARD_LOCK": "300",
                  "CONFIRM_FIRST_ADDRESS": "true",
                  "DB_ENDPOINT": "localhost",
                  "DB_PORT": "5432",
                  "DB_NAME": "hathor_tetinha2",
                  "DB_USER": "root",
                  "DB_PASS": "hathor",
                  "MAX_ADDRESS_GAP": "10",
                  "NETWORK": "mainnet",
                  "NEW_TX_SQS": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"NEW_TX_SQS\"]"
                  },
                  "REDIS_URL": "localhost",
                  "REDIS_PASSWORD": "hathor",
                  "SERVICE_NAME": "hathor-wallet-service",
                  "STAGE": "dev",
                  "EXPLORER_SERVICE_STAGE": "dev",
                  "NFT_AUTO_REVIEW_ENABLED": "false",
                  "VOIDED_TX_OFFSET": "5",
                  "DEFAULT_SERVER": "https://node1.mainnet.hathor.network/v1a/",
                  "WS_DOMAIN": "ws.wallet-service.hathor.network",
                  "TX_HISTORY_MAX_COUNT": "10",
                  "WALLET_SERVICE_LAMBDA_ENDPOINT": "",
                  "PUSH_NOTIFICATION_ENABLED": "false",
                  "PUSH_ALLOWED_PROVIDERS": "",
                  "FIREBASE_PROJECT_ID": "",
                  "FIREBASE_PRIVATE_KEY_ID": "",
                  "FIREBASE_PRIVATE_KEY": "",
                  "FIREBASE_CLIENT_EMAIL": "",
                  "FIREBASE_CLIENT_ID": "",
                  "FIREBASE_AUTH_URI": "",
                  "FIREBASE_TOKEN_URI": "",
                  "FIREBASE_AUTH_PROVIDER_X509_CERT_URL": "",
                  "FIREBASE_CLIENT_X509_CERT_URL": "",
                  "LOG_LEVEL": "debug",
                  "ALERT_MANAGER_REGION": "us-east-1",
                  "ALERT_MANAGER_TOPIC": "teta"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "LoadWalletAsyncLogGroup"
            ]
          },
          "LoadWalletApiLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/hathor-wallet-service/dev/1696424677965-2023-10-04T13:04:37.965Z/hathor-wallet-service.zip"
              },
              "Handler": "src/api/wallet.load",
              "Runtime": "nodejs18.x",
              "FunctionName": "hathor-wallet-service-dev-loadWalletApi",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ACCOUNT_ID": "1234",
                  "AUTH_SECRET": "A05qT6meWzwBGnprXOEHT4k31rzL5fMn",
                  "AWS_VPC_DEFAULT_SG_ID": "123",
                  "AWS_SUBNET_ID_1": "123",
                  "AWS_SUBNET_ID_2": "123",
                  "AWS_SUBNET_ID_3": "123",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "APPLICATION_NAME": "hathor-wallet-service",
                  "BLOCK_REWARD_LOCK": "300",
                  "CONFIRM_FIRST_ADDRESS": "true",
                  "DB_ENDPOINT": "localhost",
                  "DB_PORT": "5432",
                  "DB_NAME": "hathor_tetinha2",
                  "DB_USER": "root",
                  "DB_PASS": "hathor",
                  "MAX_ADDRESS_GAP": "10",
                  "NETWORK": "mainnet",
                  "NEW_TX_SQS": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"NEW_TX_SQS\"]"
                  },
                  "REDIS_URL": "localhost",
                  "REDIS_PASSWORD": "hathor",
                  "SERVICE_NAME": "hathor-wallet-service",
                  "STAGE": "dev",
                  "EXPLORER_SERVICE_STAGE": "dev",
                  "NFT_AUTO_REVIEW_ENABLED": "false",
                  "VOIDED_TX_OFFSET": "5",
                  "DEFAULT_SERVER": "https://node1.mainnet.hathor.network/v1a/",
                  "WS_DOMAIN": "ws.wallet-service.hathor.network",
                  "TX_HISTORY_MAX_COUNT": "10",
                  "WALLET_SERVICE_LAMBDA_ENDPOINT": "",
                  "PUSH_NOTIFICATION_ENABLED": "false",
                  "PUSH_ALLOWED_PROVIDERS": "",
                  "FIREBASE_PROJECT_ID": "",
                  "FIREBASE_PRIVATE_KEY_ID": "",
                  "FIREBASE_PRIVATE_KEY": "",
                  "FIREBASE_CLIENT_EMAIL": "",
                  "FIREBASE_CLIENT_ID": "",
                  "FIREBASE_AUTH_URI": "",
                  "FIREBASE_TOKEN_URI": "",
                  "FIREBASE_AUTH_PROVIDER_X509_CERT_URL": "",
                  "FIREBASE_CLIENT_X509_CERT_URL": "",
                  "LOG_LEVEL": "debug",
                  "ALERT_MANAGER_REGION": "us-east-1",
                  "ALERT_MANAGER_TOPIC": "teta"
                }
              },
              "Role": "arn:aws:iam::1234:role/WalletServiceLoadWalletLambda",
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "LoadWalletApiLogGroup"
            ]
          },
          "ChangeWalletAuthXpubApiLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/hathor-wallet-service/dev/1696424677965-2023-10-04T13:04:37.965Z/hathor-wallet-service.zip"
              },
              "Handler": "src/api/wallet.changeAuthXpub",
              "Runtime": "nodejs18.x",
              "FunctionName": "hathor-wallet-service-dev-changeWalletAuthXpubApi",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ACCOUNT_ID": "1234",
                  "AUTH_SECRET": "A05qT6meWzwBGnprXOEHT4k31rzL5fMn",
                  "AWS_VPC_DEFAULT_SG_ID": "123",
                  "AWS_SUBNET_ID_1": "123",
                  "AWS_SUBNET_ID_2": "123",
                  "AWS_SUBNET_ID_3": "123",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "APPLICATION_NAME": "hathor-wallet-service",
                  "BLOCK_REWARD_LOCK": "300",
                  "CONFIRM_FIRST_ADDRESS": "true",
                  "DB_ENDPOINT": "localhost",
                  "DB_PORT": "5432",
                  "DB_NAME": "hathor_tetinha2",
                  "DB_USER": "root",
                  "DB_PASS": "hathor",
                  "MAX_ADDRESS_GAP": "10",
                  "NETWORK": "mainnet",
                  "NEW_TX_SQS": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"NEW_TX_SQS\"]"
                  },
                  "REDIS_URL": "localhost",
                  "REDIS_PASSWORD": "hathor",
                  "SERVICE_NAME": "hathor-wallet-service",
                  "STAGE": "dev",
                  "EXPLORER_SERVICE_STAGE": "dev",
                  "NFT_AUTO_REVIEW_ENABLED": "false",
                  "VOIDED_TX_OFFSET": "5",
                  "DEFAULT_SERVER": "https://node1.mainnet.hathor.network/v1a/",
                  "WS_DOMAIN": "ws.wallet-service.hathor.network",
                  "TX_HISTORY_MAX_COUNT": "10",
                  "WALLET_SERVICE_LAMBDA_ENDPOINT": "",
                  "PUSH_NOTIFICATION_ENABLED": "false",
                  "PUSH_ALLOWED_PROVIDERS": "",
                  "FIREBASE_PROJECT_ID": "",
                  "FIREBASE_PRIVATE_KEY_ID": "",
                  "FIREBASE_PRIVATE_KEY": "",
                  "FIREBASE_CLIENT_EMAIL": "",
                  "FIREBASE_CLIENT_ID": "",
                  "FIREBASE_AUTH_URI": "",
                  "FIREBASE_TOKEN_URI": "",
                  "FIREBASE_AUTH_PROVIDER_X509_CERT_URL": "",
                  "FIREBASE_CLIENT_X509_CERT_URL": "",
                  "LOG_LEVEL": "debug",
                  "ALERT_MANAGER_REGION": "us-east-1",
                  "ALERT_MANAGER_TOPIC": "teta"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "ChangeWalletAuthXpubApiLogGroup"
            ]
          },
          "GetWalletStatusApiLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/hathor-wallet-service/dev/1696424677965-2023-10-04T13:04:37.965Z/hathor-wallet-service.zip"
              },
              "Handler": "src/api/wallet.get",
              "Runtime": "nodejs18.x",
              "FunctionName": "hathor-wallet-service-dev-getWalletStatusApi",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ACCOUNT_ID": "1234",
                  "AUTH_SECRET": "A05qT6meWzwBGnprXOEHT4k31rzL5fMn",
                  "AWS_VPC_DEFAULT_SG_ID": "123",
                  "AWS_SUBNET_ID_1": "123",
                  "AWS_SUBNET_ID_2": "123",
                  "AWS_SUBNET_ID_3": "123",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "APPLICATION_NAME": "hathor-wallet-service",
                  "BLOCK_REWARD_LOCK": "300",
                  "CONFIRM_FIRST_ADDRESS": "true",
                  "DB_ENDPOINT": "localhost",
                  "DB_PORT": "5432",
                  "DB_NAME": "hathor_tetinha2",
                  "DB_USER": "root",
                  "DB_PASS": "hathor",
                  "MAX_ADDRESS_GAP": "10",
                  "NETWORK": "mainnet",
                  "NEW_TX_SQS": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"NEW_TX_SQS\"]"
                  },
                  "REDIS_URL": "localhost",
                  "REDIS_PASSWORD": "hathor",
                  "SERVICE_NAME": "hathor-wallet-service",
                  "STAGE": "dev",
                  "EXPLORER_SERVICE_STAGE": "dev",
                  "NFT_AUTO_REVIEW_ENABLED": "false",
                  "VOIDED_TX_OFFSET": "5",
                  "DEFAULT_SERVER": "https://node1.mainnet.hathor.network/v1a/",
                  "WS_DOMAIN": "ws.wallet-service.hathor.network",
                  "TX_HISTORY_MAX_COUNT": "10",
                  "WALLET_SERVICE_LAMBDA_ENDPOINT": "",
                  "PUSH_NOTIFICATION_ENABLED": "false",
                  "PUSH_ALLOWED_PROVIDERS": "",
                  "FIREBASE_PROJECT_ID": "",
                  "FIREBASE_PRIVATE_KEY_ID": "",
                  "FIREBASE_PRIVATE_KEY": "",
                  "FIREBASE_CLIENT_EMAIL": "",
                  "FIREBASE_CLIENT_ID": "",
                  "FIREBASE_AUTH_URI": "",
                  "FIREBASE_TOKEN_URI": "",
                  "FIREBASE_AUTH_PROVIDER_X509_CERT_URL": "",
                  "FIREBASE_CLIENT_X509_CERT_URL": "",
                  "LOG_LEVEL": "debug",
                  "ALERT_MANAGER_REGION": "us-east-1",
                  "ALERT_MANAGER_TOPIC": "teta"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "GetWalletStatusApiLogGroup"
            ]
          },
          "CheckAddressMineApiLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/hathor-wallet-service/dev/1696424677965-2023-10-04T13:04:37.965Z/hathor-wallet-service.zip"
              },
              "Handler": "src/api/addresses.checkMine",
              "Runtime": "nodejs18.x",
              "FunctionName": "hathor-wallet-service-dev-checkAddressMineApi",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ACCOUNT_ID": "1234",
                  "AUTH_SECRET": "A05qT6meWzwBGnprXOEHT4k31rzL5fMn",
                  "AWS_VPC_DEFAULT_SG_ID": "123",
                  "AWS_SUBNET_ID_1": "123",
                  "AWS_SUBNET_ID_2": "123",
                  "AWS_SUBNET_ID_3": "123",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "APPLICATION_NAME": "hathor-wallet-service",
                  "BLOCK_REWARD_LOCK": "300",
                  "CONFIRM_FIRST_ADDRESS": "true",
                  "DB_ENDPOINT": "localhost",
                  "DB_PORT": "5432",
                  "DB_NAME": "hathor_tetinha2",
                  "DB_USER": "root",
                  "DB_PASS": "hathor",
                  "MAX_ADDRESS_GAP": "10",
                  "NETWORK": "mainnet",
                  "NEW_TX_SQS": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"NEW_TX_SQS\"]"
                  },
                  "REDIS_URL": "localhost",
                  "REDIS_PASSWORD": "hathor",
                  "SERVICE_NAME": "hathor-wallet-service",
                  "STAGE": "dev",
                  "EXPLORER_SERVICE_STAGE": "dev",
                  "NFT_AUTO_REVIEW_ENABLED": "false",
                  "VOIDED_TX_OFFSET": "5",
                  "DEFAULT_SERVER": "https://node1.mainnet.hathor.network/v1a/",
                  "WS_DOMAIN": "ws.wallet-service.hathor.network",
                  "TX_HISTORY_MAX_COUNT": "10",
                  "WALLET_SERVICE_LAMBDA_ENDPOINT": "",
                  "PUSH_NOTIFICATION_ENABLED": "false",
                  "PUSH_ALLOWED_PROVIDERS": "",
                  "FIREBASE_PROJECT_ID": "",
                  "FIREBASE_PRIVATE_KEY_ID": "",
                  "FIREBASE_PRIVATE_KEY": "",
                  "FIREBASE_CLIENT_EMAIL": "",
                  "FIREBASE_CLIENT_ID": "",
                  "FIREBASE_AUTH_URI": "",
                  "FIREBASE_TOKEN_URI": "",
                  "FIREBASE_AUTH_PROVIDER_X509_CERT_URL": "",
                  "FIREBASE_CLIENT_X509_CERT_URL": "",
                  "LOG_LEVEL": "debug",
                  "ALERT_MANAGER_REGION": "us-east-1",
                  "ALERT_MANAGER_TOPIC": "teta"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "CheckAddressMineApiLogGroup"
            ]
          },
          "GetAddressesApiLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/hathor-wallet-service/dev/1696424677965-2023-10-04T13:04:37.965Z/hathor-wallet-service.zip"
              },
              "Handler": "src/api/addresses.get",
              "Runtime": "nodejs18.x",
              "FunctionName": "hathor-wallet-service-dev-getAddressesApi",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ACCOUNT_ID": "1234",
                  "AUTH_SECRET": "A05qT6meWzwBGnprXOEHT4k31rzL5fMn",
                  "AWS_VPC_DEFAULT_SG_ID": "123",
                  "AWS_SUBNET_ID_1": "123",
                  "AWS_SUBNET_ID_2": "123",
                  "AWS_SUBNET_ID_3": "123",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "APPLICATION_NAME": "hathor-wallet-service",
                  "BLOCK_REWARD_LOCK": "300",
                  "CONFIRM_FIRST_ADDRESS": "true",
                  "DB_ENDPOINT": "localhost",
                  "DB_PORT": "5432",
                  "DB_NAME": "hathor_tetinha2",
                  "DB_USER": "root",
                  "DB_PASS": "hathor",
                  "MAX_ADDRESS_GAP": "10",
                  "NETWORK": "mainnet",
                  "NEW_TX_SQS": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"NEW_TX_SQS\"]"
                  },
                  "REDIS_URL": "localhost",
                  "REDIS_PASSWORD": "hathor",
                  "SERVICE_NAME": "hathor-wallet-service",
                  "STAGE": "dev",
                  "EXPLORER_SERVICE_STAGE": "dev",
                  "NFT_AUTO_REVIEW_ENABLED": "false",
                  "VOIDED_TX_OFFSET": "5",
                  "DEFAULT_SERVER": "https://node1.mainnet.hathor.network/v1a/",
                  "WS_DOMAIN": "ws.wallet-service.hathor.network",
                  "TX_HISTORY_MAX_COUNT": "10",
                  "WALLET_SERVICE_LAMBDA_ENDPOINT": "",
                  "PUSH_NOTIFICATION_ENABLED": "false",
                  "PUSH_ALLOWED_PROVIDERS": "",
                  "FIREBASE_PROJECT_ID": "",
                  "FIREBASE_PRIVATE_KEY_ID": "",
                  "FIREBASE_PRIVATE_KEY": "",
                  "FIREBASE_CLIENT_EMAIL": "",
                  "FIREBASE_CLIENT_ID": "",
                  "FIREBASE_AUTH_URI": "",
                  "FIREBASE_TOKEN_URI": "",
                  "FIREBASE_AUTH_PROVIDER_X509_CERT_URL": "",
                  "FIREBASE_CLIENT_X509_CERT_URL": "",
                  "LOG_LEVEL": "debug",
                  "ALERT_MANAGER_REGION": "us-east-1",
                  "ALERT_MANAGER_TOPIC": "teta"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "GetAddressesApiLogGroup"
            ]
          },
          "GetNewAddressesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/hathor-wallet-service/dev/1696424677965-2023-10-04T13:04:37.965Z/hathor-wallet-service.zip"
              },
              "Handler": "src/api/newAddresses.get",
              "Runtime": "nodejs18.x",
              "FunctionName": "hathor-wallet-service-dev-getNewAddresses",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ACCOUNT_ID": "1234",
                  "AUTH_SECRET": "A05qT6meWzwBGnprXOEHT4k31rzL5fMn",
                  "AWS_VPC_DEFAULT_SG_ID": "123",
                  "AWS_SUBNET_ID_1": "123",
                  "AWS_SUBNET_ID_2": "123",
                  "AWS_SUBNET_ID_3": "123",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "APPLICATION_NAME": "hathor-wallet-service",
                  "BLOCK_REWARD_LOCK": "300",
                  "CONFIRM_FIRST_ADDRESS": "true",
                  "DB_ENDPOINT": "localhost",
                  "DB_PORT": "5432",
                  "DB_NAME": "hathor_tetinha2",
                  "DB_USER": "root",
                  "DB_PASS": "hathor",
                  "MAX_ADDRESS_GAP": "10",
                  "NETWORK": "mainnet",
                  "NEW_TX_SQS": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"NEW_TX_SQS\"]"
                  },
                  "REDIS_URL": "localhost",
                  "REDIS_PASSWORD": "hathor",
                  "SERVICE_NAME": "hathor-wallet-service",
                  "STAGE": "dev",
                  "EXPLORER_SERVICE_STAGE": "dev",
                  "NFT_AUTO_REVIEW_ENABLED": "false",
                  "VOIDED_TX_OFFSET": "5",
                  "DEFAULT_SERVER": "https://node1.mainnet.hathor.network/v1a/",
                  "WS_DOMAIN": "ws.wallet-service.hathor.network",
                  "TX_HISTORY_MAX_COUNT": "10",
                  "WALLET_SERVICE_LAMBDA_ENDPOINT": "",
                  "PUSH_NOTIFICATION_ENABLED": "false",
                  "PUSH_ALLOWED_PROVIDERS": "",
                  "FIREBASE_PROJECT_ID": "",
                  "FIREBASE_PRIVATE_KEY_ID": "",
                  "FIREBASE_PRIVATE_KEY": "",
                  "FIREBASE_CLIENT_EMAIL": "",
                  "FIREBASE_CLIENT_ID": "",
                  "FIREBASE_AUTH_URI": "",
                  "FIREBASE_TOKEN_URI": "",
                  "FIREBASE_AUTH_PROVIDER_X509_CERT_URL": "",
                  "FIREBASE_CLIENT_X509_CERT_URL": "",
                  "LOG_LEVEL": "debug",
                  "ALERT_MANAGER_REGION": "us-east-1",
                  "ALERT_MANAGER_TOPIC": "teta"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "GetNewAddressesLogGroup"
            ]
          },
          "GetUtxosLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/hathor-wallet-service/dev/1696424677965-2023-10-04T13:04:37.965Z/hathor-wallet-service.zip"
              },
              "Handler": "src/api/txOutputs.getFilteredUtxos",
              "Runtime": "nodejs18.x",
              "FunctionName": "hathor-wallet-service-dev-getUtxos",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ACCOUNT_ID": "1234",
                  "AUTH_SECRET": "A05qT6meWzwBGnprXOEHT4k31rzL5fMn",
                  "AWS_VPC_DEFAULT_SG_ID": "123",
                  "AWS_SUBNET_ID_1": "123",
                  "AWS_SUBNET_ID_2": "123",
                  "AWS_SUBNET_ID_3": "123",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "APPLICATION_NAME": "hathor-wallet-service",
                  "BLOCK_REWARD_LOCK": "300",
                  "CONFIRM_FIRST_ADDRESS": "true",
                  "DB_ENDPOINT": "localhost",
                  "DB_PORT": "5432",
                  "DB_NAME": "hathor_tetinha2",
                  "DB_USER": "root",
                  "DB_PASS": "hathor",
                  "MAX_ADDRESS_GAP": "10",
                  "NETWORK": "mainnet",
                  "NEW_TX_SQS": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"NEW_TX_SQS\"]"
                  },
                  "REDIS_URL": "localhost",
                  "REDIS_PASSWORD": "hathor",
                  "SERVICE_NAME": "hathor-wallet-service",
                  "STAGE": "dev",
                  "EXPLORER_SERVICE_STAGE": "dev",
                  "NFT_AUTO_REVIEW_ENABLED": "false",
                  "VOIDED_TX_OFFSET": "5",
                  "DEFAULT_SERVER": "https://node1.mainnet.hathor.network/v1a/",
                  "WS_DOMAIN": "ws.wallet-service.hathor.network",
                  "TX_HISTORY_MAX_COUNT": "10",
                  "WALLET_SERVICE_LAMBDA_ENDPOINT": "",
                  "PUSH_NOTIFICATION_ENABLED": "false",
                  "PUSH_ALLOWED_PROVIDERS": "",
                  "FIREBASE_PROJECT_ID": "",
                  "FIREBASE_PRIVATE_KEY_ID": "",
                  "FIREBASE_PRIVATE_KEY": "",
                  "FIREBASE_CLIENT_EMAIL": "",
                  "FIREBASE_CLIENT_ID": "",
                  "FIREBASE_AUTH_URI": "",
                  "FIREBASE_TOKEN_URI": "",
                  "FIREBASE_AUTH_PROVIDER_X509_CERT_URL": "",
                  "FIREBASE_CLIENT_X509_CERT_URL": "",
                  "LOG_LEVEL": "debug",
                  "ALERT_MANAGER_REGION": "us-east-1",
                  "ALERT_MANAGER_TOPIC": "teta"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "GetUtxosLogGroup"
            ]
          },
          "GetTxOutputsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/hathor-wallet-service/dev/1696424677965-2023-10-04T13:04:37.965Z/hathor-wallet-service.zip"
              },
              "Handler": "src/api/txOutputs.getFilteredTxOutputs",
              "Runtime": "nodejs18.x",
              "FunctionName": "hathor-wallet-service-dev-getTxOutputs",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ACCOUNT_ID": "1234",
                  "AUTH_SECRET": "A05qT6meWzwBGnprXOEHT4k31rzL5fMn",
                  "AWS_VPC_DEFAULT_SG_ID": "123",
                  "AWS_SUBNET_ID_1": "123",
                  "AWS_SUBNET_ID_2": "123",
                  "AWS_SUBNET_ID_3": "123",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "APPLICATION_NAME": "hathor-wallet-service",
                  "BLOCK_REWARD_LOCK": "300",
                  "CONFIRM_FIRST_ADDRESS": "true",
                  "DB_ENDPOINT": "localhost",
                  "DB_PORT": "5432",
                  "DB_NAME": "hathor_tetinha2",
                  "DB_USER": "root",
                  "DB_PASS": "hathor",
                  "MAX_ADDRESS_GAP": "10",
                  "NETWORK": "mainnet",
                  "NEW_TX_SQS": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"NEW_TX_SQS\"]"
                  },
                  "REDIS_URL": "localhost",
                  "REDIS_PASSWORD": "hathor",
                  "SERVICE_NAME": "hathor-wallet-service",
                  "STAGE": "dev",
                  "EXPLORER_SERVICE_STAGE": "dev",
                  "NFT_AUTO_REVIEW_ENABLED": "false",
                  "VOIDED_TX_OFFSET": "5",
                  "DEFAULT_SERVER": "https://node1.mainnet.hathor.network/v1a/",
                  "WS_DOMAIN": "ws.wallet-service.hathor.network",
                  "TX_HISTORY_MAX_COUNT": "10",
                  "WALLET_SERVICE_LAMBDA_ENDPOINT": "",
                  "PUSH_NOTIFICATION_ENABLED": "false",
                  "PUSH_ALLOWED_PROVIDERS": "",
                  "FIREBASE_PROJECT_ID": "",
                  "FIREBASE_PRIVATE_KEY_ID": "",
                  "FIREBASE_PRIVATE_KEY": "",
                  "FIREBASE_CLIENT_EMAIL": "",
                  "FIREBASE_CLIENT_ID": "",
                  "FIREBASE_AUTH_URI": "",
                  "FIREBASE_TOKEN_URI": "",
                  "FIREBASE_AUTH_PROVIDER_X509_CERT_URL": "",
                  "FIREBASE_CLIENT_X509_CERT_URL": "",
                  "LOG_LEVEL": "debug",
                  "ALERT_MANAGER_REGION": "us-east-1",
                  "ALERT_MANAGER_TOPIC": "teta"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "GetTxOutputsLogGroup"
            ]
          },
          "GetBalanceApiLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/hathor-wallet-service/dev/1696424677965-2023-10-04T13:04:37.965Z/hathor-wallet-service.zip"
              },
              "Handler": "src/api/balances.get",
              "Runtime": "nodejs18.x",
              "FunctionName": "hathor-wallet-service-dev-getBalanceApi",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ACCOUNT_ID": "1234",
                  "AUTH_SECRET": "A05qT6meWzwBGnprXOEHT4k31rzL5fMn",
                  "AWS_VPC_DEFAULT_SG_ID": "123",
                  "AWS_SUBNET_ID_1": "123",
                  "AWS_SUBNET_ID_2": "123",
                  "AWS_SUBNET_ID_3": "123",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "APPLICATION_NAME": "hathor-wallet-service",
                  "BLOCK_REWARD_LOCK": "300",
                  "CONFIRM_FIRST_ADDRESS": "true",
                  "DB_ENDPOINT": "localhost",
                  "DB_PORT": "5432",
                  "DB_NAME": "hathor_tetinha2",
                  "DB_USER": "root",
                  "DB_PASS": "hathor",
                  "MAX_ADDRESS_GAP": "10",
                  "NETWORK": "mainnet",
                  "NEW_TX_SQS": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"NEW_TX_SQS\"]"
                  },
                  "REDIS_URL": "localhost",
                  "REDIS_PASSWORD": "hathor",
                  "SERVICE_NAME": "hathor-wallet-service",
                  "STAGE": "dev",
                  "EXPLORER_SERVICE_STAGE": "dev",
                  "NFT_AUTO_REVIEW_ENABLED": "false",
                  "VOIDED_TX_OFFSET": "5",
                  "DEFAULT_SERVER": "https://node1.mainnet.hathor.network/v1a/",
                  "WS_DOMAIN": "ws.wallet-service.hathor.network",
                  "TX_HISTORY_MAX_COUNT": "10",
                  "WALLET_SERVICE_LAMBDA_ENDPOINT": "",
                  "PUSH_NOTIFICATION_ENABLED": "false",
                  "PUSH_ALLOWED_PROVIDERS": "",
                  "FIREBASE_PROJECT_ID": "",
                  "FIREBASE_PRIVATE_KEY_ID": "",
                  "FIREBASE_PRIVATE_KEY": "",
                  "FIREBASE_CLIENT_EMAIL": "",
                  "FIREBASE_CLIENT_ID": "",
                  "FIREBASE_AUTH_URI": "",
                  "FIREBASE_TOKEN_URI": "",
                  "FIREBASE_AUTH_PROVIDER_X509_CERT_URL": "",
                  "FIREBASE_CLIENT_X509_CERT_URL": "",
                  "LOG_LEVEL": "debug",
                  "ALERT_MANAGER_REGION": "us-east-1",
                  "ALERT_MANAGER_TOPIC": "teta"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "GetBalanceApiLogGroup"
            ]
          },
          "GetTokensApiLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/hathor-wallet-service/dev/1696424677965-2023-10-04T13:04:37.965Z/hathor-wallet-service.zip"
              },
              "Handler": "src/api/tokens.get",
              "Runtime": "nodejs18.x",
              "FunctionName": "hathor-wallet-service-dev-getTokensApi",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ACCOUNT_ID": "1234",
                  "AUTH_SECRET": "A05qT6meWzwBGnprXOEHT4k31rzL5fMn",
                  "AWS_VPC_DEFAULT_SG_ID": "123",
                  "AWS_SUBNET_ID_1": "123",
                  "AWS_SUBNET_ID_2": "123",
                  "AWS_SUBNET_ID_3": "123",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "APPLICATION_NAME": "hathor-wallet-service",
                  "BLOCK_REWARD_LOCK": "300",
                  "CONFIRM_FIRST_ADDRESS": "true",
                  "DB_ENDPOINT": "localhost",
                  "DB_PORT": "5432",
                  "DB_NAME": "hathor_tetinha2",
                  "DB_USER": "root",
                  "DB_PASS": "hathor",
                  "MAX_ADDRESS_GAP": "10",
                  "NETWORK": "mainnet",
                  "NEW_TX_SQS": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"NEW_TX_SQS\"]"
                  },
                  "REDIS_URL": "localhost",
                  "REDIS_PASSWORD": "hathor",
                  "SERVICE_NAME": "hathor-wallet-service",
                  "STAGE": "dev",
                  "EXPLORER_SERVICE_STAGE": "dev",
                  "NFT_AUTO_REVIEW_ENABLED": "false",
                  "VOIDED_TX_OFFSET": "5",
                  "DEFAULT_SERVER": "https://node1.mainnet.hathor.network/v1a/",
                  "WS_DOMAIN": "ws.wallet-service.hathor.network",
                  "TX_HISTORY_MAX_COUNT": "10",
                  "WALLET_SERVICE_LAMBDA_ENDPOINT": "",
                  "PUSH_NOTIFICATION_ENABLED": "false",
                  "PUSH_ALLOWED_PROVIDERS": "",
                  "FIREBASE_PROJECT_ID": "",
                  "FIREBASE_PRIVATE_KEY_ID": "",
                  "FIREBASE_PRIVATE_KEY": "",
                  "FIREBASE_CLIENT_EMAIL": "",
                  "FIREBASE_CLIENT_ID": "",
                  "FIREBASE_AUTH_URI": "",
                  "FIREBASE_TOKEN_URI": "",
                  "FIREBASE_AUTH_PROVIDER_X509_CERT_URL": "",
                  "FIREBASE_CLIENT_X509_CERT_URL": "",
                  "LOG_LEVEL": "debug",
                  "ALERT_MANAGER_REGION": "us-east-1",
                  "ALERT_MANAGER_TOPIC": "teta"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "GetTokensApiLogGroup"
            ]
          },
          "GetTokenDetailsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/hathor-wallet-service/dev/1696424677965-2023-10-04T13:04:37.965Z/hathor-wallet-service.zip"
              },
              "Handler": "src/api/tokens.getTokenDetails",
              "Runtime": "nodejs18.x",
              "FunctionName": "hathor-wallet-service-dev-getTokenDetails",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ACCOUNT_ID": "1234",
                  "AUTH_SECRET": "A05qT6meWzwBGnprXOEHT4k31rzL5fMn",
                  "AWS_VPC_DEFAULT_SG_ID": "123",
                  "AWS_SUBNET_ID_1": "123",
                  "AWS_SUBNET_ID_2": "123",
                  "AWS_SUBNET_ID_3": "123",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "APPLICATION_NAME": "hathor-wallet-service",
                  "BLOCK_REWARD_LOCK": "300",
                  "CONFIRM_FIRST_ADDRESS": "true",
                  "DB_ENDPOINT": "localhost",
                  "DB_PORT": "5432",
                  "DB_NAME": "hathor_tetinha2",
                  "DB_USER": "root",
                  "DB_PASS": "hathor",
                  "MAX_ADDRESS_GAP": "10",
                  "NETWORK": "mainnet",
                  "NEW_TX_SQS": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"NEW_TX_SQS\"]"
                  },
                  "REDIS_URL": "localhost",
                  "REDIS_PASSWORD": "hathor",
                  "SERVICE_NAME": "hathor-wallet-service",
                  "STAGE": "dev",
                  "EXPLORER_SERVICE_STAGE": "dev",
                  "NFT_AUTO_REVIEW_ENABLED": "false",
                  "VOIDED_TX_OFFSET": "5",
                  "DEFAULT_SERVER": "https://node1.mainnet.hathor.network/v1a/",
                  "WS_DOMAIN": "ws.wallet-service.hathor.network",
                  "TX_HISTORY_MAX_COUNT": "10",
                  "WALLET_SERVICE_LAMBDA_ENDPOINT": "",
                  "PUSH_NOTIFICATION_ENABLED": "false",
                  "PUSH_ALLOWED_PROVIDERS": "",
                  "FIREBASE_PROJECT_ID": "",
                  "FIREBASE_PRIVATE_KEY_ID": "",
                  "FIREBASE_PRIVATE_KEY": "",
                  "FIREBASE_CLIENT_EMAIL": "",
                  "FIREBASE_CLIENT_ID": "",
                  "FIREBASE_AUTH_URI": "",
                  "FIREBASE_TOKEN_URI": "",
                  "FIREBASE_AUTH_PROVIDER_X509_CERT_URL": "",
                  "FIREBASE_CLIENT_X509_CERT_URL": "",
                  "LOG_LEVEL": "debug",
                  "ALERT_MANAGER_REGION": "us-east-1",
                  "ALERT_MANAGER_TOPIC": "teta"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "GetTokenDetailsLogGroup"
            ]
          },
          "GetVersionDataLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/hathor-wallet-service/dev/1696424677965-2023-10-04T13:04:37.965Z/hathor-wallet-service.zip"
              },
              "Handler": "src/api/version.get",
              "Runtime": "nodejs18.x",
              "FunctionName": "hathor-wallet-service-dev-getVersionData",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ACCOUNT_ID": "1234",
                  "AUTH_SECRET": "A05qT6meWzwBGnprXOEHT4k31rzL5fMn",
                  "AWS_VPC_DEFAULT_SG_ID": "123",
                  "AWS_SUBNET_ID_1": "123",
                  "AWS_SUBNET_ID_2": "123",
                  "AWS_SUBNET_ID_3": "123",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "APPLICATION_NAME": "hathor-wallet-service",
                  "BLOCK_REWARD_LOCK": "300",
                  "CONFIRM_FIRST_ADDRESS": "true",
                  "DB_ENDPOINT": "localhost",
                  "DB_PORT": "5432",
                  "DB_NAME": "hathor_tetinha2",
                  "DB_USER": "root",
                  "DB_PASS": "hathor",
                  "MAX_ADDRESS_GAP": "10",
                  "NETWORK": "mainnet",
                  "NEW_TX_SQS": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"NEW_TX_SQS\"]"
                  },
                  "REDIS_URL": "localhost",
                  "REDIS_PASSWORD": "hathor",
                  "SERVICE_NAME": "hathor-wallet-service",
                  "STAGE": "dev",
                  "EXPLORER_SERVICE_STAGE": "dev",
                  "NFT_AUTO_REVIEW_ENABLED": "false",
                  "VOIDED_TX_OFFSET": "5",
                  "DEFAULT_SERVER": "https://node1.mainnet.hathor.network/v1a/",
                  "WS_DOMAIN": "ws.wallet-service.hathor.network",
                  "TX_HISTORY_MAX_COUNT": "10",
                  "WALLET_SERVICE_LAMBDA_ENDPOINT": "",
                  "PUSH_NOTIFICATION_ENABLED": "false",
                  "PUSH_ALLOWED_PROVIDERS": "",
                  "FIREBASE_PROJECT_ID": "",
                  "FIREBASE_PRIVATE_KEY_ID": "",
                  "FIREBASE_PRIVATE_KEY": "",
                  "FIREBASE_CLIENT_EMAIL": "",
                  "FIREBASE_CLIENT_ID": "",
                  "FIREBASE_AUTH_URI": "",
                  "FIREBASE_TOKEN_URI": "",
                  "FIREBASE_AUTH_PROVIDER_X509_CERT_URL": "",
                  "FIREBASE_CLIENT_X509_CERT_URL": "",
                  "LOG_LEVEL": "debug",
                  "ALERT_MANAGER_REGION": "us-east-1",
                  "ALERT_MANAGER_TOPIC": "teta"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "GetVersionDataLogGroup"
            ]
          },
          "GetTxHistoryApiLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/hathor-wallet-service/dev/1696424677965-2023-10-04T13:04:37.965Z/hathor-wallet-service.zip"
              },
              "Handler": "src/api/txhistory.get",
              "Runtime": "nodejs18.x",
              "FunctionName": "hathor-wallet-service-dev-getTxHistoryApi",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ACCOUNT_ID": "1234",
                  "AUTH_SECRET": "A05qT6meWzwBGnprXOEHT4k31rzL5fMn",
                  "AWS_VPC_DEFAULT_SG_ID": "123",
                  "AWS_SUBNET_ID_1": "123",
                  "AWS_SUBNET_ID_2": "123",
                  "AWS_SUBNET_ID_3": "123",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "APPLICATION_NAME": "hathor-wallet-service",
                  "BLOCK_REWARD_LOCK": "300",
                  "CONFIRM_FIRST_ADDRESS": "true",
                  "DB_ENDPOINT": "localhost",
                  "DB_PORT": "5432",
                  "DB_NAME": "hathor_tetinha2",
                  "DB_USER": "root",
                  "DB_PASS": "hathor",
                  "MAX_ADDRESS_GAP": "10",
                  "NETWORK": "mainnet",
                  "NEW_TX_SQS": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"NEW_TX_SQS\"]"
                  },
                  "REDIS_URL": "localhost",
                  "REDIS_PASSWORD": "hathor",
                  "SERVICE_NAME": "hathor-wallet-service",
                  "STAGE": "dev",
                  "EXPLORER_SERVICE_STAGE": "dev",
                  "NFT_AUTO_REVIEW_ENABLED": "false",
                  "VOIDED_TX_OFFSET": "5",
                  "DEFAULT_SERVER": "https://node1.mainnet.hathor.network/v1a/",
                  "WS_DOMAIN": "ws.wallet-service.hathor.network",
                  "TX_HISTORY_MAX_COUNT": "10",
                  "WALLET_SERVICE_LAMBDA_ENDPOINT": "",
                  "PUSH_NOTIFICATION_ENABLED": "false",
                  "PUSH_ALLOWED_PROVIDERS": "",
                  "FIREBASE_PROJECT_ID": "",
                  "FIREBASE_PRIVATE_KEY_ID": "",
                  "FIREBASE_PRIVATE_KEY": "",
                  "FIREBASE_CLIENT_EMAIL": "",
                  "FIREBASE_CLIENT_ID": "",
                  "FIREBASE_AUTH_URI": "",
                  "FIREBASE_TOKEN_URI": "",
                  "FIREBASE_AUTH_PROVIDER_X509_CERT_URL": "",
                  "FIREBASE_CLIENT_X509_CERT_URL": "",
                  "LOG_LEVEL": "debug",
                  "ALERT_MANAGER_REGION": "us-east-1",
                  "ALERT_MANAGER_TOPIC": "teta"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "GetTxHistoryApiLogGroup"
            ]
          },
          "CreateTxProposalApiLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/hathor-wallet-service/dev/1696424677965-2023-10-04T13:04:37.965Z/hathor-wallet-service.zip"
              },
              "Handler": "src/api/txProposalCreate.create",
              "Runtime": "nodejs18.x",
              "FunctionName": "hathor-wallet-service-dev-createTxProposalApi",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ACCOUNT_ID": "1234",
                  "AUTH_SECRET": "A05qT6meWzwBGnprXOEHT4k31rzL5fMn",
                  "AWS_VPC_DEFAULT_SG_ID": "123",
                  "AWS_SUBNET_ID_1": "123",
                  "AWS_SUBNET_ID_2": "123",
                  "AWS_SUBNET_ID_3": "123",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "APPLICATION_NAME": "hathor-wallet-service",
                  "BLOCK_REWARD_LOCK": "300",
                  "CONFIRM_FIRST_ADDRESS": "true",
                  "DB_ENDPOINT": "localhost",
                  "DB_PORT": "5432",
                  "DB_NAME": "hathor_tetinha2",
                  "DB_USER": "root",
                  "DB_PASS": "hathor",
                  "MAX_ADDRESS_GAP": "10",
                  "NETWORK": "mainnet",
                  "NEW_TX_SQS": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"NEW_TX_SQS\"]"
                  },
                  "REDIS_URL": "localhost",
                  "REDIS_PASSWORD": "hathor",
                  "SERVICE_NAME": "hathor-wallet-service",
                  "STAGE": "dev",
                  "EXPLORER_SERVICE_STAGE": "dev",
                  "NFT_AUTO_REVIEW_ENABLED": "false",
                  "VOIDED_TX_OFFSET": "5",
                  "DEFAULT_SERVER": "https://node1.mainnet.hathor.network/v1a/",
                  "WS_DOMAIN": "ws.wallet-service.hathor.network",
                  "TX_HISTORY_MAX_COUNT": "10",
                  "WALLET_SERVICE_LAMBDA_ENDPOINT": "",
                  "PUSH_NOTIFICATION_ENABLED": "false",
                  "PUSH_ALLOWED_PROVIDERS": "",
                  "FIREBASE_PROJECT_ID": "",
                  "FIREBASE_PRIVATE_KEY_ID": "",
                  "FIREBASE_PRIVATE_KEY": "",
                  "FIREBASE_CLIENT_EMAIL": "",
                  "FIREBASE_CLIENT_ID": "",
                  "FIREBASE_AUTH_URI": "",
                  "FIREBASE_TOKEN_URI": "",
                  "FIREBASE_AUTH_PROVIDER_X509_CERT_URL": "",
                  "FIREBASE_CLIENT_X509_CERT_URL": "",
                  "LOG_LEVEL": "debug",
                  "ALERT_MANAGER_REGION": "us-east-1",
                  "ALERT_MANAGER_TOPIC": "teta"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "CreateTxProposalApiLogGroup"
            ]
          },
          "SendTxProposalApiLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/hathor-wallet-service/dev/1696424677965-2023-10-04T13:04:37.965Z/hathor-wallet-service.zip"
              },
              "Handler": "src/api/txProposalSend.send",
              "Runtime": "nodejs18.x",
              "FunctionName": "hathor-wallet-service-dev-sendTxProposalApi",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ACCOUNT_ID": "1234",
                  "AUTH_SECRET": "A05qT6meWzwBGnprXOEHT4k31rzL5fMn",
                  "AWS_VPC_DEFAULT_SG_ID": "123",
                  "AWS_SUBNET_ID_1": "123",
                  "AWS_SUBNET_ID_2": "123",
                  "AWS_SUBNET_ID_3": "123",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "APPLICATION_NAME": "hathor-wallet-service",
                  "BLOCK_REWARD_LOCK": "300",
                  "CONFIRM_FIRST_ADDRESS": "true",
                  "DB_ENDPOINT": "localhost",
                  "DB_PORT": "5432",
                  "DB_NAME": "hathor_tetinha2",
                  "DB_USER": "root",
                  "DB_PASS": "hathor",
                  "MAX_ADDRESS_GAP": "10",
                  "NETWORK": "mainnet",
                  "NEW_TX_SQS": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"NEW_TX_SQS\"]"
                  },
                  "REDIS_URL": "localhost",
                  "REDIS_PASSWORD": "hathor",
                  "SERVICE_NAME": "hathor-wallet-service",
                  "STAGE": "dev",
                  "EXPLORER_SERVICE_STAGE": "dev",
                  "NFT_AUTO_REVIEW_ENABLED": "false",
                  "VOIDED_TX_OFFSET": "5",
                  "DEFAULT_SERVER": "https://node1.mainnet.hathor.network/v1a/",
                  "WS_DOMAIN": "ws.wallet-service.hathor.network",
                  "TX_HISTORY_MAX_COUNT": "10",
                  "WALLET_SERVICE_LAMBDA_ENDPOINT": "",
                  "PUSH_NOTIFICATION_ENABLED": "false",
                  "PUSH_ALLOWED_PROVIDERS": "",
                  "FIREBASE_PROJECT_ID": "",
                  "FIREBASE_PRIVATE_KEY_ID": "",
                  "FIREBASE_PRIVATE_KEY": "",
                  "FIREBASE_CLIENT_EMAIL": "",
                  "FIREBASE_CLIENT_ID": "",
                  "FIREBASE_AUTH_URI": "",
                  "FIREBASE_TOKEN_URI": "",
                  "FIREBASE_AUTH_PROVIDER_X509_CERT_URL": "",
                  "FIREBASE_CLIENT_X509_CERT_URL": "",
                  "LOG_LEVEL": "debug",
                  "ALERT_MANAGER_REGION": "us-east-1",
                  "ALERT_MANAGER_TOPIC": "teta"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "SendTxProposalApiLogGroup"
            ]
          },
          "DeleteTxProposalApiLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/hathor-wallet-service/dev/1696424677965-2023-10-04T13:04:37.965Z/hathor-wallet-service.zip"
              },
              "Handler": "src/api/txProposalDestroy.destroy",
              "Runtime": "nodejs18.x",
              "FunctionName": "hathor-wallet-service-dev-deleteTxProposalApi",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ACCOUNT_ID": "1234",
                  "AUTH_SECRET": "A05qT6meWzwBGnprXOEHT4k31rzL5fMn",
                  "AWS_VPC_DEFAULT_SG_ID": "123",
                  "AWS_SUBNET_ID_1": "123",
                  "AWS_SUBNET_ID_2": "123",
                  "AWS_SUBNET_ID_3": "123",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "APPLICATION_NAME": "hathor-wallet-service",
                  "BLOCK_REWARD_LOCK": "300",
                  "CONFIRM_FIRST_ADDRESS": "true",
                  "DB_ENDPOINT": "localhost",
                  "DB_PORT": "5432",
                  "DB_NAME": "hathor_tetinha2",
                  "DB_USER": "root",
                  "DB_PASS": "hathor",
                  "MAX_ADDRESS_GAP": "10",
                  "NETWORK": "mainnet",
                  "NEW_TX_SQS": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"NEW_TX_SQS\"]"
                  },
                  "REDIS_URL": "localhost",
                  "REDIS_PASSWORD": "hathor",
                  "SERVICE_NAME": "hathor-wallet-service",
                  "STAGE": "dev",
                  "EXPLORER_SERVICE_STAGE": "dev",
                  "NFT_AUTO_REVIEW_ENABLED": "false",
                  "VOIDED_TX_OFFSET": "5",
                  "DEFAULT_SERVER": "https://node1.mainnet.hathor.network/v1a/",
                  "WS_DOMAIN": "ws.wallet-service.hathor.network",
                  "TX_HISTORY_MAX_COUNT": "10",
                  "WALLET_SERVICE_LAMBDA_ENDPOINT": "",
                  "PUSH_NOTIFICATION_ENABLED": "false",
                  "PUSH_ALLOWED_PROVIDERS": "",
                  "FIREBASE_PROJECT_ID": "",
                  "FIREBASE_PRIVATE_KEY_ID": "",
                  "FIREBASE_PRIVATE_KEY": "",
                  "FIREBASE_CLIENT_EMAIL": "",
                  "FIREBASE_CLIENT_ID": "",
                  "FIREBASE_AUTH_URI": "",
                  "FIREBASE_TOKEN_URI": "",
                  "FIREBASE_AUTH_PROVIDER_X509_CERT_URL": "",
                  "FIREBASE_CLIENT_X509_CERT_URL": "",
                  "LOG_LEVEL": "debug",
                  "ALERT_MANAGER_REGION": "us-east-1",
                  "ALERT_MANAGER_TOPIC": "teta"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "DeleteTxProposalApiLogGroup"
            ]
          },
          "WsConnectLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/hathor-wallet-service/dev/1696424677965-2023-10-04T13:04:37.965Z/hathor-wallet-service.zip"
              },
              "Handler": "src/ws/connection.connect",
              "Runtime": "nodejs18.x",
              "FunctionName": "hathor-wallet-service-dev-wsConnect",
              "MemorySize": 256,
              "Timeout": 2,
              "Environment": {
                "Variables": {
                  "ACCOUNT_ID": "1234",
                  "AUTH_SECRET": "A05qT6meWzwBGnprXOEHT4k31rzL5fMn",
                  "AWS_VPC_DEFAULT_SG_ID": "123",
                  "AWS_SUBNET_ID_1": "123",
                  "AWS_SUBNET_ID_2": "123",
                  "AWS_SUBNET_ID_3": "123",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "APPLICATION_NAME": "hathor-wallet-service",
                  "BLOCK_REWARD_LOCK": "300",
                  "CONFIRM_FIRST_ADDRESS": "true",
                  "DB_ENDPOINT": "localhost",
                  "DB_PORT": "5432",
                  "DB_NAME": "hathor_tetinha2",
                  "DB_USER": "root",
                  "DB_PASS": "hathor",
                  "MAX_ADDRESS_GAP": "10",
                  "NETWORK": "mainnet",
                  "NEW_TX_SQS": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"NEW_TX_SQS\"]"
                  },
                  "REDIS_URL": "localhost",
                  "REDIS_PASSWORD": "hathor",
                  "SERVICE_NAME": "hathor-wallet-service",
                  "STAGE": "dev",
                  "EXPLORER_SERVICE_STAGE": "dev",
                  "NFT_AUTO_REVIEW_ENABLED": "false",
                  "VOIDED_TX_OFFSET": "5",
                  "DEFAULT_SERVER": "https://node1.mainnet.hathor.network/v1a/",
                  "WS_DOMAIN": "ws.wallet-service.hathor.network",
                  "TX_HISTORY_MAX_COUNT": "10",
                  "WALLET_SERVICE_LAMBDA_ENDPOINT": "",
                  "PUSH_NOTIFICATION_ENABLED": "false",
                  "PUSH_ALLOWED_PROVIDERS": "",
                  "FIREBASE_PROJECT_ID": "",
                  "FIREBASE_PRIVATE_KEY_ID": "",
                  "FIREBASE_PRIVATE_KEY": "",
                  "FIREBASE_CLIENT_EMAIL": "",
                  "FIREBASE_CLIENT_ID": "",
                  "FIREBASE_AUTH_URI": "",
                  "FIREBASE_TOKEN_URI": "",
                  "FIREBASE_AUTH_PROVIDER_X509_CERT_URL": "",
                  "FIREBASE_CLIENT_X509_CERT_URL": "",
                  "LOG_LEVEL": "debug",
                  "ALERT_MANAGER_REGION": "us-east-1",
                  "ALERT_MANAGER_TOPIC": "teta"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "WsConnectLogGroup"
            ]
          },
          "WsJoinLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/hathor-wallet-service/dev/1696424677965-2023-10-04T13:04:37.965Z/hathor-wallet-service.zip"
              },
              "Handler": "src/ws/join.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "hathor-wallet-service-dev-wsJoin",
              "MemorySize": 256,
              "Timeout": 2,
              "Environment": {
                "Variables": {
                  "ACCOUNT_ID": "1234",
                  "AUTH_SECRET": "A05qT6meWzwBGnprXOEHT4k31rzL5fMn",
                  "AWS_VPC_DEFAULT_SG_ID": "123",
                  "AWS_SUBNET_ID_1": "123",
                  "AWS_SUBNET_ID_2": "123",
                  "AWS_SUBNET_ID_3": "123",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "APPLICATION_NAME": "hathor-wallet-service",
                  "BLOCK_REWARD_LOCK": "300",
                  "CONFIRM_FIRST_ADDRESS": "true",
                  "DB_ENDPOINT": "localhost",
                  "DB_PORT": "5432",
                  "DB_NAME": "hathor_tetinha2",
                  "DB_USER": "root",
                  "DB_PASS": "hathor",
                  "MAX_ADDRESS_GAP": "10",
                  "NETWORK": "mainnet",
                  "NEW_TX_SQS": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"NEW_TX_SQS\"]"
                  },
                  "REDIS_URL": "localhost",
                  "REDIS_PASSWORD": "hathor",
                  "SERVICE_NAME": "hathor-wallet-service",
                  "STAGE": "dev",
                  "EXPLORER_SERVICE_STAGE": "dev",
                  "NFT_AUTO_REVIEW_ENABLED": "false",
                  "VOIDED_TX_OFFSET": "5",
                  "DEFAULT_SERVER": "https://node1.mainnet.hathor.network/v1a/",
                  "WS_DOMAIN": "ws.wallet-service.hathor.network",
                  "TX_HISTORY_MAX_COUNT": "10",
                  "WALLET_SERVICE_LAMBDA_ENDPOINT": "",
                  "PUSH_NOTIFICATION_ENABLED": "false",
                  "PUSH_ALLOWED_PROVIDERS": "",
                  "FIREBASE_PROJECT_ID": "",
                  "FIREBASE_PRIVATE_KEY_ID": "",
                  "FIREBASE_PRIVATE_KEY": "",
                  "FIREBASE_CLIENT_EMAIL": "",
                  "FIREBASE_CLIENT_ID": "",
                  "FIREBASE_AUTH_URI": "",
                  "FIREBASE_TOKEN_URI": "",
                  "FIREBASE_AUTH_PROVIDER_X509_CERT_URL": "",
                  "FIREBASE_CLIENT_X509_CERT_URL": "",
                  "LOG_LEVEL": "debug",
                  "ALERT_MANAGER_REGION": "us-east-1",
                  "ALERT_MANAGER_TOPIC": "teta"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "WsJoinLogGroup"
            ]
          },
          "WsTxNotifyNewLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/hathor-wallet-service/dev/1696424677965-2023-10-04T13:04:37.965Z/hathor-wallet-service.zip"
              },
              "Handler": "src/ws/txNotify.onNewTx",
              "Runtime": "nodejs18.x",
              "FunctionName": "hathor-wallet-service-dev-wsTxNotifyNew",
              "MemorySize": 256,
              "Timeout": 2,
              "Environment": {
                "Variables": {
                  "ACCOUNT_ID": "1234",
                  "AUTH_SECRET": "A05qT6meWzwBGnprXOEHT4k31rzL5fMn",
                  "AWS_VPC_DEFAULT_SG_ID": "123",
                  "AWS_SUBNET_ID_1": "123",
                  "AWS_SUBNET_ID_2": "123",
                  "AWS_SUBNET_ID_3": "123",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "APPLICATION_NAME": "hathor-wallet-service",
                  "BLOCK_REWARD_LOCK": "300",
                  "CONFIRM_FIRST_ADDRESS": "true",
                  "DB_ENDPOINT": "localhost",
                  "DB_PORT": "5432",
                  "DB_NAME": "hathor_tetinha2",
                  "DB_USER": "root",
                  "DB_PASS": "hathor",
                  "MAX_ADDRESS_GAP": "10",
                  "NETWORK": "mainnet",
                  "NEW_TX_SQS": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"NEW_TX_SQS\"]"
                  },
                  "REDIS_URL": "localhost",
                  "REDIS_PASSWORD": "hathor",
                  "SERVICE_NAME": "hathor-wallet-service",
                  "STAGE": "dev",
                  "EXPLORER_SERVICE_STAGE": "dev",
                  "NFT_AUTO_REVIEW_ENABLED": "false",
                  "VOIDED_TX_OFFSET": "5",
                  "DEFAULT_SERVER": "https://node1.mainnet.hathor.network/v1a/",
                  "WS_DOMAIN": "ws.wallet-service.hathor.network",
                  "TX_HISTORY_MAX_COUNT": "10",
                  "WALLET_SERVICE_LAMBDA_ENDPOINT": "",
                  "PUSH_NOTIFICATION_ENABLED": "false",
                  "PUSH_ALLOWED_PROVIDERS": "",
                  "FIREBASE_PROJECT_ID": "",
                  "FIREBASE_PRIVATE_KEY_ID": "",
                  "FIREBASE_PRIVATE_KEY": "",
                  "FIREBASE_CLIENT_EMAIL": "",
                  "FIREBASE_CLIENT_ID": "",
                  "FIREBASE_AUTH_URI": "",
                  "FIREBASE_TOKEN_URI": "",
                  "FIREBASE_AUTH_PROVIDER_X509_CERT_URL": "",
                  "FIREBASE_CLIENT_X509_CERT_URL": "",
                  "LOG_LEVEL": "debug",
                  "ALERT_MANAGER_REGION": "us-east-1",
                  "ALERT_MANAGER_TOPIC": "teta"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "WsTxNotifyNewLogGroup"
            ]
          },
          "WsTxNotifyUpdateLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/hathor-wallet-service/dev/1696424677965-2023-10-04T13:04:37.965Z/hathor-wallet-service.zip"
              },
              "Handler": "src/ws/txNotify.onUpdateTx",
              "Runtime": "nodejs18.x",
              "FunctionName": "hathor-wallet-service-dev-wsTxNotifyUpdate",
              "MemorySize": 256,
              "Timeout": 2,
              "Environment": {
                "Variables": {
                  "ACCOUNT_ID": "1234",
                  "AUTH_SECRET": "A05qT6meWzwBGnprXOEHT4k31rzL5fMn",
                  "AWS_VPC_DEFAULT_SG_ID": "123",
                  "AWS_SUBNET_ID_1": "123",
                  "AWS_SUBNET_ID_2": "123",
                  "AWS_SUBNET_ID_3": "123",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "APPLICATION_NAME": "hathor-wallet-service",
                  "BLOCK_REWARD_LOCK": "300",
                  "CONFIRM_FIRST_ADDRESS": "true",
                  "DB_ENDPOINT": "localhost",
                  "DB_PORT": "5432",
                  "DB_NAME": "hathor_tetinha2",
                  "DB_USER": "root",
                  "DB_PASS": "hathor",
                  "MAX_ADDRESS_GAP": "10",
                  "NETWORK": "mainnet",
                  "NEW_TX_SQS": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"NEW_TX_SQS\"]"
                  },
                  "REDIS_URL": "localhost",
                  "REDIS_PASSWORD": "hathor",
                  "SERVICE_NAME": "hathor-wallet-service",
                  "STAGE": "dev",
                  "EXPLORER_SERVICE_STAGE": "dev",
                  "NFT_AUTO_REVIEW_ENABLED": "false",
                  "VOIDED_TX_OFFSET": "5",
                  "DEFAULT_SERVER": "https://node1.mainnet.hathor.network/v1a/",
                  "WS_DOMAIN": "ws.wallet-service.hathor.network",
                  "TX_HISTORY_MAX_COUNT": "10",
                  "WALLET_SERVICE_LAMBDA_ENDPOINT": "",
                  "PUSH_NOTIFICATION_ENABLED": "false",
                  "PUSH_ALLOWED_PROVIDERS": "",
                  "FIREBASE_PROJECT_ID": "",
                  "FIREBASE_PRIVATE_KEY_ID": "",
                  "FIREBASE_PRIVATE_KEY": "",
                  "FIREBASE_CLIENT_EMAIL": "",
                  "FIREBASE_CLIENT_ID": "",
                  "FIREBASE_AUTH_URI": "",
                  "FIREBASE_TOKEN_URI": "",
                  "FIREBASE_AUTH_PROVIDER_X509_CERT_URL": "",
                  "FIREBASE_CLIENT_X509_CERT_URL": "",
                  "LOG_LEVEL": "debug",
                  "ALERT_MANAGER_REGION": "us-east-1",
                  "ALERT_MANAGER_TOPIC": "teta"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "WsTxNotifyUpdateLogGroup"
            ]
          },
          "WsAdminBroadcastLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/hathor-wallet-service/dev/1696424677965-2023-10-04T13:04:37.965Z/hathor-wallet-service.zip"
              },
              "Handler": "src/ws/admin.broadcast",
              "Runtime": "nodejs18.x",
              "FunctionName": "hathor-wallet-service-dev-wsAdminBroadcast",
              "MemorySize": 256,
              "Timeout": 2,
              "Environment": {
                "Variables": {
                  "ACCOUNT_ID": "1234",
                  "AUTH_SECRET": "A05qT6meWzwBGnprXOEHT4k31rzL5fMn",
                  "AWS_VPC_DEFAULT_SG_ID": "123",
                  "AWS_SUBNET_ID_1": "123",
                  "AWS_SUBNET_ID_2": "123",
                  "AWS_SUBNET_ID_3": "123",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "APPLICATION_NAME": "hathor-wallet-service",
                  "BLOCK_REWARD_LOCK": "300",
                  "CONFIRM_FIRST_ADDRESS": "true",
                  "DB_ENDPOINT": "localhost",
                  "DB_PORT": "5432",
                  "DB_NAME": "hathor_tetinha2",
                  "DB_USER": "root",
                  "DB_PASS": "hathor",
                  "MAX_ADDRESS_GAP": "10",
                  "NETWORK": "mainnet",
                  "NEW_TX_SQS": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"NEW_TX_SQS\"]"
                  },
                  "REDIS_URL": "localhost",
                  "REDIS_PASSWORD": "hathor",
                  "SERVICE_NAME": "hathor-wallet-service",
                  "STAGE": "dev",
                  "EXPLORER_SERVICE_STAGE": "dev",
                  "NFT_AUTO_REVIEW_ENABLED": "false",
                  "VOIDED_TX_OFFSET": "5",
                  "DEFAULT_SERVER": "https://node1.mainnet.hathor.network/v1a/",
                  "WS_DOMAIN": "ws.wallet-service.hathor.network",
                  "TX_HISTORY_MAX_COUNT": "10",
                  "WALLET_SERVICE_LAMBDA_ENDPOINT": "",
                  "PUSH_NOTIFICATION_ENABLED": "false",
                  "PUSH_ALLOWED_PROVIDERS": "",
                  "FIREBASE_PROJECT_ID": "",
                  "FIREBASE_PRIVATE_KEY_ID": "",
                  "FIREBASE_PRIVATE_KEY": "",
                  "FIREBASE_CLIENT_EMAIL": "",
                  "FIREBASE_CLIENT_ID": "",
                  "FIREBASE_AUTH_URI": "",
                  "FIREBASE_TOKEN_URI": "",
                  "FIREBASE_AUTH_PROVIDER_X509_CERT_URL": "",
                  "FIREBASE_CLIENT_X509_CERT_URL": "",
                  "LOG_LEVEL": "debug",
                  "ALERT_MANAGER_REGION": "us-east-1",
                  "ALERT_MANAGER_TOPIC": "teta"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "WsAdminBroadcastLogGroup"
            ]
          },
          "WsAdminDisconnectLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/hathor-wallet-service/dev/1696424677965-2023-10-04T13:04:37.965Z/hathor-wallet-service.zip"
              },
              "Handler": "src/ws/admin.disconnect",
              "Runtime": "nodejs18.x",
              "FunctionName": "hathor-wallet-service-dev-wsAdminDisconnect",
              "MemorySize": 256,
              "Timeout": 2,
              "Environment": {
                "Variables": {
                  "ACCOUNT_ID": "1234",
                  "AUTH_SECRET": "A05qT6meWzwBGnprXOEHT4k31rzL5fMn",
                  "AWS_VPC_DEFAULT_SG_ID": "123",
                  "AWS_SUBNET_ID_1": "123",
                  "AWS_SUBNET_ID_2": "123",
                  "AWS_SUBNET_ID_3": "123",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "APPLICATION_NAME": "hathor-wallet-service",
                  "BLOCK_REWARD_LOCK": "300",
                  "CONFIRM_FIRST_ADDRESS": "true",
                  "DB_ENDPOINT": "localhost",
                  "DB_PORT": "5432",
                  "DB_NAME": "hathor_tetinha2",
                  "DB_USER": "root",
                  "DB_PASS": "hathor",
                  "MAX_ADDRESS_GAP": "10",
                  "NETWORK": "mainnet",
                  "NEW_TX_SQS": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"NEW_TX_SQS\"]"
                  },
                  "REDIS_URL": "localhost",
                  "REDIS_PASSWORD": "hathor",
                  "SERVICE_NAME": "hathor-wallet-service",
                  "STAGE": "dev",
                  "EXPLORER_SERVICE_STAGE": "dev",
                  "NFT_AUTO_REVIEW_ENABLED": "false",
                  "VOIDED_TX_OFFSET": "5",
                  "DEFAULT_SERVER": "https://node1.mainnet.hathor.network/v1a/",
                  "WS_DOMAIN": "ws.wallet-service.hathor.network",
                  "TX_HISTORY_MAX_COUNT": "10",
                  "WALLET_SERVICE_LAMBDA_ENDPOINT": "",
                  "PUSH_NOTIFICATION_ENABLED": "false",
                  "PUSH_ALLOWED_PROVIDERS": "",
                  "FIREBASE_PROJECT_ID": "",
                  "FIREBASE_PRIVATE_KEY_ID": "",
                  "FIREBASE_PRIVATE_KEY": "",
                  "FIREBASE_CLIENT_EMAIL": "",
                  "FIREBASE_CLIENT_ID": "",
                  "FIREBASE_AUTH_URI": "",
                  "FIREBASE_TOKEN_URI": "",
                  "FIREBASE_AUTH_PROVIDER_X509_CERT_URL": "",
                  "FIREBASE_CLIENT_X509_CERT_URL": "",
                  "LOG_LEVEL": "debug",
                  "ALERT_MANAGER_REGION": "us-east-1",
                  "ALERT_MANAGER_TOPIC": "teta"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "WsAdminDisconnectLogGroup"
            ]
          },
          "WsAdminMulticastLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/hathor-wallet-service/dev/1696424677965-2023-10-04T13:04:37.965Z/hathor-wallet-service.zip"
              },
              "Handler": "src/ws/admin.multicast",
              "Runtime": "nodejs18.x",
              "FunctionName": "hathor-wallet-service-dev-wsAdminMulticast",
              "MemorySize": 256,
              "Timeout": 2,
              "Environment": {
                "Variables": {
                  "ACCOUNT_ID": "1234",
                  "AUTH_SECRET": "A05qT6meWzwBGnprXOEHT4k31rzL5fMn",
                  "AWS_VPC_DEFAULT_SG_ID": "123",
                  "AWS_SUBNET_ID_1": "123",
                  "AWS_SUBNET_ID_2": "123",
                  "AWS_SUBNET_ID_3": "123",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "APPLICATION_NAME": "hathor-wallet-service",
                  "BLOCK_REWARD_LOCK": "300",
                  "CONFIRM_FIRST_ADDRESS": "true",
                  "DB_ENDPOINT": "localhost",
                  "DB_PORT": "5432",
                  "DB_NAME": "hathor_tetinha2",
                  "DB_USER": "root",
                  "DB_PASS": "hathor",
                  "MAX_ADDRESS_GAP": "10",
                  "NETWORK": "mainnet",
                  "NEW_TX_SQS": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"NEW_TX_SQS\"]"
                  },
                  "REDIS_URL": "localhost",
                  "REDIS_PASSWORD": "hathor",
                  "SERVICE_NAME": "hathor-wallet-service",
                  "STAGE": "dev",
                  "EXPLORER_SERVICE_STAGE": "dev",
                  "NFT_AUTO_REVIEW_ENABLED": "false",
                  "VOIDED_TX_OFFSET": "5",
                  "DEFAULT_SERVER": "https://node1.mainnet.hathor.network/v1a/",
                  "WS_DOMAIN": "ws.wallet-service.hathor.network",
                  "TX_HISTORY_MAX_COUNT": "10",
                  "WALLET_SERVICE_LAMBDA_ENDPOINT": "",
                  "PUSH_NOTIFICATION_ENABLED": "false",
                  "PUSH_ALLOWED_PROVIDERS": "",
                  "FIREBASE_PROJECT_ID": "",
                  "FIREBASE_PRIVATE_KEY_ID": "",
                  "FIREBASE_PRIVATE_KEY": "",
                  "FIREBASE_CLIENT_EMAIL": "",
                  "FIREBASE_CLIENT_ID": "",
                  "FIREBASE_AUTH_URI": "",
                  "FIREBASE_TOKEN_URI": "",
                  "FIREBASE_AUTH_PROVIDER_X509_CERT_URL": "",
                  "FIREBASE_CLIENT_X509_CERT_URL": "",
                  "LOG_LEVEL": "debug",
                  "ALERT_MANAGER_REGION": "us-east-1",
                  "ALERT_MANAGER_TOPIC": "teta"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "WsAdminMulticastLogGroup"
            ]
          },
          "AuthTokenApiLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/hathor-wallet-service/dev/1696424677965-2023-10-04T13:04:37.965Z/hathor-wallet-service.zip"
              },
              "Handler": "src/api/auth.tokenHandler",
              "Runtime": "nodejs18.x",
              "FunctionName": "hathor-wallet-service-dev-authTokenApi",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ACCOUNT_ID": "1234",
                  "AUTH_SECRET": "A05qT6meWzwBGnprXOEHT4k31rzL5fMn",
                  "AWS_VPC_DEFAULT_SG_ID": "123",
                  "AWS_SUBNET_ID_1": "123",
                  "AWS_SUBNET_ID_2": "123",
                  "AWS_SUBNET_ID_3": "123",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "APPLICATION_NAME": "hathor-wallet-service",
                  "BLOCK_REWARD_LOCK": "300",
                  "CONFIRM_FIRST_ADDRESS": "true",
                  "DB_ENDPOINT": "localhost",
                  "DB_PORT": "5432",
                  "DB_NAME": "hathor_tetinha2",
                  "DB_USER": "root",
                  "DB_PASS": "hathor",
                  "MAX_ADDRESS_GAP": "10",
                  "NETWORK": "mainnet",
                  "NEW_TX_SQS": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"NEW_TX_SQS\"]"
                  },
                  "REDIS_URL": "localhost",
                  "REDIS_PASSWORD": "hathor",
                  "SERVICE_NAME": "hathor-wallet-service",
                  "STAGE": "dev",
                  "EXPLORER_SERVICE_STAGE": "dev",
                  "NFT_AUTO_REVIEW_ENABLED": "false",
                  "VOIDED_TX_OFFSET": "5",
                  "DEFAULT_SERVER": "https://node1.mainnet.hathor.network/v1a/",
                  "WS_DOMAIN": "ws.wallet-service.hathor.network",
                  "TX_HISTORY_MAX_COUNT": "10",
                  "WALLET_SERVICE_LAMBDA_ENDPOINT": "",
                  "PUSH_NOTIFICATION_ENABLED": "false",
                  "PUSH_ALLOWED_PROVIDERS": "",
                  "FIREBASE_PROJECT_ID": "",
                  "FIREBASE_PRIVATE_KEY_ID": "",
                  "FIREBASE_PRIVATE_KEY": "",
                  "FIREBASE_CLIENT_EMAIL": "",
                  "FIREBASE_CLIENT_ID": "",
                  "FIREBASE_AUTH_URI": "",
                  "FIREBASE_TOKEN_URI": "",
                  "FIREBASE_AUTH_PROVIDER_X509_CERT_URL": "",
                  "FIREBASE_CLIENT_X509_CERT_URL": "",
                  "LOG_LEVEL": "debug",
                  "ALERT_MANAGER_REGION": "us-east-1",
                  "ALERT_MANAGER_TOPIC": "teta"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "AuthTokenApiLogGroup"
            ]
          },
          "BearerAuthorizerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/hathor-wallet-service/dev/1696424677965-2023-10-04T13:04:37.965Z/hathor-wallet-service.zip"
              },
              "Handler": "src/api/auth.bearerAuthorizer",
              "Runtime": "nodejs18.x",
              "FunctionName": "hathor-wallet-service-dev-bearerAuthorizer",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ACCOUNT_ID": "1234",
                  "AUTH_SECRET": "A05qT6meWzwBGnprXOEHT4k31rzL5fMn",
                  "AWS_VPC_DEFAULT_SG_ID": "123",
                  "AWS_SUBNET_ID_1": "123",
                  "AWS_SUBNET_ID_2": "123",
                  "AWS_SUBNET_ID_3": "123",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "APPLICATION_NAME": "hathor-wallet-service",
                  "BLOCK_REWARD_LOCK": "300",
                  "CONFIRM_FIRST_ADDRESS": "true",
                  "DB_ENDPOINT": "localhost",
                  "DB_PORT": "5432",
                  "DB_NAME": "hathor_tetinha2",
                  "DB_USER": "root",
                  "DB_PASS": "hathor",
                  "MAX_ADDRESS_GAP": "10",
                  "NETWORK": "mainnet",
                  "NEW_TX_SQS": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"NEW_TX_SQS\"]"
                  },
                  "REDIS_URL": "localhost",
                  "REDIS_PASSWORD": "hathor",
                  "SERVICE_NAME": "hathor-wallet-service",
                  "STAGE": "dev",
                  "EXPLORER_SERVICE_STAGE": "dev",
                  "NFT_AUTO_REVIEW_ENABLED": "false",
                  "VOIDED_TX_OFFSET": "5",
                  "DEFAULT_SERVER": "https://node1.mainnet.hathor.network/v1a/",
                  "WS_DOMAIN": "ws.wallet-service.hathor.network",
                  "TX_HISTORY_MAX_COUNT": "10",
                  "WALLET_SERVICE_LAMBDA_ENDPOINT": "",
                  "PUSH_NOTIFICATION_ENABLED": "false",
                  "PUSH_ALLOWED_PROVIDERS": "",
                  "FIREBASE_PROJECT_ID": "",
                  "FIREBASE_PRIVATE_KEY_ID": "",
                  "FIREBASE_PRIVATE_KEY": "",
                  "FIREBASE_CLIENT_EMAIL": "",
                  "FIREBASE_CLIENT_ID": "",
                  "FIREBASE_AUTH_URI": "",
                  "FIREBASE_TOKEN_URI": "",
                  "FIREBASE_AUTH_PROVIDER_X509_CERT_URL": "",
                  "FIREBASE_CLIENT_X509_CERT_URL": "",
                  "LOG_LEVEL": "debug",
                  "ALERT_MANAGER_REGION": "us-east-1",
                  "ALERT_MANAGER_TOPIC": "teta"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "BearerAuthorizerLogGroup"
            ]
          },
          "MetricsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/hathor-wallet-service/dev/1696424677965-2023-10-04T13:04:37.965Z/hathor-wallet-service.zip"
              },
              "Handler": "src/metrics.getMetrics",
              "Runtime": "nodejs18.x",
              "FunctionName": "hathor-wallet-service-dev-metrics",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ACCOUNT_ID": "1234",
                  "AUTH_SECRET": "A05qT6meWzwBGnprXOEHT4k31rzL5fMn",
                  "AWS_VPC_DEFAULT_SG_ID": "123",
                  "AWS_SUBNET_ID_1": "123",
                  "AWS_SUBNET_ID_2": "123",
                  "AWS_SUBNET_ID_3": "123",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "APPLICATION_NAME": "hathor-wallet-service",
                  "BLOCK_REWARD_LOCK": "300",
                  "CONFIRM_FIRST_ADDRESS": "true",
                  "DB_ENDPOINT": "localhost",
                  "DB_PORT": "5432",
                  "DB_NAME": "hathor_tetinha2",
                  "DB_USER": "root",
                  "DB_PASS": "hathor",
                  "MAX_ADDRESS_GAP": "10",
                  "NETWORK": "mainnet",
                  "NEW_TX_SQS": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"NEW_TX_SQS\"]"
                  },
                  "REDIS_URL": "localhost",
                  "REDIS_PASSWORD": "hathor",
                  "SERVICE_NAME": "hathor-wallet-service",
                  "STAGE": "dev",
                  "EXPLORER_SERVICE_STAGE": "dev",
                  "NFT_AUTO_REVIEW_ENABLED": "false",
                  "VOIDED_TX_OFFSET": "5",
                  "DEFAULT_SERVER": "https://node1.mainnet.hathor.network/v1a/",
                  "WS_DOMAIN": "ws.wallet-service.hathor.network",
                  "TX_HISTORY_MAX_COUNT": "10",
                  "WALLET_SERVICE_LAMBDA_ENDPOINT": "",
                  "PUSH_NOTIFICATION_ENABLED": "false",
                  "PUSH_ALLOWED_PROVIDERS": "",
                  "FIREBASE_PROJECT_ID": "",
                  "FIREBASE_PRIVATE_KEY_ID": "",
                  "FIREBASE_PRIVATE_KEY": "",
                  "FIREBASE_CLIENT_EMAIL": "",
                  "FIREBASE_CLIENT_ID": "",
                  "FIREBASE_AUTH_URI": "",
                  "FIREBASE_TOKEN_URI": "",
                  "FIREBASE_AUTH_PROVIDER_X509_CERT_URL": "",
                  "FIREBASE_CLIENT_X509_CERT_URL": "",
                  "LOG_LEVEL": "debug",
                  "ALERT_MANAGER_REGION": "us-east-1",
                  "ALERT_MANAGER_TOPIC": "teta"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "MetricsLogGroup"
            ]
          },
          "PushRegisterLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/hathor-wallet-service/dev/1696424677965-2023-10-04T13:04:37.965Z/hathor-wallet-service.zip"
              },
              "Handler": "src/api/pushRegister.register",
              "Runtime": "nodejs18.x",
              "FunctionName": "hathor-wallet-service-dev-pushRegister",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ACCOUNT_ID": "1234",
                  "AUTH_SECRET": "A05qT6meWzwBGnprXOEHT4k31rzL5fMn",
                  "AWS_VPC_DEFAULT_SG_ID": "123",
                  "AWS_SUBNET_ID_1": "123",
                  "AWS_SUBNET_ID_2": "123",
                  "AWS_SUBNET_ID_3": "123",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "APPLICATION_NAME": "hathor-wallet-service",
                  "BLOCK_REWARD_LOCK": "300",
                  "CONFIRM_FIRST_ADDRESS": "true",
                  "DB_ENDPOINT": "localhost",
                  "DB_PORT": "5432",
                  "DB_NAME": "hathor_tetinha2",
                  "DB_USER": "root",
                  "DB_PASS": "hathor",
                  "MAX_ADDRESS_GAP": "10",
                  "NETWORK": "mainnet",
                  "NEW_TX_SQS": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"NEW_TX_SQS\"]"
                  },
                  "REDIS_URL": "localhost",
                  "REDIS_PASSWORD": "hathor",
                  "SERVICE_NAME": "hathor-wallet-service",
                  "STAGE": "dev",
                  "EXPLORER_SERVICE_STAGE": "dev",
                  "NFT_AUTO_REVIEW_ENABLED": "false",
                  "VOIDED_TX_OFFSET": "5",
                  "DEFAULT_SERVER": "https://node1.mainnet.hathor.network/v1a/",
                  "WS_DOMAIN": "ws.wallet-service.hathor.network",
                  "TX_HISTORY_MAX_COUNT": "10",
                  "WALLET_SERVICE_LAMBDA_ENDPOINT": "",
                  "PUSH_NOTIFICATION_ENABLED": "false",
                  "PUSH_ALLOWED_PROVIDERS": "",
                  "FIREBASE_PROJECT_ID": "",
                  "FIREBASE_PRIVATE_KEY_ID": "",
                  "FIREBASE_PRIVATE_KEY": "",
                  "FIREBASE_CLIENT_EMAIL": "",
                  "FIREBASE_CLIENT_ID": "",
                  "FIREBASE_AUTH_URI": "",
                  "FIREBASE_TOKEN_URI": "",
                  "FIREBASE_AUTH_PROVIDER_X509_CERT_URL": "",
                  "FIREBASE_CLIENT_X509_CERT_URL": "",
                  "LOG_LEVEL": "debug",
                  "ALERT_MANAGER_REGION": "us-east-1",
                  "ALERT_MANAGER_TOPIC": "teta"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "PushRegisterLogGroup"
            ]
          },
          "PushUpdateLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/hathor-wallet-service/dev/1696424677965-2023-10-04T13:04:37.965Z/hathor-wallet-service.zip"
              },
              "Handler": "src/api/pushUpdate.update",
              "Runtime": "nodejs18.x",
              "FunctionName": "hathor-wallet-service-dev-pushUpdate",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ACCOUNT_ID": "1234",
                  "AUTH_SECRET": "A05qT6meWzwBGnprXOEHT4k31rzL5fMn",
                  "AWS_VPC_DEFAULT_SG_ID": "123",
                  "AWS_SUBNET_ID_1": "123",
                  "AWS_SUBNET_ID_2": "123",
                  "AWS_SUBNET_ID_3": "123",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "APPLICATION_NAME": "hathor-wallet-service",
                  "BLOCK_REWARD_LOCK": "300",
                  "CONFIRM_FIRST_ADDRESS": "true",
                  "DB_ENDPOINT": "localhost",
                  "DB_PORT": "5432",
                  "DB_NAME": "hathor_tetinha2",
                  "DB_USER": "root",
                  "DB_PASS": "hathor",
                  "MAX_ADDRESS_GAP": "10",
                  "NETWORK": "mainnet",
                  "NEW_TX_SQS": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"NEW_TX_SQS\"]"
                  },
                  "REDIS_URL": "localhost",
                  "REDIS_PASSWORD": "hathor",
                  "SERVICE_NAME": "hathor-wallet-service",
                  "STAGE": "dev",
                  "EXPLORER_SERVICE_STAGE": "dev",
                  "NFT_AUTO_REVIEW_ENABLED": "false",
                  "VOIDED_TX_OFFSET": "5",
                  "DEFAULT_SERVER": "https://node1.mainnet.hathor.network/v1a/",
                  "WS_DOMAIN": "ws.wallet-service.hathor.network",
                  "TX_HISTORY_MAX_COUNT": "10",
                  "WALLET_SERVICE_LAMBDA_ENDPOINT": "",
                  "PUSH_NOTIFICATION_ENABLED": "false",
                  "PUSH_ALLOWED_PROVIDERS": "",
                  "FIREBASE_PROJECT_ID": "",
                  "FIREBASE_PRIVATE_KEY_ID": "",
                  "FIREBASE_PRIVATE_KEY": "",
                  "FIREBASE_CLIENT_EMAIL": "",
                  "FIREBASE_CLIENT_ID": "",
                  "FIREBASE_AUTH_URI": "",
                  "FIREBASE_TOKEN_URI": "",
                  "FIREBASE_AUTH_PROVIDER_X509_CERT_URL": "",
                  "FIREBASE_CLIENT_X509_CERT_URL": "",
                  "LOG_LEVEL": "debug",
                  "ALERT_MANAGER_REGION": "us-east-1",
                  "ALERT_MANAGER_TOPIC": "teta"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "PushUpdateLogGroup"
            ]
          },
          "PushUnregisterLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/hathor-wallet-service/dev/1696424677965-2023-10-04T13:04:37.965Z/hathor-wallet-service.zip"
              },
              "Handler": "src/api/pushUnregister.unregister",
              "Runtime": "nodejs18.x",
              "FunctionName": "hathor-wallet-service-dev-pushUnregister",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ACCOUNT_ID": "1234",
                  "AUTH_SECRET": "A05qT6meWzwBGnprXOEHT4k31rzL5fMn",
                  "AWS_VPC_DEFAULT_SG_ID": "123",
                  "AWS_SUBNET_ID_1": "123",
                  "AWS_SUBNET_ID_2": "123",
                  "AWS_SUBNET_ID_3": "123",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "APPLICATION_NAME": "hathor-wallet-service",
                  "BLOCK_REWARD_LOCK": "300",
                  "CONFIRM_FIRST_ADDRESS": "true",
                  "DB_ENDPOINT": "localhost",
                  "DB_PORT": "5432",
                  "DB_NAME": "hathor_tetinha2",
                  "DB_USER": "root",
                  "DB_PASS": "hathor",
                  "MAX_ADDRESS_GAP": "10",
                  "NETWORK": "mainnet",
                  "NEW_TX_SQS": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"NEW_TX_SQS\"]"
                  },
                  "REDIS_URL": "localhost",
                  "REDIS_PASSWORD": "hathor",
                  "SERVICE_NAME": "hathor-wallet-service",
                  "STAGE": "dev",
                  "EXPLORER_SERVICE_STAGE": "dev",
                  "NFT_AUTO_REVIEW_ENABLED": "false",
                  "VOIDED_TX_OFFSET": "5",
                  "DEFAULT_SERVER": "https://node1.mainnet.hathor.network/v1a/",
                  "WS_DOMAIN": "ws.wallet-service.hathor.network",
                  "TX_HISTORY_MAX_COUNT": "10",
                  "WALLET_SERVICE_LAMBDA_ENDPOINT": "",
                  "PUSH_NOTIFICATION_ENABLED": "false",
                  "PUSH_ALLOWED_PROVIDERS": "",
                  "FIREBASE_PROJECT_ID": "",
                  "FIREBASE_PRIVATE_KEY_ID": "",
                  "FIREBASE_PRIVATE_KEY": "",
                  "FIREBASE_CLIENT_EMAIL": "",
                  "FIREBASE_CLIENT_ID": "",
                  "FIREBASE_AUTH_URI": "",
                  "FIREBASE_TOKEN_URI": "",
                  "FIREBASE_AUTH_PROVIDER_X509_CERT_URL": "",
                  "FIREBASE_CLIENT_X509_CERT_URL": "",
                  "LOG_LEVEL": "debug",
                  "ALERT_MANAGER_REGION": "us-east-1",
                  "ALERT_MANAGER_TOPIC": "teta"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "PushUnregisterLogGroup"
            ]
          },
          "GetTxByIdLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/hathor-wallet-service/dev/1696424677965-2023-10-04T13:04:37.965Z/hathor-wallet-service.zip"
              },
              "Handler": "src/api/txById.get",
              "Runtime": "nodejs18.x",
              "FunctionName": "hathor-wallet-service-dev-getTxById",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ACCOUNT_ID": "1234",
                  "AUTH_SECRET": "A05qT6meWzwBGnprXOEHT4k31rzL5fMn",
                  "AWS_VPC_DEFAULT_SG_ID": "123",
                  "AWS_SUBNET_ID_1": "123",
                  "AWS_SUBNET_ID_2": "123",
                  "AWS_SUBNET_ID_3": "123",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "APPLICATION_NAME": "hathor-wallet-service",
                  "BLOCK_REWARD_LOCK": "300",
                  "CONFIRM_FIRST_ADDRESS": "true",
                  "DB_ENDPOINT": "localhost",
                  "DB_PORT": "5432",
                  "DB_NAME": "hathor_tetinha2",
                  "DB_USER": "root",
                  "DB_PASS": "hathor",
                  "MAX_ADDRESS_GAP": "10",
                  "NETWORK": "mainnet",
                  "NEW_TX_SQS": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"NEW_TX_SQS\"]"
                  },
                  "REDIS_URL": "localhost",
                  "REDIS_PASSWORD": "hathor",
                  "SERVICE_NAME": "hathor-wallet-service",
                  "STAGE": "dev",
                  "EXPLORER_SERVICE_STAGE": "dev",
                  "NFT_AUTO_REVIEW_ENABLED": "false",
                  "VOIDED_TX_OFFSET": "5",
                  "DEFAULT_SERVER": "https://node1.mainnet.hathor.network/v1a/",
                  "WS_DOMAIN": "ws.wallet-service.hathor.network",
                  "TX_HISTORY_MAX_COUNT": "10",
                  "WALLET_SERVICE_LAMBDA_ENDPOINT": "",
                  "PUSH_NOTIFICATION_ENABLED": "false",
                  "PUSH_ALLOWED_PROVIDERS": "",
                  "FIREBASE_PROJECT_ID": "",
                  "FIREBASE_PRIVATE_KEY_ID": "",
                  "FIREBASE_PRIVATE_KEY": "",
                  "FIREBASE_CLIENT_EMAIL": "",
                  "FIREBASE_CLIENT_ID": "",
                  "FIREBASE_AUTH_URI": "",
                  "FIREBASE_TOKEN_URI": "",
                  "FIREBASE_AUTH_PROVIDER_X509_CERT_URL": "",
                  "FIREBASE_CLIENT_X509_CERT_URL": "",
                  "LOG_LEVEL": "debug",
                  "ALERT_MANAGER_REGION": "us-east-1",
                  "ALERT_MANAGER_TOPIC": "teta"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "GetTxByIdLogGroup"
            ]
          },
          "ProxiedGetTxByIdLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/hathor-wallet-service/dev/1696424677965-2023-10-04T13:04:37.965Z/hathor-wallet-service.zip"
              },
              "Handler": "src/api/fullnodeProxy.getTransactionById",
              "Runtime": "nodejs18.x",
              "FunctionName": "hathor-wallet-service-dev-proxiedGetTxById",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ACCOUNT_ID": "1234",
                  "AUTH_SECRET": "A05qT6meWzwBGnprXOEHT4k31rzL5fMn",
                  "AWS_VPC_DEFAULT_SG_ID": "123",
                  "AWS_SUBNET_ID_1": "123",
                  "AWS_SUBNET_ID_2": "123",
                  "AWS_SUBNET_ID_3": "123",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "APPLICATION_NAME": "hathor-wallet-service",
                  "BLOCK_REWARD_LOCK": "300",
                  "CONFIRM_FIRST_ADDRESS": "true",
                  "DB_ENDPOINT": "localhost",
                  "DB_PORT": "5432",
                  "DB_NAME": "hathor_tetinha2",
                  "DB_USER": "root",
                  "DB_PASS": "hathor",
                  "MAX_ADDRESS_GAP": "10",
                  "NETWORK": "mainnet",
                  "NEW_TX_SQS": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"NEW_TX_SQS\"]"
                  },
                  "REDIS_URL": "localhost",
                  "REDIS_PASSWORD": "hathor",
                  "SERVICE_NAME": "hathor-wallet-service",
                  "STAGE": "dev",
                  "EXPLORER_SERVICE_STAGE": "dev",
                  "NFT_AUTO_REVIEW_ENABLED": "false",
                  "VOIDED_TX_OFFSET": "5",
                  "DEFAULT_SERVER": "https://node1.mainnet.hathor.network/v1a/",
                  "WS_DOMAIN": "ws.wallet-service.hathor.network",
                  "TX_HISTORY_MAX_COUNT": "10",
                  "WALLET_SERVICE_LAMBDA_ENDPOINT": "",
                  "PUSH_NOTIFICATION_ENABLED": "false",
                  "PUSH_ALLOWED_PROVIDERS": "",
                  "FIREBASE_PROJECT_ID": "",
                  "FIREBASE_PRIVATE_KEY_ID": "",
                  "FIREBASE_PRIVATE_KEY": "",
                  "FIREBASE_CLIENT_EMAIL": "",
                  "FIREBASE_CLIENT_ID": "",
                  "FIREBASE_AUTH_URI": "",
                  "FIREBASE_TOKEN_URI": "",
                  "FIREBASE_AUTH_PROVIDER_X509_CERT_URL": "",
                  "FIREBASE_CLIENT_X509_CERT_URL": "",
                  "LOG_LEVEL": "debug",
                  "ALERT_MANAGER_REGION": "us-east-1",
                  "ALERT_MANAGER_TOPIC": "teta"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "ProxiedGetTxByIdLogGroup"
            ]
          },
          "ProxiedGetConfirmationDataLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/hathor-wallet-service/dev/1696424677965-2023-10-04T13:04:37.965Z/hathor-wallet-service.zip"
              },
              "Handler": "src/api/fullnodeProxy.getConfirmationData",
              "Runtime": "nodejs18.x",
              "FunctionName": "hathor-wallet-service-dev-proxiedGetConfirmationData",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ACCOUNT_ID": "1234",
                  "AUTH_SECRET": "A05qT6meWzwBGnprXOEHT4k31rzL5fMn",
                  "AWS_VPC_DEFAULT_SG_ID": "123",
                  "AWS_SUBNET_ID_1": "123",
                  "AWS_SUBNET_ID_2": "123",
                  "AWS_SUBNET_ID_3": "123",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "APPLICATION_NAME": "hathor-wallet-service",
                  "BLOCK_REWARD_LOCK": "300",
                  "CONFIRM_FIRST_ADDRESS": "true",
                  "DB_ENDPOINT": "localhost",
                  "DB_PORT": "5432",
                  "DB_NAME": "hathor_tetinha2",
                  "DB_USER": "root",
                  "DB_PASS": "hathor",
                  "MAX_ADDRESS_GAP": "10",
                  "NETWORK": "mainnet",
                  "NEW_TX_SQS": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"NEW_TX_SQS\"]"
                  },
                  "REDIS_URL": "localhost",
                  "REDIS_PASSWORD": "hathor",
                  "SERVICE_NAME": "hathor-wallet-service",
                  "STAGE": "dev",
                  "EXPLORER_SERVICE_STAGE": "dev",
                  "NFT_AUTO_REVIEW_ENABLED": "false",
                  "VOIDED_TX_OFFSET": "5",
                  "DEFAULT_SERVER": "https://node1.mainnet.hathor.network/v1a/",
                  "WS_DOMAIN": "ws.wallet-service.hathor.network",
                  "TX_HISTORY_MAX_COUNT": "10",
                  "WALLET_SERVICE_LAMBDA_ENDPOINT": "",
                  "PUSH_NOTIFICATION_ENABLED": "false",
                  "PUSH_ALLOWED_PROVIDERS": "",
                  "FIREBASE_PROJECT_ID": "",
                  "FIREBASE_PRIVATE_KEY_ID": "",
                  "FIREBASE_PRIVATE_KEY": "",
                  "FIREBASE_CLIENT_EMAIL": "",
                  "FIREBASE_CLIENT_ID": "",
                  "FIREBASE_AUTH_URI": "",
                  "FIREBASE_TOKEN_URI": "",
                  "FIREBASE_AUTH_PROVIDER_X509_CERT_URL": "",
                  "FIREBASE_CLIENT_X509_CERT_URL": "",
                  "LOG_LEVEL": "debug",
                  "ALERT_MANAGER_REGION": "us-east-1",
                  "ALERT_MANAGER_TOPIC": "teta"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "ProxiedGetConfirmationDataLogGroup"
            ]
          },
          "ProxiedGraphvizNeighborsQueryLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/hathor-wallet-service/dev/1696424677965-2023-10-04T13:04:37.965Z/hathor-wallet-service.zip"
              },
              "Handler": "src/api/fullnodeProxy.queryGraphvizNeighbours",
              "Runtime": "nodejs18.x",
              "FunctionName": "hathor-wallet-service-dev-proxiedGraphvizNeighborsQuery",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ACCOUNT_ID": "1234",
                  "AUTH_SECRET": "A05qT6meWzwBGnprXOEHT4k31rzL5fMn",
                  "AWS_VPC_DEFAULT_SG_ID": "123",
                  "AWS_SUBNET_ID_1": "123",
                  "AWS_SUBNET_ID_2": "123",
                  "AWS_SUBNET_ID_3": "123",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "APPLICATION_NAME": "hathor-wallet-service",
                  "BLOCK_REWARD_LOCK": "300",
                  "CONFIRM_FIRST_ADDRESS": "true",
                  "DB_ENDPOINT": "localhost",
                  "DB_PORT": "5432",
                  "DB_NAME": "hathor_tetinha2",
                  "DB_USER": "root",
                  "DB_PASS": "hathor",
                  "MAX_ADDRESS_GAP": "10",
                  "NETWORK": "mainnet",
                  "NEW_TX_SQS": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"NEW_TX_SQS\"]"
                  },
                  "REDIS_URL": "localhost",
                  "REDIS_PASSWORD": "hathor",
                  "SERVICE_NAME": "hathor-wallet-service",
                  "STAGE": "dev",
                  "EXPLORER_SERVICE_STAGE": "dev",
                  "NFT_AUTO_REVIEW_ENABLED": "false",
                  "VOIDED_TX_OFFSET": "5",
                  "DEFAULT_SERVER": "https://node1.mainnet.hathor.network/v1a/",
                  "WS_DOMAIN": "ws.wallet-service.hathor.network",
                  "TX_HISTORY_MAX_COUNT": "10",
                  "WALLET_SERVICE_LAMBDA_ENDPOINT": "",
                  "PUSH_NOTIFICATION_ENABLED": "false",
                  "PUSH_ALLOWED_PROVIDERS": "",
                  "FIREBASE_PROJECT_ID": "",
                  "FIREBASE_PRIVATE_KEY_ID": "",
                  "FIREBASE_PRIVATE_KEY": "",
                  "FIREBASE_CLIENT_EMAIL": "",
                  "FIREBASE_CLIENT_ID": "",
                  "FIREBASE_AUTH_URI": "",
                  "FIREBASE_TOKEN_URI": "",
                  "FIREBASE_AUTH_PROVIDER_X509_CERT_URL": "",
                  "FIREBASE_CLIENT_X509_CERT_URL": "",
                  "LOG_LEVEL": "debug",
                  "ALERT_MANAGER_REGION": "us-east-1",
                  "ALERT_MANAGER_TOPIC": "teta"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "ProxiedGraphvizNeighborsQueryLogGroup"
            ]
          },
          "SendNotificationToDeviceLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/hathor-wallet-service/dev/1696424677965-2023-10-04T13:04:37.965Z/hathor-wallet-service.zip"
              },
              "Handler": "src/api/pushSendNotificationToDevice.send",
              "Runtime": "nodejs18.x",
              "FunctionName": "hathor-wallet-service-dev-sendNotificationToDevice",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ACCOUNT_ID": "1234",
                  "AUTH_SECRET": "A05qT6meWzwBGnprXOEHT4k31rzL5fMn",
                  "AWS_VPC_DEFAULT_SG_ID": "123",
                  "AWS_SUBNET_ID_1": "123",
                  "AWS_SUBNET_ID_2": "123",
                  "AWS_SUBNET_ID_3": "123",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "APPLICATION_NAME": "hathor-wallet-service",
                  "BLOCK_REWARD_LOCK": "300",
                  "CONFIRM_FIRST_ADDRESS": "true",
                  "DB_ENDPOINT": "localhost",
                  "DB_PORT": "5432",
                  "DB_NAME": "hathor_tetinha2",
                  "DB_USER": "root",
                  "DB_PASS": "hathor",
                  "MAX_ADDRESS_GAP": "10",
                  "NETWORK": "mainnet",
                  "NEW_TX_SQS": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"NEW_TX_SQS\"]"
                  },
                  "REDIS_URL": "localhost",
                  "REDIS_PASSWORD": "hathor",
                  "SERVICE_NAME": "hathor-wallet-service",
                  "STAGE": "dev",
                  "EXPLORER_SERVICE_STAGE": "dev",
                  "NFT_AUTO_REVIEW_ENABLED": "false",
                  "VOIDED_TX_OFFSET": "5",
                  "DEFAULT_SERVER": "https://node1.mainnet.hathor.network/v1a/",
                  "WS_DOMAIN": "ws.wallet-service.hathor.network",
                  "TX_HISTORY_MAX_COUNT": "10",
                  "WALLET_SERVICE_LAMBDA_ENDPOINT": "",
                  "PUSH_NOTIFICATION_ENABLED": "false",
                  "PUSH_ALLOWED_PROVIDERS": "",
                  "FIREBASE_PROJECT_ID": "",
                  "FIREBASE_PRIVATE_KEY_ID": "",
                  "FIREBASE_PRIVATE_KEY": "",
                  "FIREBASE_CLIENT_EMAIL": "",
                  "FIREBASE_CLIENT_ID": "",
                  "FIREBASE_AUTH_URI": "",
                  "FIREBASE_TOKEN_URI": "",
                  "FIREBASE_AUTH_PROVIDER_X509_CERT_URL": "",
                  "FIREBASE_CLIENT_X509_CERT_URL": "",
                  "LOG_LEVEL": "debug",
                  "ALERT_MANAGER_REGION": "us-east-1",
                  "ALERT_MANAGER_TOPIC": "teta"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "SendNotificationToDeviceLogGroup"
            ]
          },
          "TxPushRequestedLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/hathor-wallet-service/dev/1696424677965-2023-10-04T13:04:37.965Z/hathor-wallet-service.zip"
              },
              "Handler": "src/api/txPushNotificationRequested.handleRequest",
              "Runtime": "nodejs18.x",
              "FunctionName": "hathor-wallet-service-dev-txPushRequested",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ACCOUNT_ID": "1234",
                  "AUTH_SECRET": "A05qT6meWzwBGnprXOEHT4k31rzL5fMn",
                  "AWS_VPC_DEFAULT_SG_ID": "123",
                  "AWS_SUBNET_ID_1": "123",
                  "AWS_SUBNET_ID_2": "123",
                  "AWS_SUBNET_ID_3": "123",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "APPLICATION_NAME": "hathor-wallet-service",
                  "BLOCK_REWARD_LOCK": "300",
                  "CONFIRM_FIRST_ADDRESS": "true",
                  "DB_ENDPOINT": "localhost",
                  "DB_PORT": "5432",
                  "DB_NAME": "hathor_tetinha2",
                  "DB_USER": "root",
                  "DB_PASS": "hathor",
                  "MAX_ADDRESS_GAP": "10",
                  "NETWORK": "mainnet",
                  "NEW_TX_SQS": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"NEW_TX_SQS\"]"
                  },
                  "REDIS_URL": "localhost",
                  "REDIS_PASSWORD": "hathor",
                  "SERVICE_NAME": "hathor-wallet-service",
                  "STAGE": "dev",
                  "EXPLORER_SERVICE_STAGE": "dev",
                  "NFT_AUTO_REVIEW_ENABLED": "false",
                  "VOIDED_TX_OFFSET": "5",
                  "DEFAULT_SERVER": "https://node1.mainnet.hathor.network/v1a/",
                  "WS_DOMAIN": "ws.wallet-service.hathor.network",
                  "TX_HISTORY_MAX_COUNT": "10",
                  "WALLET_SERVICE_LAMBDA_ENDPOINT": "",
                  "PUSH_NOTIFICATION_ENABLED": "false",
                  "PUSH_ALLOWED_PROVIDERS": "",
                  "FIREBASE_PROJECT_ID": "",
                  "FIREBASE_PRIVATE_KEY_ID": "",
                  "FIREBASE_PRIVATE_KEY": "",
                  "FIREBASE_CLIENT_EMAIL": "",
                  "FIREBASE_CLIENT_ID": "",
                  "FIREBASE_AUTH_URI": "",
                  "FIREBASE_TOKEN_URI": "",
                  "FIREBASE_AUTH_PROVIDER_X509_CERT_URL": "",
                  "FIREBASE_CLIENT_X509_CERT_URL": "",
                  "LOG_LEVEL": "debug",
                  "ALERT_MANAGER_REGION": "us-east-1",
                  "ALERT_MANAGER_TOPIC": "teta"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "TxPushRequestedIamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "TxPushRequestedIamRoleLambdaExecution",
              "TxPushRequestedLogGroup"
            ]
          },
          "DeleteStalePushDevicesLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/hathor-wallet-service/dev/1696424677965-2023-10-04T13:04:37.965Z/hathor-wallet-service.zip"
              },
              "Handler": "src/db/cronRoutines.cleanStalePushDevices",
              "Runtime": "nodejs18.x",
              "FunctionName": "hathor-wallet-service-dev-deleteStalePushDevices",
              "MemorySize": 256,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "ACCOUNT_ID": "1234",
                  "AUTH_SECRET": "A05qT6meWzwBGnprXOEHT4k31rzL5fMn",
                  "AWS_VPC_DEFAULT_SG_ID": "123",
                  "AWS_SUBNET_ID_1": "123",
                  "AWS_SUBNET_ID_2": "123",
                  "AWS_SUBNET_ID_3": "123",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "APPLICATION_NAME": "hathor-wallet-service",
                  "BLOCK_REWARD_LOCK": "300",
                  "CONFIRM_FIRST_ADDRESS": "true",
                  "DB_ENDPOINT": "localhost",
                  "DB_PORT": "5432",
                  "DB_NAME": "hathor_tetinha2",
                  "DB_USER": "root",
                  "DB_PASS": "hathor",
                  "MAX_ADDRESS_GAP": "10",
                  "NETWORK": "mainnet",
                  "NEW_TX_SQS": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"NEW_TX_SQS\"]"
                  },
                  "REDIS_URL": "localhost",
                  "REDIS_PASSWORD": "hathor",
                  "SERVICE_NAME": "hathor-wallet-service",
                  "STAGE": "dev",
                  "EXPLORER_SERVICE_STAGE": "dev",
                  "NFT_AUTO_REVIEW_ENABLED": "false",
                  "VOIDED_TX_OFFSET": "5",
                  "DEFAULT_SERVER": "https://node1.mainnet.hathor.network/v1a/",
                  "WS_DOMAIN": "ws.wallet-service.hathor.network",
                  "TX_HISTORY_MAX_COUNT": "10",
                  "WALLET_SERVICE_LAMBDA_ENDPOINT": "",
                  "PUSH_NOTIFICATION_ENABLED": "false",
                  "PUSH_ALLOWED_PROVIDERS": "",
                  "FIREBASE_PROJECT_ID": "",
                  "FIREBASE_PRIVATE_KEY_ID": "",
                  "FIREBASE_PRIVATE_KEY": "",
                  "FIREBASE_CLIENT_EMAIL": "",
                  "FIREBASE_CLIENT_ID": "",
                  "FIREBASE_AUTH_URI": "",
                  "FIREBASE_TOKEN_URI": "",
                  "FIREBASE_AUTH_PROVIDER_X509_CERT_URL": "",
                  "FIREBASE_CLIENT_X509_CERT_URL": "",
                  "LOG_LEVEL": "debug",
                  "ALERT_MANAGER_REGION": "us-east-1",
                  "ALERT_MANAGER_TOPIC": "teta"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "DeleteStalePushDevicesLogGroup"
            ]
          },
          "CleanUnsentTxProposalsUtxosLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/hathor-wallet-service/dev/1696424677965-2023-10-04T13:04:37.965Z/hathor-wallet-service.zip"
              },
              "Handler": "src/db/cronRoutines.cleanUnsentTxProposalsUtxos",
              "Runtime": "nodejs18.x",
              "FunctionName": "hathor-wallet-service-dev-cleanUnsentTxProposalsUtxos",
              "MemorySize": 256,
              "Timeout": 60,
              "Environment": {
                "Variables": {
                  "ACCOUNT_ID": "1234",
                  "AUTH_SECRET": "A05qT6meWzwBGnprXOEHT4k31rzL5fMn",
                  "AWS_VPC_DEFAULT_SG_ID": "123",
                  "AWS_SUBNET_ID_1": "123",
                  "AWS_SUBNET_ID_2": "123",
                  "AWS_SUBNET_ID_3": "123",
                  "AWS_NODEJS_CONNECTION_REUSE_ENABLED": "1",
                  "APPLICATION_NAME": "hathor-wallet-service",
                  "BLOCK_REWARD_LOCK": "300",
                  "CONFIRM_FIRST_ADDRESS": "true",
                  "DB_ENDPOINT": "localhost",
                  "DB_PORT": "5432",
                  "DB_NAME": "hathor_tetinha2",
                  "DB_USER": "root",
                  "DB_PASS": "hathor",
                  "MAX_ADDRESS_GAP": "10",
                  "NETWORK": "mainnet",
                  "NEW_TX_SQS": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"NEW_TX_SQS\"]"
                  },
                  "REDIS_URL": "localhost",
                  "REDIS_PASSWORD": "hathor",
                  "SERVICE_NAME": "hathor-wallet-service",
                  "STAGE": "dev",
                  "EXPLORER_SERVICE_STAGE": "dev",
                  "NFT_AUTO_REVIEW_ENABLED": "false",
                  "VOIDED_TX_OFFSET": "5",
                  "DEFAULT_SERVER": "https://node1.mainnet.hathor.network/v1a/",
                  "WS_DOMAIN": "ws.wallet-service.hathor.network",
                  "TX_HISTORY_MAX_COUNT": "10",
                  "WALLET_SERVICE_LAMBDA_ENDPOINT": "",
                  "PUSH_NOTIFICATION_ENABLED": "false",
                  "PUSH_ALLOWED_PROVIDERS": "",
                  "FIREBASE_PROJECT_ID": "",
                  "FIREBASE_PRIVATE_KEY_ID": "",
                  "FIREBASE_PRIVATE_KEY": "",
                  "FIREBASE_CLIENT_EMAIL": "",
                  "FIREBASE_CLIENT_ID": "",
                  "FIREBASE_AUTH_URI": "",
                  "FIREBASE_TOKEN_URI": "",
                  "FIREBASE_AUTH_PROVIDER_X509_CERT_URL": "",
                  "FIREBASE_CLIENT_X509_CERT_URL": "",
                  "LOG_LEVEL": "debug",
                  "ALERT_MANAGER_REGION": "us-east-1",
                  "ALERT_MANAGER_TOPIC": "teta"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              }
            },
            "DependsOn": [
              "CleanUnsentTxProposalsUtxosLogGroup"
            ]
          },
          "WarmUpPluginWalletWarmerLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/hathor-wallet-service/dev/1696424677965-2023-10-04T13:04:37.965Z/warmUpPluginWalletWarmer.zip"
              },
              "Handler": ".warmup/walletWarmer/index.warmUp",
              "Runtime": "nodejs18.x",
              "FunctionName": "hathor-wallet-service-dev-warmup-plugin-walletWarmer",
              "MemorySize": 128,
              "Timeout": 10,
              "Description": "Serverless WarmUp Plugin (warmer \"walletWarmer\")",
              "Environment": {
                "Variables": {}
              },
              "Role": {
                "Fn::GetAtt": [
                  "WarmUpPluginWalletWarmerRole",
                  "Arn"
                ]
              },
              "VpcConfig": {
                "SecurityGroupIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"securityGroupIds\"]"
                },
                "SubnetIds": {
                  "$ref": "$[\"service\"][\"provider\"][\"vpc\"][\"subnetIds\"]"
                }
              },
              "Layers": []
            },
            "DependsOn": [
              "WarmUpPluginWalletWarmerLogGroup",
              "WarmUpPluginWalletWarmerRole"
            ]
          },
          "WarmUpPluginWalletWarmerLambdaVersionrVA2ERLQzEqPZx6IBV0wkyZXIDESN5Fdl0xY1XtG3s": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "WarmUpPluginWalletWarmerLambdaFunction"
              },
              "CodeSha256": "zQromZLhsLqYOdRmgKKQdVZItm4HhR3kP2D/1XUv+/U=",
              "Description": "Serverless WarmUp Plugin (warmer \"walletWarmer\")"
            }
          },
          "OnHandleOldVoidedTxsLambdaVersion79oGSDrMFFQvVHy4QOdkiWW99J12ZvYUJaiVHl4ZvZo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "OnHandleOldVoidedTxsLambdaFunction"
              },
              "CodeSha256": "TuEli0EL+6gMKQKZp91cCh//g9sHPCqixdIzAI0hW1s="
            }
          },
          "GetLatestBlockLambdaVersionMj6ig9ekRUX7dzJ5fhBCh1nS1vjGNiXPkNVjC2DA4I": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetLatestBlockLambdaFunction"
              },
              "CodeSha256": "TuEli0EL+6gMKQKZp91cCh//g9sHPCqixdIzAI0hW1s="
            }
          },
          "OnNewTxRequestLambdaVersionXuFC8DmhRkE0X5odUfmcTwGEHXtWVuferSK09AAkE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "OnNewTxRequestLambdaFunction"
              },
              "CodeSha256": "TuEli0EL+6gMKQKZp91cCh//g9sHPCqixdIzAI0hW1s="
            }
          },
          "OnMinersListRequestLambdaVersionBsOap0AqSNboJLJrFLsxUW6KX3bcsVby4O0wbM8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "OnMinersListRequestLambdaFunction"
              },
              "CodeSha256": "TuEli0EL+6gMKQKZp91cCh//g9sHPCqixdIzAI0hW1s="
            }
          },
          "OnTotalSupplyRequestLambdaVersionPtsFBYOHNrJ4eYYlP6aYeuNqgDdlIPAJBrXpcutc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "OnTotalSupplyRequestLambdaFunction"
              },
              "CodeSha256": "TuEli0EL+6gMKQKZp91cCh//g9sHPCqixdIzAI0hW1s="
            }
          },
          "OnHandleReorgRequestLambdaVersionJrkwlYtu6Y62NI0kJnEwwxv8IG625MnFblJ4IheFis0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "OnHandleReorgRequestLambdaFunction"
              },
              "CodeSha256": "TuEli0EL+6gMKQKZp91cCh//g9sHPCqixdIzAI0hW1s="
            }
          },
          "OnNewTxEventLambdaVersioncSyCzfLH3sBeZMve96tju3eO05MEun53q5T03kF2EE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "OnNewTxEventLambdaFunction"
              },
              "CodeSha256": "TuEli0EL+6gMKQKZp91cCh//g9sHPCqixdIzAI0hW1s="
            }
          },
          "OnNewNftEventLambdaVersionlBgOx0fdmN3y8hYXwd4l1T8aH7dLZAAevxymStgL4hE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "OnNewNftEventLambdaFunction"
              },
              "CodeSha256": "TuEli0EL+6gMKQKZp91cCh//g9sHPCqixdIzAI0hW1s="
            }
          },
          "LoadWalletAsyncLambdaVersionOqsRRC5hNavynN6dh0gxkzikm6N0nCnmAWTfOuXr64": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "LoadWalletAsyncLambdaFunction"
              },
              "CodeSha256": "TuEli0EL+6gMKQKZp91cCh//g9sHPCqixdIzAI0hW1s="
            }
          },
          "LoadWalletApiLambdaVersion7KtFL6itBBL1Pl5KftoZyzxKBTFkyWzGFh4vVNm48": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "LoadWalletApiLambdaFunction"
              },
              "CodeSha256": "TuEli0EL+6gMKQKZp91cCh//g9sHPCqixdIzAI0hW1s="
            }
          },
          "ChangeWalletAuthXpubApiLambdaVersiongpkgqrPjEbWA3YE4oHK80mZsSYxsoaVIGt3TSYIxWGE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ChangeWalletAuthXpubApiLambdaFunction"
              },
              "CodeSha256": "TuEli0EL+6gMKQKZp91cCh//g9sHPCqixdIzAI0hW1s="
            }
          },
          "GetWalletStatusApiLambdaVersion5xUVtXvLy5LzSEgVfibPjapd5TdX1NA1sqztoJXw6Cs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetWalletStatusApiLambdaFunction"
              },
              "CodeSha256": "TuEli0EL+6gMKQKZp91cCh//g9sHPCqixdIzAI0hW1s="
            }
          },
          "CheckAddressMineApiLambdaVersionOoi0qByQpyKkusBpXnCiZIp2OE8Vo6vsz8WF1PrxUA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CheckAddressMineApiLambdaFunction"
              },
              "CodeSha256": "TuEli0EL+6gMKQKZp91cCh//g9sHPCqixdIzAI0hW1s="
            }
          },
          "GetAddressesApiLambdaVersionyUA3EUzIZxKaLOurCy30iQVXOryDTbbmKRuNY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetAddressesApiLambdaFunction"
              },
              "CodeSha256": "TuEli0EL+6gMKQKZp91cCh//g9sHPCqixdIzAI0hW1s="
            }
          },
          "GetNewAddressesLambdaVersionDjU5QhzltDJS882wOMJaSJrRwuWiT4PdGCWPPMPuY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetNewAddressesLambdaFunction"
              },
              "CodeSha256": "TuEli0EL+6gMKQKZp91cCh//g9sHPCqixdIzAI0hW1s="
            }
          },
          "GetUtxosLambdaVersionGBGxPPyGLJq2Ndn6Kkza7B9pcWZUnVeeb0x2p5uxrMA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUtxosLambdaFunction"
              },
              "CodeSha256": "TuEli0EL+6gMKQKZp91cCh//g9sHPCqixdIzAI0hW1s="
            }
          },
          "GetTxOutputsLambdaVersionlBsn88PEhO0VypYYqHydwxeJbA5YIuuVnbFfpI14g": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetTxOutputsLambdaFunction"
              },
              "CodeSha256": "TuEli0EL+6gMKQKZp91cCh//g9sHPCqixdIzAI0hW1s="
            }
          },
          "GetBalanceApiLambdaVersionm7hEkhXtHc4dtqUKvB3cmiJWNdbwuGXPWaz7NhGHO4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetBalanceApiLambdaFunction"
              },
              "CodeSha256": "TuEli0EL+6gMKQKZp91cCh//g9sHPCqixdIzAI0hW1s="
            }
          },
          "GetTokensApiLambdaVersionQAeSrARG61o5Fv3WEfjuJ6VCpzi1fMF4fnzwFQFoMo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetTokensApiLambdaFunction"
              },
              "CodeSha256": "TuEli0EL+6gMKQKZp91cCh//g9sHPCqixdIzAI0hW1s="
            }
          },
          "GetTokenDetailsLambdaVersionez8TAuRJc14zUmMItzUkZh60EwGyqtPesFefUJsjg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetTokenDetailsLambdaFunction"
              },
              "CodeSha256": "TuEli0EL+6gMKQKZp91cCh//g9sHPCqixdIzAI0hW1s="
            }
          },
          "GetVersionDataLambdaVersion3aTvONNgfDqcnM0fNZIBYXwZbwV6TBcuBKkjw59s": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetVersionDataLambdaFunction"
              },
              "CodeSha256": "TuEli0EL+6gMKQKZp91cCh//g9sHPCqixdIzAI0hW1s="
            }
          },
          "GetTxHistoryApiLambdaVersion9cWpVgVIcN6l8j9uiezcTnnbmoKR9HtWXOASfGD5A": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetTxHistoryApiLambdaFunction"
              },
              "CodeSha256": "TuEli0EL+6gMKQKZp91cCh//g9sHPCqixdIzAI0hW1s="
            }
          },
          "CreateTxProposalApiLambdaVersionV1gIsq1W0ifBm6DmooeFSqMQilWiexcL9YSahWwHU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateTxProposalApiLambdaFunction"
              },
              "CodeSha256": "TuEli0EL+6gMKQKZp91cCh//g9sHPCqixdIzAI0hW1s="
            }
          },
          "SendTxProposalApiLambdaVersionvqtWtfUGSTmRfzVEkg0sG6zcROjsPXUmgIsCtK4tYE": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SendTxProposalApiLambdaFunction"
              },
              "CodeSha256": "TuEli0EL+6gMKQKZp91cCh//g9sHPCqixdIzAI0hW1s="
            }
          },
          "DeleteTxProposalApiLambdaVersionEiJ5TMOFFthsYuTNeKj986MJ2iclswR7L3UW4LlFsA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteTxProposalApiLambdaFunction"
              },
              "CodeSha256": "TuEli0EL+6gMKQKZp91cCh//g9sHPCqixdIzAI0hW1s="
            }
          },
          "WsConnectLambdaVersion2jWfPeGOzdDo6DMGRAEdiikXdtmy1CPaoYm3ClLI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "WsConnectLambdaFunction"
              },
              "CodeSha256": "TuEli0EL+6gMKQKZp91cCh//g9sHPCqixdIzAI0hW1s="
            }
          },
          "WsJoinLambdaVersionu0NIC4yUTgE6fmxPivSNCWcR75Ua1qmAOwOATAZLW4Q": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "WsJoinLambdaFunction"
              },
              "CodeSha256": "TuEli0EL+6gMKQKZp91cCh//g9sHPCqixdIzAI0hW1s="
            }
          },
          "WsTxNotifyNewLambdaVersionze0on4gKwPUJSmoqcd7sD7Ol9vimZD0r7jHVRRwBDf4": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "WsTxNotifyNewLambdaFunction"
              },
              "CodeSha256": "TuEli0EL+6gMKQKZp91cCh//g9sHPCqixdIzAI0hW1s="
            }
          },
          "WsTxNotifyUpdateLambdaVersionAq6juaTKAontinsGyJ9eQO69jjgtYujBL0BbGesL1g": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "WsTxNotifyUpdateLambdaFunction"
              },
              "CodeSha256": "TuEli0EL+6gMKQKZp91cCh//g9sHPCqixdIzAI0hW1s="
            }
          },
          "WsAdminBroadcastLambdaVersionGItWXmh7DIQwdp9YWMv5oYxNz5KROppnBbszP5JirY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "WsAdminBroadcastLambdaFunction"
              },
              "CodeSha256": "TuEli0EL+6gMKQKZp91cCh//g9sHPCqixdIzAI0hW1s="
            }
          },
          "WsAdminDisconnectLambdaVersionM7EYeWbz4dlcPRmtheAx6WUvXfgTtSXxMfI50RX3Xs": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "WsAdminDisconnectLambdaFunction"
              },
              "CodeSha256": "TuEli0EL+6gMKQKZp91cCh//g9sHPCqixdIzAI0hW1s="
            }
          },
          "WsAdminMulticastLambdaVersionSu7vDcUXw5nGklYKXG3bewGGLwiECAZi8XmoqNXPNI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "WsAdminMulticastLambdaFunction"
              },
              "CodeSha256": "TuEli0EL+6gMKQKZp91cCh//g9sHPCqixdIzAI0hW1s="
            }
          },
          "AuthTokenApiLambdaVersionNLbhIakxhffp9Btc1ZNABrqkCqGkOdZFsZCW8fkvv0": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "AuthTokenApiLambdaFunction"
              },
              "CodeSha256": "TuEli0EL+6gMKQKZp91cCh//g9sHPCqixdIzAI0hW1s="
            }
          },
          "BearerAuthorizerLambdaVersion7zt6OlUTRqPQ2gJSDNXNKZJ5N62YUdj1v3c8SgkRAEo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "BearerAuthorizerLambdaFunction"
              },
              "CodeSha256": "TuEli0EL+6gMKQKZp91cCh//g9sHPCqixdIzAI0hW1s="
            }
          },
          "MetricsLambdaVersionRs2jvKlQFug100jZciIt6XOVRMYw1SShgYwpEOFjNEk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "MetricsLambdaFunction"
              },
              "CodeSha256": "TuEli0EL+6gMKQKZp91cCh//g9sHPCqixdIzAI0hW1s="
            }
          },
          "PushRegisterLambdaVersionbc03QSe6m0grtGWpDUSDdcRSi20Z1oDLCFEzl21Egc": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "PushRegisterLambdaFunction"
              },
              "CodeSha256": "TuEli0EL+6gMKQKZp91cCh//g9sHPCqixdIzAI0hW1s="
            }
          },
          "PushUpdateLambdaVersionsK6z8xrQBleCJbMArqBywliPTfiFRxlkPGPnol090": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "PushUpdateLambdaFunction"
              },
              "CodeSha256": "TuEli0EL+6gMKQKZp91cCh//g9sHPCqixdIzAI0hW1s="
            }
          },
          "PushUnregisterLambdaVersionlCeD36ZaQ2AGyQt0BGcPPjq6Y9eoMieTIsbhik4w": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "PushUnregisterLambdaFunction"
              },
              "CodeSha256": "TuEli0EL+6gMKQKZp91cCh//g9sHPCqixdIzAI0hW1s="
            }
          },
          "GetTxByIdLambdaVersionFx8UBF9Ex9N1bmy0i3pclqx2lQ3H9D336s1lyHufX1Q": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetTxByIdLambdaFunction"
              },
              "CodeSha256": "TuEli0EL+6gMKQKZp91cCh//g9sHPCqixdIzAI0hW1s="
            }
          },
          "ProxiedGetTxByIdLambdaVersionJbFWRUi1ol1tDN6blKR4uXyBEcjFxeTGFB4YyBG2esY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ProxiedGetTxByIdLambdaFunction"
              },
              "CodeSha256": "TuEli0EL+6gMKQKZp91cCh//g9sHPCqixdIzAI0hW1s="
            }
          },
          "ProxiedGetConfirmationDataLambdaVersion8RAZJDpBb8ZFq1Tpe25qf3QN3wspXqMuJnLSwSobVA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ProxiedGetConfirmationDataLambdaFunction"
              },
              "CodeSha256": "TuEli0EL+6gMKQKZp91cCh//g9sHPCqixdIzAI0hW1s="
            }
          },
          "ProxiedGraphvizNeighborsQueryLambdaVersionZVR30zSAZj57kpJa2GfWTMQHUkfLzJ1w4RUMjudMIY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ProxiedGraphvizNeighborsQueryLambdaFunction"
              },
              "CodeSha256": "TuEli0EL+6gMKQKZp91cCh//g9sHPCqixdIzAI0hW1s="
            }
          },
          "SendNotificationToDeviceLambdaVersioncD4Bwy7Qs3DXFtZx8oZjndySwxO27Lct9PLilfLcg": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "SendNotificationToDeviceLambdaFunction"
              },
              "CodeSha256": "TuEli0EL+6gMKQKZp91cCh//g9sHPCqixdIzAI0hW1s="
            }
          },
          "TxPushRequestedLambdaVersion0MbTEYmSuFwVocSFViLiKKQOnN776rGbMZPjl6bAw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "TxPushRequestedLambdaFunction"
              },
              "CodeSha256": "TuEli0EL+6gMKQKZp91cCh//g9sHPCqixdIzAI0hW1s="
            }
          },
          "DeleteStalePushDevicesLambdaVersionO7VFZgAnEdcd5UCXZknxgHJP29jBZgVwqsxgIZkHU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "DeleteStalePushDevicesLambdaFunction"
              },
              "CodeSha256": "TuEli0EL+6gMKQKZp91cCh//g9sHPCqixdIzAI0hW1s="
            }
          },
          "CleanUnsentTxProposalsUtxosLambdaVersiono28VNZwQGtgiLLLK3fNd7ARm8FjXyftM2bBlld2A": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CleanUnsentTxProposalsUtxosLambdaFunction"
              },
              "CodeSha256": "TuEli0EL+6gMKQKZp91cCh//g9sHPCqixdIzAI0hW1s="
            }
          },
          "OnHandleOldVoidedTxsEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "rate(5 minutes)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "OnHandleOldVoidedTxsLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "onHandleOldVoidedTxsSchedule"
                }
              ]
            }
          },
          "OnHandleOldVoidedTxsLambdaPermissionEventsRuleSchedule1": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "OnHandleOldVoidedTxsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "OnHandleOldVoidedTxsEventsRuleSchedule1",
                  "Arn"
                ]
              }
            }
          },
          "DeleteStalePushDevicesEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "cron(17 3 */15 * ? *)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "DeleteStalePushDevicesLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "deleteStalePushDevicesSchedule"
                }
              ]
            }
          },
          "DeleteStalePushDevicesLambdaPermissionEventsRuleSchedule1": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteStalePushDevicesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "DeleteStalePushDevicesEventsRuleSchedule1",
                  "Arn"
                ]
              }
            }
          },
          "CleanUnsentTxProposalsUtxosEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "cron(*/5 * * * ? *)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "CleanUnsentTxProposalsUtxosLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "cleanUnsentTxProposalsUtxosSchedule"
                }
              ]
            }
          },
          "CleanUnsentTxProposalsUtxosLambdaPermissionEventsRuleSchedule1": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CleanUnsentTxProposalsUtxosLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "CleanUnsentTxProposalsUtxosEventsRuleSchedule1",
                  "Arn"
                ]
              }
            }
          },
          "WarmUpPluginWalletWarmerEventsRuleSchedule1": {
            "Type": "AWS::Events::Rule",
            "Properties": {
              "ScheduleExpression": "rate(5 minutes)",
              "State": "ENABLED",
              "Targets": [
                {
                  "Arn": {
                    "Fn::GetAtt": [
                      "WarmUpPluginWalletWarmerLambdaFunction",
                      "Arn"
                    ]
                  },
                  "Id": "warmUpPluginWalletWarmerSchedule"
                }
              ]
            }
          },
          "WarmUpPluginWalletWarmerLambdaPermissionEventsRuleSchedule1": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "WarmUpPluginWalletWarmerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "events.amazonaws.com",
              "SourceArn": {
                "Fn::GetAtt": [
                  "WarmUpPluginWalletWarmerEventsRuleSchedule1",
                  "Arn"
                ]
              }
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-hathor-wallet-service",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": "",
              "MinimumCompressionSize": 1024
            }
          },
          "ApiGatewayResourceWallet": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "wallet",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWalletInit": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceWallet"
              },
              "PathPart": "init",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWalletAuth": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceWallet"
              },
              "PathPart": "auth",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWalletStatus": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceWallet"
              },
              "PathPart": "status",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWalletAddresses": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceWallet"
              },
              "PathPart": "addresses",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWalletAddressesCheckmine": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceWalletAddresses"
              },
              "PathPart": "check_mine",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWalletAddressesNew": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceWalletAddresses"
              },
              "PathPart": "new",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWalletUtxos": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceWallet"
              },
              "PathPart": "utxos",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWalletTxoutputs": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceWallet"
              },
              "PathPart": "tx_outputs",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWalletBalances": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceWallet"
              },
              "PathPart": "balances",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWalletTokens": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceWallet"
              },
              "PathPart": "tokens",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWalletTokensTokenidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceWalletTokens"
              },
              "PathPart": "{token_id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWalletTokensTokenidVarDetails": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceWalletTokensTokenidVar"
              },
              "PathPart": "details",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWalletHistory": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceWallet"
              },
              "PathPart": "history",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWalletPush": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceWallet"
              },
              "PathPart": "push",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWalletPushRegister": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceWalletPush"
              },
              "PathPart": "register",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWalletPushUpdate": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceWalletPush"
              },
              "PathPart": "update",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWalletPushUnregister": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceWalletPush"
              },
              "PathPart": "unregister",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWalletPushUnregisterDeviceidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceWalletPushUnregister"
              },
              "PathPart": "{deviceId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWalletTransactions": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceWallet"
              },
              "PathPart": "transactions",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWalletTransactionsTxidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceWalletTransactions"
              },
              "PathPart": "{txId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWalletProxy": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceWallet"
              },
              "PathPart": "proxy",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWalletProxyTransactions": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceWalletProxy"
              },
              "PathPart": "transactions",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWalletProxyTransactionsTxidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceWalletProxyTransactions"
              },
              "PathPart": "{txId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWalletProxyTransactionsTxidVarConfirmationdata": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceWalletProxyTransactionsTxidVar"
              },
              "PathPart": "confirmation_data",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWalletProxyGraphviz": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceWalletProxy"
              },
              "PathPart": "graphviz",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceWalletProxyGraphvizNeighbours": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceWalletProxyGraphviz"
              },
              "PathPart": "neighbours",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceVersion": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "version",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceTx": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "tx",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceTxProposal": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceTx"
              },
              "PathPart": "proposal",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceTxProposalTxproposalidVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceTxProposal"
              },
              "PathPart": "{txProposalId}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAuth": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "auth",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceAuthToken": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceAuth"
              },
              "PathPart": "token",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceMetrics": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "metrics",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodWalletInitOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceWalletInit"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodWalletAuthOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceWalletAuth"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodWalletStatusOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceWalletStatus"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodWalletAddressesCheckmineOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceWalletAddressesCheckmine"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodWalletAddressesOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceWalletAddresses"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodWalletAddressesNewOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceWalletAddressesNew"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodWalletUtxosOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceWalletUtxos"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodWalletTxoutputsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceWalletTxoutputs"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodWalletBalancesOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceWalletBalances"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodWalletTokensOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceWalletTokens"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodWalletTokensTokenidVarDetailsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceWalletTokensTokenidVarDetails"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodVersionOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceVersion"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodWalletHistoryOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceWalletHistory"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodTxProposalOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceTxProposal"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodTxProposalTxproposalidVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceTxProposalTxproposalidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodAuthTokenOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthToken"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodWalletPushRegisterOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceWalletPushRegister"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodWalletPushUpdateOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,PUT'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceWalletPushUpdate"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodWalletPushUnregisterDeviceidVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,DELETE'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceWalletPushUnregisterDeviceidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodWalletTransactionsTxidVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceWalletTransactionsTxidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodWalletProxyTransactionsTxidVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceWalletProxyTransactionsTxidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodWalletProxyTransactionsTxidVarConfirmationdataOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceWalletProxyTransactionsTxidVarConfirmationdata"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodWalletProxyGraphvizNeighboursOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceWalletProxyGraphvizNeighbours"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodWalletInitPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceWalletInit"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "LoadWalletApiLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "LoadWalletApiLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodWalletAuthPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceWalletAuth"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ChangeWalletAuthXpubApiLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ChangeWalletAuthXpubApiLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodWalletStatusGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceWalletStatus"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "BearerAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetWalletStatusApiLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "BearerAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodWalletAddressesCheckminePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceWalletAddressesCheckmine"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "BearerAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CheckAddressMineApiLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "BearerAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodWalletAddressesGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {
                "method.request.path.index": false
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceWalletAddresses"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "BearerAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetAddressesApiLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "BearerAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodWalletAddressesNewGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceWalletAddressesNew"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "BearerAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetNewAddressesLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "BearerAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodWalletUtxosGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceWalletUtxos"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "BearerAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUtxosLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "BearerAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodWalletTxoutputsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceWalletTxoutputs"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "BearerAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetTxOutputsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "BearerAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodWalletBalancesGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceWalletBalances"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "BearerAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetBalanceApiLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "BearerAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodWalletTokensGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceWalletTokens"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "BearerAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetTokensApiLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "BearerAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodWalletTokensTokenidVarDetailsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {
                "method.request.path.token_id": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceWalletTokensTokenidVarDetails"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "BearerAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetTokenDetailsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayHathorwalletserviceRequestValidator"
              }
            },
            "DependsOn": [
              "BearerAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodVersionGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceVersion"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetVersionDataLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetVersionDataLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodWalletHistoryGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceWalletHistory"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "BearerAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetTxHistoryApiLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "BearerAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodTxProposalPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceTxProposal"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "BearerAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateTxProposalApiLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "BearerAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodTxProposalTxproposalidVarPut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {
                "method.request.path.txProposalId": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceTxProposalTxproposalidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "BearerAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "SendTxProposalApiLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayHathorwalletserviceRequestValidator"
              }
            },
            "DependsOn": [
              "BearerAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodTxProposalTxproposalidVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {
                "method.request.path.txProposalId": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceTxProposalTxproposalidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "BearerAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "DeleteTxProposalApiLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayHathorwalletserviceRequestValidator"
              }
            },
            "DependsOn": [
              "BearerAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodAuthTokenPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceAuthToken"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "AuthTokenApiLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "AuthTokenApiLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodMetricsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceMetrics"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "MetricsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "MetricsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodWalletPushRegisterPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceWalletPushRegister"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "BearerAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "PushRegisterLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "BearerAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodWalletPushUpdatePut": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "PUT",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceWalletPushUpdate"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "BearerAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "PushUpdateLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "BearerAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodWalletPushUnregisterDeviceidVarDelete": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "DELETE",
              "RequestParameters": {
                "method.request.path.deviceId": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceWalletPushUnregisterDeviceidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "BearerAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "PushUnregisterLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayHathorwalletserviceRequestValidator"
              }
            },
            "DependsOn": [
              "BearerAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodWalletTransactionsTxidVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {
                "method.request.path.txId": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceWalletTransactionsTxidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "BearerAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetTxByIdLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayHathorwalletserviceRequestValidator"
              }
            },
            "DependsOn": [
              "BearerAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodWalletProxyTransactionsTxidVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {
                "method.request.path.txId": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceWalletProxyTransactionsTxidVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "BearerAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ProxiedGetTxByIdLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayHathorwalletserviceRequestValidator"
              }
            },
            "DependsOn": [
              "BearerAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodWalletProxyTransactionsTxidVarConfirmationdataGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {
                "method.request.path.txId": true
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceWalletProxyTransactionsTxidVarConfirmationdata"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "BearerAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ProxiedGetConfirmationDataLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": [],
              "RequestValidatorId": {
                "Ref": "ApiGatewayHathorwalletserviceRequestValidator"
              }
            },
            "DependsOn": [
              "BearerAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayMethodWalletProxyGraphvizNeighboursGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceWalletProxyGraphvizNeighbours"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "CUSTOM",
              "AuthorizerId": {
                "Ref": "BearerAuthorizerApiGatewayAuthorizer"
              },
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ProxiedGraphvizNeighborsQueryLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "BearerAuthorizerApiGatewayAuthorizer"
            ]
          },
          "ApiGatewayHathorwalletserviceRequestValidator": {
            "Type": "AWS::ApiGateway::RequestValidator",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ValidateRequestBody": true,
              "ValidateRequestParameters": true,
              "Name": "hathor-wallet-service-dev | Validate request body and querystring parameters"
            }
          },
          "BearerAuthorizerApiGatewayAuthorizer": {
            "Type": "AWS::ApiGateway::Authorizer",
            "Properties": {
              "AuthorizerResultTtlInSeconds": 300,
              "IdentitySource": "method.request.header.Authorization",
              "Name": "bearerAuthorizer",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "IdentityValidationExpression": "Bearer (.*)",
              "AuthorizerUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "BearerAuthorizerLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              },
              "Type": "TOKEN"
            }
          },
          "ApiGatewayDeployment1696424607264": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodWalletInitOptions",
              "ApiGatewayMethodWalletAuthOptions",
              "ApiGatewayMethodWalletStatusOptions",
              "ApiGatewayMethodWalletAddressesCheckmineOptions",
              "ApiGatewayMethodWalletAddressesOptions",
              "ApiGatewayMethodWalletAddressesNewOptions",
              "ApiGatewayMethodWalletUtxosOptions",
              "ApiGatewayMethodWalletTxoutputsOptions",
              "ApiGatewayMethodWalletBalancesOptions",
              "ApiGatewayMethodWalletTokensOptions",
              "ApiGatewayMethodWalletTokensTokenidVarDetailsOptions",
              "ApiGatewayMethodVersionOptions",
              "ApiGatewayMethodWalletHistoryOptions",
              "ApiGatewayMethodTxProposalOptions",
              "ApiGatewayMethodTxProposalTxproposalidVarOptions",
              "ApiGatewayMethodAuthTokenOptions",
              "ApiGatewayMethodWalletPushRegisterOptions",
              "ApiGatewayMethodWalletPushUpdateOptions",
              "ApiGatewayMethodWalletPushUnregisterDeviceidVarOptions",
              "ApiGatewayMethodWalletTransactionsTxidVarOptions",
              "ApiGatewayMethodWalletProxyTransactionsTxidVarOptions",
              "ApiGatewayMethodWalletProxyTransactionsTxidVarConfirmationdataOptions",
              "ApiGatewayMethodWalletProxyGraphvizNeighboursOptions",
              "ApiGatewayMethodWalletInitPost",
              "ApiGatewayMethodWalletAuthPut",
              "ApiGatewayMethodWalletStatusGet",
              "ApiGatewayMethodWalletAddressesCheckminePost",
              "ApiGatewayMethodWalletAddressesGet",
              "ApiGatewayMethodWalletAddressesNewGet",
              "ApiGatewayMethodWalletUtxosGet",
              "ApiGatewayMethodWalletTxoutputsGet",
              "ApiGatewayMethodWalletBalancesGet",
              "ApiGatewayMethodWalletTokensGet",
              "ApiGatewayMethodWalletTokensTokenidVarDetailsGet",
              "ApiGatewayMethodVersionGet",
              "ApiGatewayMethodWalletHistoryGet",
              "ApiGatewayMethodTxProposalPost",
              "ApiGatewayMethodTxProposalTxproposalidVarPut",
              "ApiGatewayMethodTxProposalTxproposalidVarDelete",
              "ApiGatewayMethodAuthTokenPost",
              "ApiGatewayMethodMetricsGet",
              "ApiGatewayMethodWalletPushRegisterPost",
              "ApiGatewayMethodWalletPushUpdatePut",
              "ApiGatewayMethodWalletPushUnregisterDeviceidVarDelete",
              "ApiGatewayMethodWalletTransactionsTxidVarGet",
              "ApiGatewayMethodWalletProxyTransactionsTxidVarGet",
              "ApiGatewayMethodWalletProxyTransactionsTxidVarConfirmationdataGet",
              "ApiGatewayMethodWalletProxyGraphvizNeighboursGet"
            ]
          },
          "LoadWalletApiLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "LoadWalletApiLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ChangeWalletAuthXpubApiLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ChangeWalletAuthXpubApiLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetWalletStatusApiLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetWalletStatusApiLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "BearerAuthorizerLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "BearerAuthorizerLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CheckAddressMineApiLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CheckAddressMineApiLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetAddressesApiLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetAddressesApiLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetNewAddressesLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetNewAddressesLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetUtxosLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUtxosLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetTxOutputsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetTxOutputsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetBalanceApiLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetBalanceApiLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetTokensApiLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetTokensApiLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetTokenDetailsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetTokenDetailsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetVersionDataLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetVersionDataLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetTxHistoryApiLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetTxHistoryApiLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateTxProposalApiLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateTxProposalApiLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "SendTxProposalApiLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "SendTxProposalApiLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "DeleteTxProposalApiLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "DeleteTxProposalApiLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "AuthTokenApiLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "AuthTokenApiLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "MetricsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "MetricsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "PushRegisterLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "PushRegisterLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "PushUpdateLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "PushUpdateLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "PushUnregisterLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "PushUnregisterLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetTxByIdLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetTxByIdLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ProxiedGetTxByIdLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ProxiedGetTxByIdLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ProxiedGetConfirmationDataLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ProxiedGetConfirmationDataLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ProxiedGraphvizNeighborsQueryLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ProxiedGraphvizNeighborsQueryLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "WebsocketsApi": {
            "Type": "AWS::ApiGatewayV2::Api",
            "Properties": {
              "Name": "wallet-realtime-ws-api-dev",
              "RouteSelectionExpression": "$request.body.action",
              "Description": "Serverless Websockets",
              "ProtocolType": "WEBSOCKET"
            }
          },
          "WsConnectWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "WsConnectLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "WsJoinWebsocketsIntegration": {
            "Type": "AWS::ApiGatewayV2::Integration",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "IntegrationType": "AWS_PROXY",
              "IntegrationUri": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":apigateway:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":lambda:path/2015-03-31/functions/",
                    {
                      "Fn::GetAtt": [
                        "WsJoinLambdaFunction",
                        "Arn"
                      ]
                    },
                    "/invocations"
                  ]
                ]
              }
            }
          },
          "WsConnectLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "WsConnectLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "WsConnectLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "WsJoinLambdaPermissionWebsockets": {
            "Type": "AWS::Lambda::Permission",
            "DependsOn": [
              "WebsocketsApi",
              "WsJoinLambdaFunction"
            ],
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "WsJoinLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com"
            }
          },
          "SconnectWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "$connect",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "WsConnectWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "SdisconnectWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "$disconnect",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "WsConnectWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "pingWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "ping",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "WsConnectWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "joinWebsocketsRoute": {
            "Type": "AWS::ApiGatewayV2::Route",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "RouteKey": "join",
              "AuthorizationType": "NONE",
              "Target": {
                "Fn::Join": [
                  "/",
                  [
                    "integrations",
                    {
                      "Ref": "WsJoinWebsocketsIntegration"
                    }
                  ]
                ]
              }
            }
          },
          "WebsocketsDeploymentStage": {
            "Type": "AWS::ApiGatewayV2::Stage",
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "StageName": "dev",
              "Description": "Serverless Websockets",
              "DeploymentId": {
                "Ref": "WebsocketsDeploymentdHEtHO5K49ZyrrMzcPAieQt5Zpw8RqtaV0a6rWQRPQ"
              }
            }
          },
          "WebsocketsDeploymentdHEtHO5K49ZyrrMzcPAieQt5Zpw8RqtaV0a6rWQRPQ": {
            "Type": "AWS::ApiGatewayV2::Deployment",
            "DependsOn": [
              "SconnectWebsocketsRoute",
              "SdisconnectWebsocketsRoute",
              "pingWebsocketsRoute",
              "joinWebsocketsRoute"
            ],
            "Properties": {
              "ApiId": {
                "Ref": "WebsocketsApi"
              },
              "Description": "Serverless Websockets"
            }
          },
          "WsTxNotifyNewEventSourceMappingSQSWalletServiceNewTxQueue": {
            "Type": "AWS::Lambda::EventSourceMapping",
            "DependsOn": [
              "IamRoleLambdaExecution"
            ],
            "Properties": {
              "BatchSize": 1,
              "MaximumBatchingWindowInSeconds": 0,
              "EventSourceArn": {
                "Fn::GetAtt": [
                  "WalletServiceNewTxQueue",
                  "Arn"
                ]
              },
              "FunctionName": {
                "Fn::GetAtt": [
                  "WsTxNotifyNewLambdaFunction",
                  "Arn"
                ]
              },
              "Enabled": true
            }
          },
          "OnNewTxRequestIamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "hathor-wallet-service",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/hathor-wallet-service-dev-onNewTxRequest:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][0]"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "lambda:InvokeFunction",
                          "lambda:InvokeAsync"
                        ],
                        "Resource": [
                          {
                            "Fn::GetAtt": [
                              "OnNewNftEventLambdaFunction",
                              "Arn"
                            ]
                          },
                          {
                            "Fn::GetAtt": [
                              "TxPushRequestedLambdaFunction",
                              "Arn"
                            ]
                          }
                        ]
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "hathor-wallet-service",
                    "dev",
                    "onNewTxRequest",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              },
              "ManagedPolicyArns": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
                    ]
                  ]
                }
              ]
            }
          },
          "OnNewNftEventIamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "hathor-wallet-service",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/hathor-wallet-service-dev-onNewNftEvent:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][0]"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "lambda:InvokeFunction",
                          "lambda:InvokeAsync"
                        ],
                        "Resource": "arn:aws:lambda:eu-central-1:1234:function:hathor-explorer-service-dev-create_or_update_dag_metadata"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "hathor-wallet-service",
                    "dev",
                    "onNewNftEvent",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              },
              "ManagedPolicyArns": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
                    ]
                  ]
                }
              ]
            }
          },
          "TxPushRequestedIamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "hathor-wallet-service",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/hathor-wallet-service-dev-txPushRequested:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][0]"
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "lambda:InvokeFunction",
                          "lambda:InvokeAsync"
                        ],
                        "Resource": {
                          "Fn::GetAtt": [
                            "SendNotificationToDeviceLambdaFunction",
                            "Arn"
                          ]
                        }
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "hathor-wallet-service",
                    "dev",
                    "txPushRequested",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              },
              "ManagedPolicyArns": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole"
                    ]
                  ]
                }
              ]
            }
          },
          "GatewayResponseDefault4XX": {
            "Type": "AWS::ApiGateway::GatewayResponse",
            "Properties": {
              "ResponseParameters": {
                "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
                "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
              },
              "ResponseType": "DEFAULT_4XX",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "WalletServiceNewTxQueue": {
            "Type": "AWS::SQS::Queue",
            "Properties": {
              "QueueName": "WalletServiceNewTxQueue_dev"
            }
          },
          "WarmUpPluginWalletWarmerRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "hathor-wallet-service",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "walletwarmer",
                    "role"
                  ]
                ]
              },
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": "sts:AssumeRole"
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "hathor-wallet-service",
                        "dev",
                        "warmer",
                        "walletwarmer",
                        "policy"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogGroup",
                          "logs:CreateLogStream"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/hathor-wallet-service-dev-warmup-plugin-walletWarmer:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/hathor-wallet-service-dev-warmup-plugin-walletWarmer:*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "lambda:InvokeFunction"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:hathor-wallet-service-dev-loadWalletApi*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:hathor-wallet-service-dev-getWalletStatusApi*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:hathor-wallet-service-dev-getAddressesApi*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:hathor-wallet-service-dev-getNewAddresses*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:hathor-wallet-service-dev-getBalanceApi*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:hathor-wallet-service-dev-getTokensApi*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:hathor-wallet-service-dev-getVersionData*"
                          },
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:hathor-wallet-service-dev-getTxHistoryApi*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "ec2:CreateNetworkInterface",
                          "ec2:DescribeNetworkInterfaces",
                          "ec2:DetachNetworkInterface",
                          "ec2:DeleteNetworkInterface"
                        ],
                        "Resource": "*"
                      }
                    ]
                  }
                }
              ]
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-hathor-wallet-service-dev-ServerlessDeploymentBucketName"
            }
          },
          "WarmUpPluginWalletWarmerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "WarmUpPluginWalletWarmerLambdaVersionrVA2ERLQzEqPZx6IBV0wkyZXIDESN5Fdl0xY1XtG3s"
            },
            "Export": {
              "Name": "sls-hathor-wallet-service-dev-WarmUpPluginWalletWarmerLambdaFunctionQualifiedArn"
            }
          },
          "OnHandleOldVoidedTxsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "OnHandleOldVoidedTxsLambdaVersion79oGSDrMFFQvVHy4QOdkiWW99J12ZvYUJaiVHl4ZvZo"
            },
            "Export": {
              "Name": "sls-hathor-wallet-service-dev-OnHandleOldVoidedTxsLambdaFunctionQualifiedArn"
            }
          },
          "GetLatestBlockLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetLatestBlockLambdaVersionMj6ig9ekRUX7dzJ5fhBCh1nS1vjGNiXPkNVjC2DA4I"
            },
            "Export": {
              "Name": "sls-hathor-wallet-service-dev-GetLatestBlockLambdaFunctionQualifiedArn"
            }
          },
          "OnNewTxRequestLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "OnNewTxRequestLambdaVersionXuFC8DmhRkE0X5odUfmcTwGEHXtWVuferSK09AAkE"
            },
            "Export": {
              "Name": "sls-hathor-wallet-service-dev-OnNewTxRequestLambdaFunctionQualifiedArn"
            }
          },
          "OnMinersListRequestLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "OnMinersListRequestLambdaVersionBsOap0AqSNboJLJrFLsxUW6KX3bcsVby4O0wbM8"
            },
            "Export": {
              "Name": "sls-hathor-wallet-service-dev-OnMinersListRequestLambdaFunctionQualifiedArn"
            }
          },
          "OnTotalSupplyRequestLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "OnTotalSupplyRequestLambdaVersionPtsFBYOHNrJ4eYYlP6aYeuNqgDdlIPAJBrXpcutc"
            },
            "Export": {
              "Name": "sls-hathor-wallet-service-dev-OnTotalSupplyRequestLambdaFunctionQualifiedArn"
            }
          },
          "OnHandleReorgRequestLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "OnHandleReorgRequestLambdaVersionJrkwlYtu6Y62NI0kJnEwwxv8IG625MnFblJ4IheFis0"
            },
            "Export": {
              "Name": "sls-hathor-wallet-service-dev-OnHandleReorgRequestLambdaFunctionQualifiedArn"
            }
          },
          "OnNewTxEventLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "OnNewTxEventLambdaVersioncSyCzfLH3sBeZMve96tju3eO05MEun53q5T03kF2EE"
            },
            "Export": {
              "Name": "sls-hathor-wallet-service-dev-OnNewTxEventLambdaFunctionQualifiedArn"
            }
          },
          "OnNewNftEventLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "OnNewNftEventLambdaVersionlBgOx0fdmN3y8hYXwd4l1T8aH7dLZAAevxymStgL4hE"
            },
            "Export": {
              "Name": "sls-hathor-wallet-service-dev-OnNewNftEventLambdaFunctionQualifiedArn"
            }
          },
          "LoadWalletAsyncLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "LoadWalletAsyncLambdaVersionOqsRRC5hNavynN6dh0gxkzikm6N0nCnmAWTfOuXr64"
            },
            "Export": {
              "Name": "sls-hathor-wallet-service-dev-LoadWalletAsyncLambdaFunctionQualifiedArn"
            }
          },
          "LoadWalletApiLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "LoadWalletApiLambdaVersion7KtFL6itBBL1Pl5KftoZyzxKBTFkyWzGFh4vVNm48"
            },
            "Export": {
              "Name": "sls-hathor-wallet-service-dev-LoadWalletApiLambdaFunctionQualifiedArn"
            }
          },
          "ChangeWalletAuthXpubApiLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ChangeWalletAuthXpubApiLambdaVersiongpkgqrPjEbWA3YE4oHK80mZsSYxsoaVIGt3TSYIxWGE"
            },
            "Export": {
              "Name": "sls-hathor-wallet-service-dev-ChangeWalletAuthXpubApiLambdaFunctionQualifiedArn"
            }
          },
          "GetWalletStatusApiLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetWalletStatusApiLambdaVersion5xUVtXvLy5LzSEgVfibPjapd5TdX1NA1sqztoJXw6Cs"
            },
            "Export": {
              "Name": "sls-hathor-wallet-service-dev-GetWalletStatusApiLambdaFunctionQualifiedArn"
            }
          },
          "CheckAddressMineApiLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CheckAddressMineApiLambdaVersionOoi0qByQpyKkusBpXnCiZIp2OE8Vo6vsz8WF1PrxUA"
            },
            "Export": {
              "Name": "sls-hathor-wallet-service-dev-CheckAddressMineApiLambdaFunctionQualifiedArn"
            }
          },
          "GetAddressesApiLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetAddressesApiLambdaVersionyUA3EUzIZxKaLOurCy30iQVXOryDTbbmKRuNY"
            },
            "Export": {
              "Name": "sls-hathor-wallet-service-dev-GetAddressesApiLambdaFunctionQualifiedArn"
            }
          },
          "GetNewAddressesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetNewAddressesLambdaVersionDjU5QhzltDJS882wOMJaSJrRwuWiT4PdGCWPPMPuY"
            },
            "Export": {
              "Name": "sls-hathor-wallet-service-dev-GetNewAddressesLambdaFunctionQualifiedArn"
            }
          },
          "GetUtxosLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUtxosLambdaVersionGBGxPPyGLJq2Ndn6Kkza7B9pcWZUnVeeb0x2p5uxrMA"
            },
            "Export": {
              "Name": "sls-hathor-wallet-service-dev-GetUtxosLambdaFunctionQualifiedArn"
            }
          },
          "GetTxOutputsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetTxOutputsLambdaVersionlBsn88PEhO0VypYYqHydwxeJbA5YIuuVnbFfpI14g"
            },
            "Export": {
              "Name": "sls-hathor-wallet-service-dev-GetTxOutputsLambdaFunctionQualifiedArn"
            }
          },
          "GetBalanceApiLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetBalanceApiLambdaVersionm7hEkhXtHc4dtqUKvB3cmiJWNdbwuGXPWaz7NhGHO4"
            },
            "Export": {
              "Name": "sls-hathor-wallet-service-dev-GetBalanceApiLambdaFunctionQualifiedArn"
            }
          },
          "GetTokensApiLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetTokensApiLambdaVersionQAeSrARG61o5Fv3WEfjuJ6VCpzi1fMF4fnzwFQFoMo"
            },
            "Export": {
              "Name": "sls-hathor-wallet-service-dev-GetTokensApiLambdaFunctionQualifiedArn"
            }
          },
          "GetTokenDetailsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetTokenDetailsLambdaVersionez8TAuRJc14zUmMItzUkZh60EwGyqtPesFefUJsjg"
            },
            "Export": {
              "Name": "sls-hathor-wallet-service-dev-GetTokenDetailsLambdaFunctionQualifiedArn"
            }
          },
          "GetVersionDataLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetVersionDataLambdaVersion3aTvONNgfDqcnM0fNZIBYXwZbwV6TBcuBKkjw59s"
            },
            "Export": {
              "Name": "sls-hathor-wallet-service-dev-GetVersionDataLambdaFunctionQualifiedArn"
            }
          },
          "GetTxHistoryApiLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetTxHistoryApiLambdaVersion9cWpVgVIcN6l8j9uiezcTnnbmoKR9HtWXOASfGD5A"
            },
            "Export": {
              "Name": "sls-hathor-wallet-service-dev-GetTxHistoryApiLambdaFunctionQualifiedArn"
            }
          },
          "CreateTxProposalApiLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateTxProposalApiLambdaVersionV1gIsq1W0ifBm6DmooeFSqMQilWiexcL9YSahWwHU"
            },
            "Export": {
              "Name": "sls-hathor-wallet-service-dev-CreateTxProposalApiLambdaFunctionQualifiedArn"
            }
          },
          "SendTxProposalApiLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SendTxProposalApiLambdaVersionvqtWtfUGSTmRfzVEkg0sG6zcROjsPXUmgIsCtK4tYE"
            },
            "Export": {
              "Name": "sls-hathor-wallet-service-dev-SendTxProposalApiLambdaFunctionQualifiedArn"
            }
          },
          "DeleteTxProposalApiLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteTxProposalApiLambdaVersionEiJ5TMOFFthsYuTNeKj986MJ2iclswR7L3UW4LlFsA"
            },
            "Export": {
              "Name": "sls-hathor-wallet-service-dev-DeleteTxProposalApiLambdaFunctionQualifiedArn"
            }
          },
          "WsConnectLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "WsConnectLambdaVersion2jWfPeGOzdDo6DMGRAEdiikXdtmy1CPaoYm3ClLI"
            },
            "Export": {
              "Name": "sls-hathor-wallet-service-dev-WsConnectLambdaFunctionQualifiedArn"
            }
          },
          "WsJoinLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "WsJoinLambdaVersionu0NIC4yUTgE6fmxPivSNCWcR75Ua1qmAOwOATAZLW4Q"
            },
            "Export": {
              "Name": "sls-hathor-wallet-service-dev-WsJoinLambdaFunctionQualifiedArn"
            }
          },
          "WsTxNotifyNewLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "WsTxNotifyNewLambdaVersionze0on4gKwPUJSmoqcd7sD7Ol9vimZD0r7jHVRRwBDf4"
            },
            "Export": {
              "Name": "sls-hathor-wallet-service-dev-WsTxNotifyNewLambdaFunctionQualifiedArn"
            }
          },
          "WsTxNotifyUpdateLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "WsTxNotifyUpdateLambdaVersionAq6juaTKAontinsGyJ9eQO69jjgtYujBL0BbGesL1g"
            },
            "Export": {
              "Name": "sls-hathor-wallet-service-dev-WsTxNotifyUpdateLambdaFunctionQualifiedArn"
            }
          },
          "WsAdminBroadcastLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "WsAdminBroadcastLambdaVersionGItWXmh7DIQwdp9YWMv5oYxNz5KROppnBbszP5JirY"
            },
            "Export": {
              "Name": "sls-hathor-wallet-service-dev-WsAdminBroadcastLambdaFunctionQualifiedArn"
            }
          },
          "WsAdminDisconnectLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "WsAdminDisconnectLambdaVersionM7EYeWbz4dlcPRmtheAx6WUvXfgTtSXxMfI50RX3Xs"
            },
            "Export": {
              "Name": "sls-hathor-wallet-service-dev-WsAdminDisconnectLambdaFunctionQualifiedArn"
            }
          },
          "WsAdminMulticastLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "WsAdminMulticastLambdaVersionSu7vDcUXw5nGklYKXG3bewGGLwiECAZi8XmoqNXPNI"
            },
            "Export": {
              "Name": "sls-hathor-wallet-service-dev-WsAdminMulticastLambdaFunctionQualifiedArn"
            }
          },
          "AuthTokenApiLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "AuthTokenApiLambdaVersionNLbhIakxhffp9Btc1ZNABrqkCqGkOdZFsZCW8fkvv0"
            },
            "Export": {
              "Name": "sls-hathor-wallet-service-dev-AuthTokenApiLambdaFunctionQualifiedArn"
            }
          },
          "BearerAuthorizerLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "BearerAuthorizerLambdaVersion7zt6OlUTRqPQ2gJSDNXNKZJ5N62YUdj1v3c8SgkRAEo"
            },
            "Export": {
              "Name": "sls-hathor-wallet-service-dev-BearerAuthorizerLambdaFunctionQualifiedArn"
            }
          },
          "MetricsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "MetricsLambdaVersionRs2jvKlQFug100jZciIt6XOVRMYw1SShgYwpEOFjNEk"
            },
            "Export": {
              "Name": "sls-hathor-wallet-service-dev-MetricsLambdaFunctionQualifiedArn"
            }
          },
          "PushRegisterLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "PushRegisterLambdaVersionbc03QSe6m0grtGWpDUSDdcRSi20Z1oDLCFEzl21Egc"
            },
            "Export": {
              "Name": "sls-hathor-wallet-service-dev-PushRegisterLambdaFunctionQualifiedArn"
            }
          },
          "PushUpdateLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "PushUpdateLambdaVersionsK6z8xrQBleCJbMArqBywliPTfiFRxlkPGPnol090"
            },
            "Export": {
              "Name": "sls-hathor-wallet-service-dev-PushUpdateLambdaFunctionQualifiedArn"
            }
          },
          "PushUnregisterLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "PushUnregisterLambdaVersionlCeD36ZaQ2AGyQt0BGcPPjq6Y9eoMieTIsbhik4w"
            },
            "Export": {
              "Name": "sls-hathor-wallet-service-dev-PushUnregisterLambdaFunctionQualifiedArn"
            }
          },
          "GetTxByIdLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetTxByIdLambdaVersionFx8UBF9Ex9N1bmy0i3pclqx2lQ3H9D336s1lyHufX1Q"
            },
            "Export": {
              "Name": "sls-hathor-wallet-service-dev-GetTxByIdLambdaFunctionQualifiedArn"
            }
          },
          "ProxiedGetTxByIdLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ProxiedGetTxByIdLambdaVersionJbFWRUi1ol1tDN6blKR4uXyBEcjFxeTGFB4YyBG2esY"
            },
            "Export": {
              "Name": "sls-hathor-wallet-service-dev-ProxiedGetTxByIdLambdaFunctionQualifiedArn"
            }
          },
          "ProxiedGetConfirmationDataLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ProxiedGetConfirmationDataLambdaVersion8RAZJDpBb8ZFq1Tpe25qf3QN3wspXqMuJnLSwSobVA"
            },
            "Export": {
              "Name": "sls-hathor-wallet-service-dev-ProxiedGetConfirmationDataLambdaFunctionQualifiedArn"
            }
          },
          "ProxiedGraphvizNeighborsQueryLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ProxiedGraphvizNeighborsQueryLambdaVersionZVR30zSAZj57kpJa2GfWTMQHUkfLzJ1w4RUMjudMIY"
            },
            "Export": {
              "Name": "sls-hathor-wallet-service-dev-ProxiedGraphvizNeighborsQueryLambdaFunctionQualifiedArn"
            }
          },
          "SendNotificationToDeviceLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "SendNotificationToDeviceLambdaVersioncD4Bwy7Qs3DXFtZx8oZjndySwxO27Lct9PLilfLcg"
            },
            "Export": {
              "Name": "sls-hathor-wallet-service-dev-SendNotificationToDeviceLambdaFunctionQualifiedArn"
            }
          },
          "TxPushRequestedLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "TxPushRequestedLambdaVersion0MbTEYmSuFwVocSFViLiKKQOnN776rGbMZPjl6bAw"
            },
            "Export": {
              "Name": "sls-hathor-wallet-service-dev-TxPushRequestedLambdaFunctionQualifiedArn"
            }
          },
          "DeleteStalePushDevicesLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "DeleteStalePushDevicesLambdaVersionO7VFZgAnEdcd5UCXZknxgHJP29jBZgVwqsxgIZkHU"
            },
            "Export": {
              "Name": "sls-hathor-wallet-service-dev-DeleteStalePushDevicesLambdaFunctionQualifiedArn"
            }
          },
          "CleanUnsentTxProposalsUtxosLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CleanUnsentTxProposalsUtxosLambdaVersiono28VNZwQGtgiLLLK3fNd7ARm8FjXyftM2bBlld2A"
            },
            "Export": {
              "Name": "sls-hathor-wallet-service-dev-CleanUnsentTxProposalsUtxosLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-hathor-wallet-service-dev-ServiceEndpoint"
            }
          },
          "ServiceEndpointWebsocket": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "wss://",
                  {
                    "Ref": "WebsocketsApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-hathor-wallet-service-dev-ServiceEndpointWebsocket"
            }
          },
          "RestApiIdForApigThrottling": {
            "Description": "REST API ID",
            "Value": {
              "Ref": "ApiGatewayRestApi"
            },
            "Export": {
              "Name": "sls-hathor-wallet-service-dev-RestApiIdForApigThrottling"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      }
    },
    "custom": {
      "warmup": {
        "walletWarmer": {
          "enabled": true,
          "events": [
            {
              "schedule": "rate(5 minutes)"
            }
          ]
        }
      },
      "webpack": {
        "webpackConfig": "./webpack.config.js",
        "includeModules": true
      },
      "prune": {
        "automatic": true,
        "number": 3
      },
      "authorizer": {
        "walletBearer": {
          "name": "bearerAuthorizer",
          "type": "TOKEN",
          "identitySource": "method.request.header.Authorization",
          "identityValidationExpression": "Bearer (.*)"
        }
      },
      "apiGatewayThrottling": {
        "maxRequestsPerSecond": 500,
        "maxConcurrentRequests": 250
      },
      "stage": "dev",
      "explorerServiceStage": "dev",
      "alerts": {
        "stages": [
          "mainnet",
          "mainnet-stg",
          "testnet"
        ],
        "topics": {
          "major": {
            "alarm": {
              "topic": "arn:aws:sns:eu-central-1:1234:opsgenie-cloudwatch-integration-production-major"
            }
          },
          "minor": {
            "alarm": {
              "topic": "arn:aws:sns:eu-central-1:1234:opsgenie-cloudwatch-integration-production-minor"
            }
          }
        },
        "definitions": {
          "majorFunctionErrors": {
            "description": "Too many errors in hathor-wallet-service. Runbook: https://github.com/HathorNetwork/ops-tools/blob/master/docs/runbooks/wallet-service/errors-in-logs.md",
            "namespace": "AWS/Lambda",
            "metric": "Errors",
            "threshold": 5,
            "statistic": "Sum",
            "period": 60,
            "evaluationPeriods": 5,
            "comparisonOperator": "GreaterThanOrEqualToThreshold",
            "treatMissingData": "notBreaching",
            "alarmActions": [
              "major"
            ]
          },
          "minorFunctionErrors": {
            "description": "Too many errors in hathor-wallet-service. Runbook: https://github.com/HathorNetwork/ops-tools/blob/master/docs/runbooks/wallet-service/errors-in-logs.md",
            "namespace": "AWS/Lambda",
            "metric": "Errors",
            "threshold": 2,
            "statistic": "Sum",
            "period": 60,
            "evaluationPeriods": 1,
            "comparisonOperator": "GreaterThanOrEqualToThreshold",
            "treatMissingData": "notBreaching",
            "alarmActions": [
              "minor"
            ]
          },
          "wsLambdasExecutionDuration": {
            "description": "WebSocket lambda took too long to execute",
            "namespace": "AWS/Lambda",
            "metric": "Duration",
            "statistic": "Average",
            "threshold": 1000,
            "period": 60,
            "evaluationPeriods": 1,
            "comparisonOperator": "GreaterThanThreshold",
            "alarmActions": [
              "minor"
            ]
          },
          "cleanTxProposalsUtxosDuration": {
            "description": "Clean tx proposals utxos cronjob taking too long",
            "namespace": "AWS/Lambda",
            "metric": "Duration",
            "statistic": "Average",
            "threshold": 30000,
            "period": 60,
            "evaluationPeriods": 1,
            "comparisonOperator": "GreaterThanThreshold",
            "alarmActions": [
              "minor"
            ]
          }
        },
        "alarms": [
          "majorFunctionErrors",
          "minorFunctionErrors"
        ]
      }
    },
    "plugins": [
      "serverless-plugin-monorepo",
      "serverless-webpack",
      "serverless-prune-plugin",
      "serverless-api-gateway-throttling",
      "serverless-plugin-warmup",
      "serverless-iam-roles-per-function",
      "serverless-plugin-aws-alerts"
    ],
    "pluginsData": {},
    "functions": {
      "onHandleOldVoidedTxs": {
        "handler": "src/mempool.onHandleOldVoidedTxs",
        "events": [
          {
            "schedule": "rate(5 minutes)"
          }
        ],
        "warmup": {
          "walletWarmer": {
            "enabled": false
          }
        },
        "name": "hathor-wallet-service-dev-onHandleOldVoidedTxs",
        "package": {
          "artifact": ".serverless/hathor-wallet-service.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "OnHandleOldVoidedTxsLambdaVersion79oGSDrMFFQvVHy4QOdkiWW99J12ZvYUJaiVHl4ZvZo"
      },
      "getLatestBlock": {
        "handler": "src/height.getLatestBlock",
        "warmup": {
          "walletWarmer": {
            "enabled": false
          }
        },
        "events": [],
        "name": "hathor-wallet-service-dev-getLatestBlock",
        "package": {
          "artifact": ".serverless/hathor-wallet-service.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetLatestBlockLambdaVersionMj6ig9ekRUX7dzJ5fhBCh1nS1vjGNiXPkNVjC2DA4I"
      },
      "onNewTxRequest": {
        "handler": "src/txProcessor.onNewTxRequest",
        "timeout": 12,
        "warmup": {
          "walletWarmer": {
            "enabled": false
          }
        },
        "iamRoleStatementsInherit": true,
        "iamRoleStatements": [
          {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"OnNewTxRequestIamRoleLambdaExecution\"][\"Properties\"][\"Policies\"][0][\"PolicyDocument\"][\"Statement\"][2]"
          }
        ],
        "events": [],
        "name": "hathor-wallet-service-dev-onNewTxRequest",
        "package": {
          "artifact": ".serverless/hathor-wallet-service.zip"
        },
        "memory": 256,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "OnNewTxRequestLambdaVersionXuFC8DmhRkE0X5odUfmcTwGEHXtWVuferSK09AAkE"
      },
      "onMinersListRequest": {
        "handler": "src/api/miners.onMinersListRequest",
        "warmup": {
          "walletWarmer": {
            "enabled": false
          }
        },
        "events": [],
        "name": "hathor-wallet-service-dev-onMinersListRequest",
        "package": {
          "artifact": ".serverless/hathor-wallet-service.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "OnMinersListRequestLambdaVersionBsOap0AqSNboJLJrFLsxUW6KX3bcsVby4O0wbM8"
      },
      "onTotalSupplyRequest": {
        "handler": "src/api/totalSupply.onTotalSupplyRequest",
        "timeout": 120,
        "warmup": {
          "walletWarmer": {
            "enabled": false
          }
        },
        "events": [],
        "name": "hathor-wallet-service-dev-onTotalSupplyRequest",
        "package": {
          "artifact": ".serverless/hathor-wallet-service.zip"
        },
        "memory": 256,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "OnTotalSupplyRequestLambdaVersionPtsFBYOHNrJ4eYYlP6aYeuNqgDdlIPAJBrXpcutc"
      },
      "onHandleReorgRequest": {
        "handler": "src/txProcessor.onHandleReorgRequest",
        "timeout": 300,
        "warmup": {
          "walletWarmer": {
            "enabled": false
          }
        },
        "events": [],
        "name": "hathor-wallet-service-dev-onHandleReorgRequest",
        "package": {
          "artifact": ".serverless/hathor-wallet-service.zip"
        },
        "memory": 256,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "OnHandleReorgRequestLambdaVersionJrkwlYtu6Y62NI0kJnEwwxv8IG625MnFblJ4IheFis0"
      },
      "onNewTxEvent": {
        "handler": "src/txProcessor.onNewTxEvent",
        "warmup": {
          "walletWarmer": {
            "enabled": false
          }
        },
        "events": [],
        "name": "hathor-wallet-service-dev-onNewTxEvent",
        "package": {
          "artifact": ".serverless/hathor-wallet-service.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "OnNewTxEventLambdaVersioncSyCzfLH3sBeZMve96tju3eO05MEun53q5T03kF2EE"
      },
      "onNewNftEvent": {
        "handler": "src/txProcessor.onNewNftEvent",
        "warmup": {
          "walletWarmer": {
            "enabled": false
          }
        },
        "iamRoleStatementsInherit": true,
        "iamRoleStatements": [
          {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"OnNewNftEventIamRoleLambdaExecution\"][\"Properties\"][\"Policies\"][0][\"PolicyDocument\"][\"Statement\"][2]"
          }
        ],
        "events": [],
        "name": "hathor-wallet-service-dev-onNewNftEvent",
        "package": {
          "artifact": ".serverless/hathor-wallet-service.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "OnNewNftEventLambdaVersionlBgOx0fdmN3y8hYXwd4l1T8aH7dLZAAevxymStgL4hE"
      },
      "loadWalletAsync": {
        "handler": "src/api/wallet.loadWallet",
        "warmup": {
          "walletWarmer": {
            "enabled": false
          }
        },
        "events": [],
        "name": "hathor-wallet-service-dev-loadWalletAsync",
        "package": {
          "artifact": ".serverless/hathor-wallet-service.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "LoadWalletAsyncLambdaVersionOqsRRC5hNavynN6dh0gxkzikm6N0nCnmAWTfOuXr64"
      },
      "loadWalletApi": {
        "role": "arn:aws:iam::1234:role/WalletServiceLoadWalletLambda",
        "handler": "src/api/wallet.load",
        "events": [
          {
            "http": {
              "path": "wallet/init",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "warmup": {
          "walletWarmer": {
            "enabled": true
          }
        },
        "name": "hathor-wallet-service-dev-loadWalletApi",
        "package": {
          "artifact": ".serverless/hathor-wallet-service.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "LoadWalletApiLambdaVersion7KtFL6itBBL1Pl5KftoZyzxKBTFkyWzGFh4vVNm48"
      },
      "changeWalletAuthXpubApi": {
        "handler": "src/api/wallet.changeAuthXpub",
        "events": [
          {
            "http": {
              "path": "wallet/auth",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "warmup": {
          "walletWarmer": {
            "enabled": false
          }
        },
        "name": "hathor-wallet-service-dev-changeWalletAuthXpubApi",
        "package": {
          "artifact": ".serverless/hathor-wallet-service.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "ChangeWalletAuthXpubApiLambdaVersiongpkgqrPjEbWA3YE4oHK80mZsSYxsoaVIGt3TSYIxWGE"
      },
      "getWalletStatusApi": {
        "handler": "src/api/wallet.get",
        "events": [
          {
            "http": {
              "path": "wallet/status",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "TOKEN",
                "name": "bearerAuthorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"BearerAuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "identityValidationExpression": "Bearer (.*)",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "warmup": {
          "walletWarmer": {
            "enabled": true
          }
        },
        "name": "hathor-wallet-service-dev-getWalletStatusApi",
        "package": {
          "artifact": ".serverless/hathor-wallet-service.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetWalletStatusApiLambdaVersion5xUVtXvLy5LzSEgVfibPjapd5TdX1NA1sqztoJXw6Cs"
      },
      "checkAddressMineApi": {
        "handler": "src/api/addresses.checkMine",
        "events": [
          {
            "http": {
              "path": "wallet/addresses/check_mine",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "TOKEN",
                "name": "bearerAuthorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"BearerAuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "identityValidationExpression": "Bearer (.*)",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "warmup": {
          "walletWarmer": {
            "enabled": false
          }
        },
        "name": "hathor-wallet-service-dev-checkAddressMineApi",
        "package": {
          "artifact": ".serverless/hathor-wallet-service.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "CheckAddressMineApiLambdaVersionOoi0qByQpyKkusBpXnCiZIp2OE8Vo6vsz8WF1PrxUA"
      },
      "getAddressesApi": {
        "handler": "src/api/addresses.get",
        "events": [
          {
            "http": {
              "path": "wallet/addresses",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "TOKEN",
                "name": "bearerAuthorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"BearerAuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "identityValidationExpression": "Bearer (.*)",
                "claims": []
              },
              "request": {
                "parameters": {
                  "method.request.path.index": false
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "warmup": {
          "walletWarmer": {
            "enabled": true
          }
        },
        "name": "hathor-wallet-service-dev-getAddressesApi",
        "package": {
          "artifact": ".serverless/hathor-wallet-service.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetAddressesApiLambdaVersionyUA3EUzIZxKaLOurCy30iQVXOryDTbbmKRuNY"
      },
      "getNewAddresses": {
        "handler": "src/api/newAddresses.get",
        "events": [
          {
            "http": {
              "path": "wallet/addresses/new",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "TOKEN",
                "name": "bearerAuthorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"BearerAuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "identityValidationExpression": "Bearer (.*)",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "warmup": {
          "walletWarmer": {
            "enabled": true
          }
        },
        "name": "hathor-wallet-service-dev-getNewAddresses",
        "package": {
          "artifact": ".serverless/hathor-wallet-service.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetNewAddressesLambdaVersionDjU5QhzltDJS882wOMJaSJrRwuWiT4PdGCWPPMPuY"
      },
      "getUtxos": {
        "handler": "src/api/txOutputs.getFilteredUtxos",
        "events": [
          {
            "http": {
              "path": "wallet/utxos",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "TOKEN",
                "name": "bearerAuthorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"BearerAuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "identityValidationExpression": "Bearer (.*)",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "warmup": {
          "walletWarmer": {
            "enabled": false
          }
        },
        "name": "hathor-wallet-service-dev-getUtxos",
        "package": {
          "artifact": ".serverless/hathor-wallet-service.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetUtxosLambdaVersionGBGxPPyGLJq2Ndn6Kkza7B9pcWZUnVeeb0x2p5uxrMA"
      },
      "getTxOutputs": {
        "handler": "src/api/txOutputs.getFilteredTxOutputs",
        "events": [
          {
            "http": {
              "path": "wallet/tx_outputs",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "TOKEN",
                "name": "bearerAuthorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"BearerAuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "identityValidationExpression": "Bearer (.*)",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "warmup": {
          "walletWarmer": {
            "enabled": false
          }
        },
        "name": "hathor-wallet-service-dev-getTxOutputs",
        "package": {
          "artifact": ".serverless/hathor-wallet-service.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetTxOutputsLambdaVersionlBsn88PEhO0VypYYqHydwxeJbA5YIuuVnbFfpI14g"
      },
      "getBalanceApi": {
        "handler": "src/api/balances.get",
        "events": [
          {
            "http": {
              "path": "wallet/balances",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "TOKEN",
                "name": "bearerAuthorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"BearerAuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "identityValidationExpression": "Bearer (.*)",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "warmup": {
          "walletWarmer": {
            "enabled": true
          }
        },
        "name": "hathor-wallet-service-dev-getBalanceApi",
        "package": {
          "artifact": ".serverless/hathor-wallet-service.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetBalanceApiLambdaVersionm7hEkhXtHc4dtqUKvB3cmiJWNdbwuGXPWaz7NhGHO4"
      },
      "getTokensApi": {
        "handler": "src/api/tokens.get",
        "events": [
          {
            "http": {
              "path": "wallet/tokens",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "TOKEN",
                "name": "bearerAuthorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"BearerAuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "identityValidationExpression": "Bearer (.*)",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "warmup": {
          "walletWarmer": {
            "enabled": true
          }
        },
        "name": "hathor-wallet-service-dev-getTokensApi",
        "package": {
          "artifact": ".serverless/hathor-wallet-service.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetTokensApiLambdaVersionQAeSrARG61o5Fv3WEfjuJ6VCpzi1fMF4fnzwFQFoMo"
      },
      "getTokenDetails": {
        "handler": "src/api/tokens.getTokenDetails",
        "events": [
          {
            "http": {
              "path": "wallet/tokens/{token_id}/details",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "TOKEN",
                "name": "bearerAuthorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"BearerAuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "identityValidationExpression": "Bearer (.*)",
                "claims": []
              },
              "request": {
                "parameters": {
                  "method.request.path.token_id": true
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "warmup": {
          "walletWarmer": {
            "enabled": false
          }
        },
        "name": "hathor-wallet-service-dev-getTokenDetails",
        "package": {
          "artifact": ".serverless/hathor-wallet-service.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetTokenDetailsLambdaVersionez8TAuRJc14zUmMItzUkZh60EwGyqtPesFefUJsjg"
      },
      "getVersionData": {
        "handler": "src/api/version.get",
        "events": [
          {
            "http": {
              "path": "version",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "warmup": {
          "walletWarmer": {
            "enabled": true
          }
        },
        "name": "hathor-wallet-service-dev-getVersionData",
        "package": {
          "artifact": ".serverless/hathor-wallet-service.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetVersionDataLambdaVersion3aTvONNgfDqcnM0fNZIBYXwZbwV6TBcuBKkjw59s"
      },
      "getTxHistoryApi": {
        "handler": "src/api/txhistory.get",
        "events": [
          {
            "http": {
              "path": "wallet/history",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "TOKEN",
                "name": "bearerAuthorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"BearerAuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "identityValidationExpression": "Bearer (.*)",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "warmup": {
          "walletWarmer": {
            "enabled": true
          }
        },
        "name": "hathor-wallet-service-dev-getTxHistoryApi",
        "package": {
          "artifact": ".serverless/hathor-wallet-service.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetTxHistoryApiLambdaVersion9cWpVgVIcN6l8j9uiezcTnnbmoKR9HtWXOASfGD5A"
      },
      "createTxProposalApi": {
        "handler": "src/api/txProposalCreate.create",
        "events": [
          {
            "http": {
              "path": "tx/proposal",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "TOKEN",
                "name": "bearerAuthorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"BearerAuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "identityValidationExpression": "Bearer (.*)",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "warmup": {
          "walletWarmer": {
            "enabled": false
          }
        },
        "name": "hathor-wallet-service-dev-createTxProposalApi",
        "package": {
          "artifact": ".serverless/hathor-wallet-service.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "CreateTxProposalApiLambdaVersionV1gIsq1W0ifBm6DmooeFSqMQilWiexcL9YSahWwHU"
      },
      "sendTxProposalApi": {
        "handler": "src/api/txProposalSend.send",
        "events": [
          {
            "http": {
              "path": "tx/proposal/{txProposalId}",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "TOKEN",
                "name": "bearerAuthorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"BearerAuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "identityValidationExpression": "Bearer (.*)",
                "claims": []
              },
              "request": {
                "parameters": {
                  "method.request.path.txProposalId": true
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "warmup": {
          "walletWarmer": {
            "enabled": false
          }
        },
        "name": "hathor-wallet-service-dev-sendTxProposalApi",
        "package": {
          "artifact": ".serverless/hathor-wallet-service.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "SendTxProposalApiLambdaVersionvqtWtfUGSTmRfzVEkg0sG6zcROjsPXUmgIsCtK4tYE"
      },
      "deleteTxProposalApi": {
        "handler": "src/api/txProposalDestroy.destroy",
        "events": [
          {
            "http": {
              "path": "tx/proposal/{txProposalId}",
              "method": "delete",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "TOKEN",
                "name": "bearerAuthorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"BearerAuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "identityValidationExpression": "Bearer (.*)",
                "claims": []
              },
              "request": {
                "parameters": {
                  "method.request.path.txProposalId": true
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "warmup": {
          "walletWarmer": {
            "enabled": false
          }
        },
        "name": "hathor-wallet-service-dev-deleteTxProposalApi",
        "package": {
          "artifact": ".serverless/hathor-wallet-service.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "DeleteTxProposalApiLambdaVersionEiJ5TMOFFthsYuTNeKj986MJ2iclswR7L3UW4LlFsA"
      },
      "wsConnect": {
        "handler": "src/ws/connection.connect",
        "timeout": 2,
        "events": [
          {
            "websocket": {
              "route": "$connect"
            }
          },
          {
            "websocket": {
              "route": "$disconnect"
            }
          },
          {
            "websocket": {
              "route": "ping"
            }
          }
        ],
        "warmup": {
          "walletWarmer": {
            "enabled": false
          }
        },
        "alarms": [
          "wsLambdasExecutionDuration"
        ],
        "name": "hathor-wallet-service-dev-wsConnect",
        "package": {
          "artifact": ".serverless/hathor-wallet-service.zip"
        },
        "memory": 256,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "WsConnectLambdaVersion2jWfPeGOzdDo6DMGRAEdiikXdtmy1CPaoYm3ClLI"
      },
      "wsJoin": {
        "handler": "src/ws/join.handler",
        "timeout": 2,
        "events": [
          {
            "websocket": {
              "route": "join"
            }
          }
        ],
        "warmup": {
          "walletWarmer": {
            "enabled": false
          }
        },
        "alarms": [
          "wsLambdasExecutionDuration"
        ],
        "name": "hathor-wallet-service-dev-wsJoin",
        "package": {
          "artifact": ".serverless/hathor-wallet-service.zip"
        },
        "memory": 256,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "WsJoinLambdaVersionu0NIC4yUTgE6fmxPivSNCWcR75Ua1qmAOwOATAZLW4Q"
      },
      "wsTxNotifyNew": {
        "handler": "src/ws/txNotify.onNewTx",
        "timeout": 2,
        "events": [
          {
            "sqs": {
              "arn": {
                "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"IamRoleLambdaExecution\"][\"Properties\"][\"Policies\"][0][\"PolicyDocument\"][\"Statement\"][4][\"Resource\"][0]"
              },
              "batchSize": 1,
              "maximumBatchingWindow": 0
            }
          }
        ],
        "warmup": {
          "walletWarmer": {
            "enabled": false
          }
        },
        "alarms": [
          "wsLambdasExecutionDuration"
        ],
        "name": "hathor-wallet-service-dev-wsTxNotifyNew",
        "package": {
          "artifact": ".serverless/hathor-wallet-service.zip"
        },
        "memory": 256,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "WsTxNotifyNewLambdaVersionze0on4gKwPUJSmoqcd7sD7Ol9vimZD0r7jHVRRwBDf4"
      },
      "wsTxNotifyUpdate": {
        "handler": "src/ws/txNotify.onUpdateTx",
        "timeout": 2,
        "warmup": {
          "walletWarmer": {
            "enabled": false
          }
        },
        "alarms": [
          "wsLambdasExecutionDuration"
        ],
        "events": [],
        "name": "hathor-wallet-service-dev-wsTxNotifyUpdate",
        "package": {
          "artifact": ".serverless/hathor-wallet-service.zip"
        },
        "memory": 256,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "WsTxNotifyUpdateLambdaVersionAq6juaTKAontinsGyJ9eQO69jjgtYujBL0BbGesL1g"
      },
      "wsAdminBroadcast": {
        "handler": "src/ws/admin.broadcast",
        "timeout": 2,
        "warmup": {
          "walletWarmer": {
            "enabled": false
          }
        },
        "alarms": [
          "wsLambdasExecutionDuration"
        ],
        "events": [],
        "name": "hathor-wallet-service-dev-wsAdminBroadcast",
        "package": {
          "artifact": ".serverless/hathor-wallet-service.zip"
        },
        "memory": 256,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "WsAdminBroadcastLambdaVersionGItWXmh7DIQwdp9YWMv5oYxNz5KROppnBbszP5JirY"
      },
      "wsAdminDisconnect": {
        "handler": "src/ws/admin.disconnect",
        "timeout": 2,
        "warmup": {
          "walletWarmer": {
            "enabled": false
          }
        },
        "alarms": [
          "wsLambdasExecutionDuration"
        ],
        "events": [],
        "name": "hathor-wallet-service-dev-wsAdminDisconnect",
        "package": {
          "artifact": ".serverless/hathor-wallet-service.zip"
        },
        "memory": 256,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "WsAdminDisconnectLambdaVersionM7EYeWbz4dlcPRmtheAx6WUvXfgTtSXxMfI50RX3Xs"
      },
      "wsAdminMulticast": {
        "handler": "src/ws/admin.multicast",
        "timeout": 2,
        "warmup": {
          "walletWarmer": {
            "enabled": false
          }
        },
        "alarms": [
          "wsLambdasExecutionDuration"
        ],
        "events": [],
        "name": "hathor-wallet-service-dev-wsAdminMulticast",
        "package": {
          "artifact": ".serverless/hathor-wallet-service.zip"
        },
        "memory": 256,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "WsAdminMulticastLambdaVersionSu7vDcUXw5nGklYKXG3bewGGLwiECAZi8XmoqNXPNI"
      },
      "authTokenApi": {
        "handler": "src/api/auth.tokenHandler",
        "timeout": 6,
        "events": [
          {
            "http": {
              "path": "auth/token",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "warmup": {
          "walletWarmer": {
            "enabled": false
          }
        },
        "name": "hathor-wallet-service-dev-authTokenApi",
        "package": {
          "artifact": ".serverless/hathor-wallet-service.zip"
        },
        "memory": 256,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "AuthTokenApiLambdaVersionNLbhIakxhffp9Btc1ZNABrqkCqGkOdZFsZCW8fkvv0"
      },
      "bearerAuthorizer": {
        "handler": "src/api/auth.bearerAuthorizer",
        "warmup": {
          "walletWarmer": {
            "enabled": false
          }
        },
        "events": [],
        "name": "hathor-wallet-service-dev-bearerAuthorizer",
        "package": {
          "artifact": ".serverless/hathor-wallet-service.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "BearerAuthorizerLambdaVersion7zt6OlUTRqPQ2gJSDNXNKZJ5N62YUdj1v3c8SgkRAEo"
      },
      "metrics": {
        "handler": "src/metrics.getMetrics",
        "events": [
          {
            "http": {
              "path": "metrics",
              "method": "get",
              "throttling": {
                "maxRequestsPerSecond": 2,
                "maxConcurrentRequests": 2
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "warmup": {
          "walletWarmer": {
            "enabled": false
          }
        },
        "name": "hathor-wallet-service-dev-metrics",
        "package": {
          "artifact": ".serverless/hathor-wallet-service.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "MetricsLambdaVersionRs2jvKlQFug100jZciIt6XOVRMYw1SShgYwpEOFjNEk"
      },
      "pushRegister": {
        "handler": "src/api/pushRegister.register",
        "events": [
          {
            "http": {
              "path": "wallet/push/register",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "TOKEN",
                "name": "bearerAuthorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"BearerAuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "identityValidationExpression": "Bearer (.*)",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "warmup": {
          "walletWarmer": {
            "enabled": false
          }
        },
        "name": "hathor-wallet-service-dev-pushRegister",
        "package": {
          "artifact": ".serverless/hathor-wallet-service.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "PushRegisterLambdaVersionbc03QSe6m0grtGWpDUSDdcRSi20Z1oDLCFEzl21Egc"
      },
      "pushUpdate": {
        "handler": "src/api/pushUpdate.update",
        "events": [
          {
            "http": {
              "path": "wallet/push/update",
              "method": "put",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "PUT"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "TOKEN",
                "name": "bearerAuthorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"BearerAuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "identityValidationExpression": "Bearer (.*)",
                "claims": []
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "warmup": {
          "walletWarmer": {
            "enabled": false
          }
        },
        "name": "hathor-wallet-service-dev-pushUpdate",
        "package": {
          "artifact": ".serverless/hathor-wallet-service.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "PushUpdateLambdaVersionsK6z8xrQBleCJbMArqBywliPTfiFRxlkPGPnol090"
      },
      "pushUnregister": {
        "handler": "src/api/pushUnregister.unregister",
        "events": [
          {
            "http": {
              "path": "wallet/push/unregister/{deviceId}",
              "method": "delete",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "DELETE"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "TOKEN",
                "name": "bearerAuthorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"BearerAuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "identityValidationExpression": "Bearer (.*)",
                "claims": []
              },
              "request": {
                "parameters": {
                  "method.request.path.deviceId": true
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "warmup": {
          "walletWarmer": {
            "enabled": false
          }
        },
        "name": "hathor-wallet-service-dev-pushUnregister",
        "package": {
          "artifact": ".serverless/hathor-wallet-service.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "PushUnregisterLambdaVersionlCeD36ZaQ2AGyQt0BGcPPjq6Y9eoMieTIsbhik4w"
      },
      "getTxById": {
        "handler": "src/api/txById.get",
        "events": [
          {
            "http": {
              "path": "wallet/transactions/{txId}",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "TOKEN",
                "name": "bearerAuthorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"BearerAuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "identityValidationExpression": "Bearer (.*)",
                "claims": []
              },
              "request": {
                "parameters": {
                  "method.request.path.txId": true
                }
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "warmup": {
          "walletWarmer": {
            "enabled": false
          }
        },
        "name": "hathor-wallet-service-dev-getTxById",
        "package": {
          "artifact": ".serverless/hathor-wallet-service.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetTxByIdLambdaVersionFx8UBF9Ex9N1bmy0i3pclqx2lQ3H9D336s1lyHufX1Q"
      },
      "proxiedGetTxById": {
        "handler": "src/api/fullnodeProxy.getTransactionById",
        "events": [
          {
            "http": {
              "path": "wallet/proxy/transactions/{txId}",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "TOKEN",
                "name": "bearerAuthorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"BearerAuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "identityValidationExpression": "Bearer (.*)",
                "claims": []
              },
              "request": {
                "parameters": {
                  "method.request.path.txId": true
                }
              },
              "throttling": {
                "maxRequestsPerSecond": 50
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "warmup": {
          "walletWarmer": {
            "enabled": false
          }
        },
        "name": "hathor-wallet-service-dev-proxiedGetTxById",
        "package": {
          "artifact": ".serverless/hathor-wallet-service.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "ProxiedGetTxByIdLambdaVersionJbFWRUi1ol1tDN6blKR4uXyBEcjFxeTGFB4YyBG2esY"
      },
      "proxiedGetConfirmationData": {
        "handler": "src/api/fullnodeProxy.getConfirmationData",
        "events": [
          {
            "http": {
              "path": "wallet/proxy/transactions/{txId}/confirmation_data",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "TOKEN",
                "name": "bearerAuthorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"BearerAuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "identityValidationExpression": "Bearer (.*)",
                "claims": []
              },
              "request": {
                "parameters": {
                  "method.request.path.txId": true
                }
              },
              "throttling": {
                "maxRequestsPerSecond": 10
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "warmup": {
          "walletWarmer": {
            "enabled": false
          }
        },
        "name": "hathor-wallet-service-dev-proxiedGetConfirmationData",
        "package": {
          "artifact": ".serverless/hathor-wallet-service.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "ProxiedGetConfirmationDataLambdaVersion8RAZJDpBb8ZFq1Tpe25qf3QN3wspXqMuJnLSwSobVA"
      },
      "proxiedGraphvizNeighborsQuery": {
        "handler": "src/api/fullnodeProxy.queryGraphvizNeighbours",
        "events": [
          {
            "http": {
              "path": "wallet/proxy/graphviz/neighbours",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "TOKEN",
                "name": "bearerAuthorizer",
                "arn": {
                  "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"BearerAuthorizerLambdaPermissionApiGateway\"][\"Properties\"][\"FunctionName\"]"
                },
                "managedExternally": false,
                "resultTtlInSeconds": 300,
                "identitySource": "method.request.header.Authorization",
                "identityValidationExpression": "Bearer (.*)",
                "claims": []
              },
              "throttling": {
                "maxRequestsPerSecond": 20
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "warmup": {
          "walletWarmer": {
            "enabled": false
          }
        },
        "name": "hathor-wallet-service-dev-proxiedGraphvizNeighborsQuery",
        "package": {
          "artifact": ".serverless/hathor-wallet-service.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "ProxiedGraphvizNeighborsQueryLambdaVersionZVR30zSAZj57kpJa2GfWTMQHUkfLzJ1w4RUMjudMIY"
      },
      "sendNotificationToDevice": {
        "handler": "src/api/pushSendNotificationToDevice.send",
        "warmup": {
          "walletWarmer": {
            "enabled": false
          }
        },
        "events": [],
        "name": "hathor-wallet-service-dev-sendNotificationToDevice",
        "package": {
          "artifact": ".serverless/hathor-wallet-service.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "SendNotificationToDeviceLambdaVersioncD4Bwy7Qs3DXFtZx8oZjndySwxO27Lct9PLilfLcg"
      },
      "txPushRequested": {
        "handler": "src/api/txPushNotificationRequested.handleRequest",
        "warmup": {
          "walletWarmer": {
            "enabled": false
          }
        },
        "iamRoleStatementsInherit": true,
        "iamRoleStatements": [
          {
            "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"TxPushRequestedIamRoleLambdaExecution\"][\"Properties\"][\"Policies\"][0][\"PolicyDocument\"][\"Statement\"][2]"
          }
        ],
        "events": [],
        "name": "hathor-wallet-service-dev-txPushRequested",
        "package": {
          "artifact": ".serverless/hathor-wallet-service.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "TxPushRequestedLambdaVersion0MbTEYmSuFwVocSFViLiKKQOnN776rGbMZPjl6bAw"
      },
      "deleteStalePushDevices": {
        "handler": "src/db/cronRoutines.cleanStalePushDevices",
        "events": [
          {
            "schedule": "cron(17 3 */15 * ? *)"
          }
        ],
        "warmup": {
          "walletWarmer": {
            "enabled": false
          }
        },
        "name": "hathor-wallet-service-dev-deleteStalePushDevices",
        "package": {
          "artifact": ".serverless/hathor-wallet-service.zip"
        },
        "memory": 256,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "DeleteStalePushDevicesLambdaVersionO7VFZgAnEdcd5UCXZknxgHJP29jBZgVwqsxgIZkHU"
      },
      "cleanUnsentTxProposalsUtxos": {
        "handler": "src/db/cronRoutines.cleanUnsentTxProposalsUtxos",
        "timeout": 60,
        "events": [
          {
            "schedule": "cron(*/5 * * * ? *)"
          }
        ],
        "warmup": {
          "walletWarmer": {
            "enabled": false
          }
        },
        "alarms": [
          "cleanTxProposalsUtxosDuration"
        ],
        "name": "hathor-wallet-service-dev-cleanUnsentTxProposalsUtxos",
        "package": {
          "artifact": ".serverless/hathor-wallet-service.zip"
        },
        "memory": 256,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "CleanUnsentTxProposalsUtxosLambdaVersiono28VNZwQGtgiLLLK3fNd7ARm8FjXyftM2bBlld2A"
      },
      "warmUpPluginWalletWarmer": {
        "description": "Serverless WarmUp Plugin (warmer \"walletWarmer\")",
        "events": {
          "$ref": "$[\"service\"][\"custom\"][\"warmup\"][\"walletWarmer\"][\"events\"]"
        },
        "handler": ".warmup/walletWarmer/index.warmUp",
        "memorySize": 128,
        "name": "hathor-wallet-service-dev-warmup-plugin-walletWarmer",
        "runtime": "nodejs18.x",
        "package": {
          "individually": true,
          "patterns": [
            "!**",
            ".warmup/walletWarmer/**"
          ],
          "artifact": "/Users/andrecardoso/Dev/hathor/hathor-wallet-service-sync-daemon/packages/wallet-service/.serverless/warmUpPluginWalletWarmer.zip"
        },
        "timeout": 10,
        "environment": {},
        "role": "WarmUpPluginWalletWarmerRole",
        "layers": {
          "$ref": "$[\"service\"][\"provider\"][\"compiledCloudFormationTemplate\"][\"Resources\"][\"WarmUpPluginWalletWarmerLambdaFunction\"][\"Properties\"][\"Layers\"]"
        },
        "memory": 128,
        "vpc": {},
        "versionLogicalId": "WarmUpPluginWalletWarmerLambdaVersionrVA2ERLQzEqPZx6IBV0wkyZXIDESN5Fdl0xY1XtG3s"
      }
    },
    "resources": {
      "Resources": {
        "GatewayResponseDefault4XX": {
          "Type": "AWS::ApiGateway::GatewayResponse",
          "Properties": {
            "ResponseParameters": {
              "gatewayresponse.header.Access-Control-Allow-Origin": "'*'",
              "gatewayresponse.header.Access-Control-Allow-Headers": "'*'"
            },
            "ResponseType": "DEFAULT_4XX",
            "RestApiId": {
              "Ref": "ApiGatewayRestApi"
            }
          }
        },
        "WalletServiceNewTxQueue": {
          "Type": "AWS::SQS::Queue",
          "Properties": {
            "QueueName": "WalletServiceNewTxQueue_dev"
          }
        },
        "WarmUpPluginWalletWarmerRole": {
          "Type": "AWS::IAM::Role",
          "Properties": {
            "Path": "/",
            "RoleName": {
              "Fn::Join": [
                "-",
                [
                  "hathor-wallet-service",
                  "dev",
                  {
                    "Ref": "AWS::Region"
                  },
                  "walletwarmer",
                  "role"
                ]
              ]
            },
            "AssumeRolePolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": [
                      "lambda.amazonaws.com"
                    ]
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            },
            "Policies": [
              {
                "PolicyName": {
                  "Fn::Join": [
                    "-",
                    [
                      "hathor-wallet-service",
                      "dev",
                      "warmer",
                      "walletwarmer",
                      "policy"
                    ]
                  ]
                },
                "PolicyDocument": {
                  "Version": "2012-10-17",
                  "Statement": [
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:CreateLogGroup",
                        "logs:CreateLogStream"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/hathor-wallet-service-dev-warmup-plugin-walletWarmer:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "logs:PutLogEvents"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/hathor-wallet-service-dev-warmup-plugin-walletWarmer:*:*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "lambda:InvokeFunction"
                      ],
                      "Resource": [
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:hathor-wallet-service-dev-loadWalletApi*"
                        },
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:hathor-wallet-service-dev-getWalletStatusApi*"
                        },
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:hathor-wallet-service-dev-getAddressesApi*"
                        },
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:hathor-wallet-service-dev-getNewAddresses*"
                        },
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:hathor-wallet-service-dev-getBalanceApi*"
                        },
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:hathor-wallet-service-dev-getTokensApi*"
                        },
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:hathor-wallet-service-dev-getVersionData*"
                        },
                        {
                          "Fn::Sub": "arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:hathor-wallet-service-dev-getTxHistoryApi*"
                        }
                      ]
                    },
                    {
                      "Effect": "Allow",
                      "Action": [
                        "ec2:CreateNetworkInterface",
                        "ec2:DescribeNetworkInterfaces",
                        "ec2:DetachNetworkInterface",
                        "ec2:DeleteNetworkInterface"
                      ],
                      "Resource": "*"
                    }
                  ]
                }
              }
            ]
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": "hathor-wallet-service",
      "frameworkVersion": "3",
      "useDotenv": true,
      "custom": {
        "$ref": "$[\"service\"][\"custom\"]"
      },
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false
  },
  "package": {
    "artifactDirectoryName": "serverless/hathor-wallet-service/dev/1696424677965-2023-10-04T13:04:37.965Z",
    "artifact": ""
  }
}